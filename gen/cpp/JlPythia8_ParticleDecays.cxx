// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::ParticleDecays> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::ParticleDecays> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::ParticleDecays
// signature to use in the veto file: Pythia8::ParticleDecays
struct JlPythia8_ParticleDecays: public Wrapper {

  JlPythia8_ParticleDecays(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::ParticleDecays (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ParticleDecays.h:57:7
    jlcxx::TypeWrapper<Pythia8::ParticleDecays>  t = jlModule.add_type<Pythia8::ParticleDecays>("Pythia8!ParticleDecays");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::ParticleDecays>>(new jlcxx::TypeWrapper<Pythia8::ParticleDecays>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void Pythia8::ParticleDecays::init(Pythia8::TimeShowerPtr, Pythia8::StringFlav *, Pythia8::DecayHandlerPtr, std::vector<int>) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::ParticleDecays::init(Pythia8::TimeShowerPtr, Pythia8::StringFlav *, Pythia8::DecayHandlerPtr, std::vector<int>)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ParticleDecays.h:72:8
    t.method("init", static_cast<void (Pythia8::ParticleDecays::*)(Pythia8::TimeShowerPtr, Pythia8::StringFlav *, Pythia8::DecayHandlerPtr, std::vector<int>) >(&Pythia8::ParticleDecays::init));

    DEBUG_MSG("Adding wrapper for bool Pythia8::ParticleDecays::decay(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::ParticleDecays::decay(int, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ParticleDecays.h:76:8
    t.method("decay", static_cast<bool (Pythia8::ParticleDecays::*)(int, Pythia8::Event &) >(&Pythia8::ParticleDecays::decay));

    DEBUG_MSG("Adding wrapper for bool Pythia8::ParticleDecays::decayAll(Pythia8::Event &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::ParticleDecays::decayAll(Pythia8::Event &, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ParticleDecays.h:79:8
    t.method("decayAll", static_cast<bool (Pythia8::ParticleDecays::*)(Pythia8::Event &, double) >(&Pythia8::ParticleDecays::decayAll));
    t.method("decayAll", [](Pythia8::ParticleDecays& a, Pythia8::Event & arg0)->bool { return a.decayAll(arg0); });
    t.method("decayAll", [](Pythia8::ParticleDecays* a, Pythia8::Event & arg0)->bool { return a->decayAll(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::ParticleDecays::moreToDo() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::ParticleDecays::moreToDo()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ParticleDecays.h:82:8
    t.method("moreToDo", static_cast<bool (Pythia8::ParticleDecays::*)()  const>(&Pythia8::ParticleDecays::moreToDo));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::ParticleDecays>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_ParticleDecays(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_ParticleDecays(module));
}
