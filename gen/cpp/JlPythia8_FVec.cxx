// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::FVec> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::FVec> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::FVec
// signature to use in the veto file: Pythia8::FVec
struct JlPythia8_FVec: public Wrapper {

  JlPythia8_FVec(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::FVec (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:111:7
    jlcxx::TypeWrapper<Pythia8::FVec>  t = jlModule.add_type<Pythia8::FVec>("Pythia8!FVec");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::FVec>>(new jlcxx::TypeWrapper<Pythia8::FVec>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::FVec::FVec(std::string, std::vector<bool>) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:116:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, std::vector<bool>>(/*finalize=*/true);

    DEBUG_MSG("Adding name methods  to provide read access to the field name (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:120:10
    // signature to use in the veto list: Pythia8::FVec::name
    t.method("name", [](const Pythia8::FVec& a) -> const std::string& { return a.name; });
    t.method("name", [](Pythia8::FVec& a) -> std::string& { return a.name; });
    t.method("name", [](const Pythia8::FVec* a) -> const std::string& { return a->name; });
    t.method("name", [](Pythia8::FVec* a) -> std::string& { return a->name; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:120:10
    // signature to use in the veto list: Pythia8::FVec::name
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](Pythia8::FVec& a, const std::string& val) -> std::string& { return a.name = val; });

    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](Pythia8::FVec* a, const std::string& val) -> std::string& { return a->name = val; });

    DEBUG_MSG("Adding valNow methods  to provide read access to the field valNow (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:121:16
    // signature to use in the veto list: Pythia8::FVec::valNow
    t.method("valNow", [](const Pythia8::FVec& a) -> const std::vector<bool>& { return a.valNow; });
    t.method("valNow", [](Pythia8::FVec& a) -> std::vector<bool>& { return a.valNow; });
    t.method("valNow", [](const Pythia8::FVec* a) -> const std::vector<bool>& { return a->valNow; });
    t.method("valNow", [](Pythia8::FVec* a) -> std::vector<bool>& { return a->valNow; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:121:16
    // signature to use in the veto list: Pythia8::FVec::valNow
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding valNow! methods to provide write access to the field valNow (" __HERE__ ")");
    t.method("valNow!", [](Pythia8::FVec& a, const std::vector<bool>& val) -> std::vector<bool>& { return a.valNow = val; });

    DEBUG_MSG("Adding valNow! methods to provide write access to the field valNow (" __HERE__ ")");
    t.method("valNow!", [](Pythia8::FVec* a, const std::vector<bool>& val) -> std::vector<bool>& { return a->valNow = val; });

    DEBUG_MSG("Adding valDefault methods  to provide read access to the field valDefault (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:121:24
    // signature to use in the veto list: Pythia8::FVec::valDefault
    t.method("valDefault", [](const Pythia8::FVec& a) -> const std::vector<bool>& { return a.valDefault; });
    t.method("valDefault", [](Pythia8::FVec& a) -> std::vector<bool>& { return a.valDefault; });
    t.method("valDefault", [](const Pythia8::FVec* a) -> const std::vector<bool>& { return a->valDefault; });
    t.method("valDefault", [](Pythia8::FVec* a) -> std::vector<bool>& { return a->valDefault; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:121:24
    // signature to use in the veto list: Pythia8::FVec::valDefault
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding valDefault! methods to provide write access to the field valDefault (" __HERE__ ")");
    t.method("valDefault!", [](Pythia8::FVec& a, const std::vector<bool>& val) -> std::vector<bool>& { return a.valDefault = val; });

    DEBUG_MSG("Adding valDefault! methods to provide write access to the field valDefault (" __HERE__ ")");
    t.method("valDefault!", [](Pythia8::FVec* a, const std::vector<bool>& val) -> std::vector<bool>& { return a->valDefault = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::FVec>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_FVec(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_FVec(module));
}
