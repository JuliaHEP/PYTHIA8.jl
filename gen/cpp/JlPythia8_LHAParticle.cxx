// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::LHAParticle> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::LHAParticle> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::LHAParticle
// signature to use in the veto file: Pythia8::LHAParticle
struct JlPythia8_LHAParticle: public Wrapper {

  JlPythia8_LHAParticle(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::LHAParticle (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:48:7
    jlcxx::TypeWrapper<Pythia8::LHAParticle>  t = jlModule.add_type<Pythia8::LHAParticle>("Pythia8!LHAParticle");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAParticle>>(new jlcxx::TypeWrapper<Pythia8::LHAParticle>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::LHAParticle::LHAParticle(int, int, int, int, int, int, double, double, double, double, double, double, double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:57:3
    t.constructor<int, int, int, int, int, int, double, double, double, double, double, double, double, double>(/*finalize=*/true);

    DEBUG_MSG("Adding idPart methods  to provide read access to the field idPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:10
    // signature to use in the veto list: Pythia8::LHAParticle::idPart
    t.method("idPart", [](const Pythia8::LHAParticle& a) -> int { return a.idPart; });
    t.method("idPart", [](Pythia8::LHAParticle& a) -> int { return a.idPart; });
    t.method("idPart", [](const Pythia8::LHAParticle* a) -> int { return a->idPart; });
    t.method("idPart", [](Pythia8::LHAParticle* a) -> int { return a->idPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:10
    // signature to use in the veto list: Pythia8::LHAParticle::idPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding idPart! methods to provide write access to the field idPart (" __HERE__ ")");
    t.method("idPart!", [](Pythia8::LHAParticle& a, int val) -> int { return a.idPart = val; });

    DEBUG_MSG("Adding idPart! methods to provide write access to the field idPart (" __HERE__ ")");
    t.method("idPart!", [](Pythia8::LHAParticle* a, int val) -> int { return a->idPart = val; });

    DEBUG_MSG("Adding statusPart methods  to provide read access to the field statusPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:18
    // signature to use in the veto list: Pythia8::LHAParticle::statusPart
    t.method("statusPart", [](const Pythia8::LHAParticle& a) -> int { return a.statusPart; });
    t.method("statusPart", [](Pythia8::LHAParticle& a) -> int { return a.statusPart; });
    t.method("statusPart", [](const Pythia8::LHAParticle* a) -> int { return a->statusPart; });
    t.method("statusPart", [](Pythia8::LHAParticle* a) -> int { return a->statusPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:18
    // signature to use in the veto list: Pythia8::LHAParticle::statusPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding statusPart! methods to provide write access to the field statusPart (" __HERE__ ")");
    t.method("statusPart!", [](Pythia8::LHAParticle& a, int val) -> int { return a.statusPart = val; });

    DEBUG_MSG("Adding statusPart! methods to provide write access to the field statusPart (" __HERE__ ")");
    t.method("statusPart!", [](Pythia8::LHAParticle* a, int val) -> int { return a->statusPart = val; });

    DEBUG_MSG("Adding mother1Part methods  to provide read access to the field mother1Part (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:30
    // signature to use in the veto list: Pythia8::LHAParticle::mother1Part
    t.method("mother1Part", [](const Pythia8::LHAParticle& a) -> int { return a.mother1Part; });
    t.method("mother1Part", [](Pythia8::LHAParticle& a) -> int { return a.mother1Part; });
    t.method("mother1Part", [](const Pythia8::LHAParticle* a) -> int { return a->mother1Part; });
    t.method("mother1Part", [](Pythia8::LHAParticle* a) -> int { return a->mother1Part; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:30
    // signature to use in the veto list: Pythia8::LHAParticle::mother1Part
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mother1Part! methods to provide write access to the field mother1Part (" __HERE__ ")");
    t.method("mother1Part!", [](Pythia8::LHAParticle& a, int val) -> int { return a.mother1Part = val; });

    DEBUG_MSG("Adding mother1Part! methods to provide write access to the field mother1Part (" __HERE__ ")");
    t.method("mother1Part!", [](Pythia8::LHAParticle* a, int val) -> int { return a->mother1Part = val; });

    DEBUG_MSG("Adding mother2Part methods  to provide read access to the field mother2Part (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:43
    // signature to use in the veto list: Pythia8::LHAParticle::mother2Part
    t.method("mother2Part", [](const Pythia8::LHAParticle& a) -> int { return a.mother2Part; });
    t.method("mother2Part", [](Pythia8::LHAParticle& a) -> int { return a.mother2Part; });
    t.method("mother2Part", [](const Pythia8::LHAParticle* a) -> int { return a->mother2Part; });
    t.method("mother2Part", [](Pythia8::LHAParticle* a) -> int { return a->mother2Part; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:43
    // signature to use in the veto list: Pythia8::LHAParticle::mother2Part
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mother2Part! methods to provide write access to the field mother2Part (" __HERE__ ")");
    t.method("mother2Part!", [](Pythia8::LHAParticle& a, int val) -> int { return a.mother2Part = val; });

    DEBUG_MSG("Adding mother2Part! methods to provide write access to the field mother2Part (" __HERE__ ")");
    t.method("mother2Part!", [](Pythia8::LHAParticle* a, int val) -> int { return a->mother2Part = val; });

    DEBUG_MSG("Adding col1Part methods  to provide read access to the field col1Part (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:56
    // signature to use in the veto list: Pythia8::LHAParticle::col1Part
    t.method("col1Part", [](const Pythia8::LHAParticle& a) -> int { return a.col1Part; });
    t.method("col1Part", [](Pythia8::LHAParticle& a) -> int { return a.col1Part; });
    t.method("col1Part", [](const Pythia8::LHAParticle* a) -> int { return a->col1Part; });
    t.method("col1Part", [](Pythia8::LHAParticle* a) -> int { return a->col1Part; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:56
    // signature to use in the veto list: Pythia8::LHAParticle::col1Part
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding col1Part! methods to provide write access to the field col1Part (" __HERE__ ")");
    t.method("col1Part!", [](Pythia8::LHAParticle& a, int val) -> int { return a.col1Part = val; });

    DEBUG_MSG("Adding col1Part! methods to provide write access to the field col1Part (" __HERE__ ")");
    t.method("col1Part!", [](Pythia8::LHAParticle* a, int val) -> int { return a->col1Part = val; });

    DEBUG_MSG("Adding col2Part methods  to provide read access to the field col2Part (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:66
    // signature to use in the veto list: Pythia8::LHAParticle::col2Part
    t.method("col2Part", [](const Pythia8::LHAParticle& a) -> int { return a.col2Part; });
    t.method("col2Part", [](Pythia8::LHAParticle& a) -> int { return a.col2Part; });
    t.method("col2Part", [](const Pythia8::LHAParticle* a) -> int { return a->col2Part; });
    t.method("col2Part", [](Pythia8::LHAParticle* a) -> int { return a->col2Part; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:67:66
    // signature to use in the veto list: Pythia8::LHAParticle::col2Part
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding col2Part! methods to provide write access to the field col2Part (" __HERE__ ")");
    t.method("col2Part!", [](Pythia8::LHAParticle& a, int val) -> int { return a.col2Part = val; });

    DEBUG_MSG("Adding col2Part! methods to provide write access to the field col2Part (" __HERE__ ")");
    t.method("col2Part!", [](Pythia8::LHAParticle* a, int val) -> int { return a->col2Part = val; });

    DEBUG_MSG("Adding pxPart methods  to provide read access to the field pxPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:10
    // signature to use in the veto list: Pythia8::LHAParticle::pxPart
    t.method("pxPart", [](const Pythia8::LHAParticle& a) -> double { return a.pxPart; });
    t.method("pxPart", [](Pythia8::LHAParticle& a) -> double { return a.pxPart; });
    t.method("pxPart", [](const Pythia8::LHAParticle* a) -> double { return a->pxPart; });
    t.method("pxPart", [](Pythia8::LHAParticle* a) -> double { return a->pxPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:10
    // signature to use in the veto list: Pythia8::LHAParticle::pxPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pxPart! methods to provide write access to the field pxPart (" __HERE__ ")");
    t.method("pxPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.pxPart = val; });

    DEBUG_MSG("Adding pxPart! methods to provide write access to the field pxPart (" __HERE__ ")");
    t.method("pxPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->pxPart = val; });

    DEBUG_MSG("Adding pyPart methods  to provide read access to the field pyPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:18
    // signature to use in the veto list: Pythia8::LHAParticle::pyPart
    t.method("pyPart", [](const Pythia8::LHAParticle& a) -> double { return a.pyPart; });
    t.method("pyPart", [](Pythia8::LHAParticle& a) -> double { return a.pyPart; });
    t.method("pyPart", [](const Pythia8::LHAParticle* a) -> double { return a->pyPart; });
    t.method("pyPart", [](Pythia8::LHAParticle* a) -> double { return a->pyPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:18
    // signature to use in the veto list: Pythia8::LHAParticle::pyPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pyPart! methods to provide write access to the field pyPart (" __HERE__ ")");
    t.method("pyPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.pyPart = val; });

    DEBUG_MSG("Adding pyPart! methods to provide write access to the field pyPart (" __HERE__ ")");
    t.method("pyPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->pyPart = val; });

    DEBUG_MSG("Adding pzPart methods  to provide read access to the field pzPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:26
    // signature to use in the veto list: Pythia8::LHAParticle::pzPart
    t.method("pzPart", [](const Pythia8::LHAParticle& a) -> double { return a.pzPart; });
    t.method("pzPart", [](Pythia8::LHAParticle& a) -> double { return a.pzPart; });
    t.method("pzPart", [](const Pythia8::LHAParticle* a) -> double { return a->pzPart; });
    t.method("pzPart", [](Pythia8::LHAParticle* a) -> double { return a->pzPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:26
    // signature to use in the veto list: Pythia8::LHAParticle::pzPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pzPart! methods to provide write access to the field pzPart (" __HERE__ ")");
    t.method("pzPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.pzPart = val; });

    DEBUG_MSG("Adding pzPart! methods to provide write access to the field pzPart (" __HERE__ ")");
    t.method("pzPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->pzPart = val; });

    DEBUG_MSG("Adding ePart methods  to provide read access to the field ePart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:34
    // signature to use in the veto list: Pythia8::LHAParticle::ePart
    t.method("ePart", [](const Pythia8::LHAParticle& a) -> double { return a.ePart; });
    t.method("ePart", [](Pythia8::LHAParticle& a) -> double { return a.ePart; });
    t.method("ePart", [](const Pythia8::LHAParticle* a) -> double { return a->ePart; });
    t.method("ePart", [](Pythia8::LHAParticle* a) -> double { return a->ePart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:34
    // signature to use in the veto list: Pythia8::LHAParticle::ePart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding ePart! methods to provide write access to the field ePart (" __HERE__ ")");
    t.method("ePart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.ePart = val; });

    DEBUG_MSG("Adding ePart! methods to provide write access to the field ePart (" __HERE__ ")");
    t.method("ePart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->ePart = val; });

    DEBUG_MSG("Adding mPart methods  to provide read access to the field mPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:41
    // signature to use in the veto list: Pythia8::LHAParticle::mPart
    t.method("mPart", [](const Pythia8::LHAParticle& a) -> double { return a.mPart; });
    t.method("mPart", [](Pythia8::LHAParticle& a) -> double { return a.mPart; });
    t.method("mPart", [](const Pythia8::LHAParticle* a) -> double { return a->mPart; });
    t.method("mPart", [](Pythia8::LHAParticle* a) -> double { return a->mPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:41
    // signature to use in the veto list: Pythia8::LHAParticle::mPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mPart! methods to provide write access to the field mPart (" __HERE__ ")");
    t.method("mPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.mPart = val; });

    DEBUG_MSG("Adding mPart! methods to provide write access to the field mPart (" __HERE__ ")");
    t.method("mPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->mPart = val; });

    DEBUG_MSG("Adding tauPart methods  to provide read access to the field tauPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:48
    // signature to use in the veto list: Pythia8::LHAParticle::tauPart
    t.method("tauPart", [](const Pythia8::LHAParticle& a) -> double { return a.tauPart; });
    t.method("tauPart", [](Pythia8::LHAParticle& a) -> double { return a.tauPart; });
    t.method("tauPart", [](const Pythia8::LHAParticle* a) -> double { return a->tauPart; });
    t.method("tauPart", [](Pythia8::LHAParticle* a) -> double { return a->tauPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:48
    // signature to use in the veto list: Pythia8::LHAParticle::tauPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding tauPart! methods to provide write access to the field tauPart (" __HERE__ ")");
    t.method("tauPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.tauPart = val; });

    DEBUG_MSG("Adding tauPart! methods to provide write access to the field tauPart (" __HERE__ ")");
    t.method("tauPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->tauPart = val; });

    DEBUG_MSG("Adding spinPart methods  to provide read access to the field spinPart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:57
    // signature to use in the veto list: Pythia8::LHAParticle::spinPart
    t.method("spinPart", [](const Pythia8::LHAParticle& a) -> double { return a.spinPart; });
    t.method("spinPart", [](Pythia8::LHAParticle& a) -> double { return a.spinPart; });
    t.method("spinPart", [](const Pythia8::LHAParticle* a) -> double { return a->spinPart; });
    t.method("spinPart", [](Pythia8::LHAParticle* a) -> double { return a->spinPart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:68:57
    // signature to use in the veto list: Pythia8::LHAParticle::spinPart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding spinPart! methods to provide write access to the field spinPart (" __HERE__ ")");
    t.method("spinPart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.spinPart = val; });

    DEBUG_MSG("Adding spinPart! methods to provide write access to the field spinPart (" __HERE__ ")");
    t.method("spinPart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->spinPart = val; });

    DEBUG_MSG("Adding scalePart methods  to provide read access to the field scalePart (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:69:10
    // signature to use in the veto list: Pythia8::LHAParticle::scalePart
    t.method("scalePart", [](const Pythia8::LHAParticle& a) -> double { return a.scalePart; });
    t.method("scalePart", [](Pythia8::LHAParticle& a) -> double { return a.scalePart; });
    t.method("scalePart", [](const Pythia8::LHAParticle* a) -> double { return a->scalePart; });
    t.method("scalePart", [](Pythia8::LHAParticle* a) -> double { return a->scalePart; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:69:10
    // signature to use in the veto list: Pythia8::LHAParticle::scalePart
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding scalePart! methods to provide write access to the field scalePart (" __HERE__ ")");
    t.method("scalePart!", [](Pythia8::LHAParticle& a, double val) -> double { return a.scalePart = val; });

    DEBUG_MSG("Adding scalePart! methods to provide write access to the field scalePart (" __HERE__ ")");
    t.method("scalePart!", [](Pythia8::LHAParticle* a, double val) -> double { return a->scalePart = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAParticle>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_LHAParticle(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_LHAParticle(module));
}
