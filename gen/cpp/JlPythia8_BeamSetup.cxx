// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::BeamSetup> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::BeamSetup> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::BeamSetup
// signature to use in the veto file: Pythia8::BeamSetup
struct JlPythia8_BeamSetup: public Wrapper {

  JlPythia8_BeamSetup(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::BeamSetup (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:33:7
    jlcxx::TypeWrapper<Pythia8::BeamSetup>  t = jlModule.add_type<Pythia8::BeamSetup>("Pythia8!BeamSetup");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::BeamSetup>>(new jlcxx::TypeWrapper<Pythia8::BeamSetup>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setPDFPtr(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setPDFPtr(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:41:8
    t.method("setPDFPtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr) >(&Pythia8::BeamSetup::setPDFPtr));
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1)->bool { return a.setPDFPtr(arg0, arg1); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2)->bool { return a.setPDFPtr(arg0, arg1, arg2); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13, Pythia8::PDFPtr arg14)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1)->bool { return a->setPDFPtr(arg0, arg1); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2)->bool { return a->setPDFPtr(arg0, arg1, arg2); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13); });
    t.method("setPDFPtr", [](Pythia8::BeamSetup* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13, Pythia8::PDFPtr arg14)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setPDFAPtr(Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setPDFAPtr(Pythia8::PDFPtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:49:8
    t.method("setPDFAPtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::PDFPtr) >(&Pythia8::BeamSetup::setPDFAPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setPDFBPtr(Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setPDFBPtr(Pythia8::PDFPtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:50:8
    t.method("setPDFBPtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::PDFPtr) >(&Pythia8::BeamSetup::setPDFBPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setPhotonFluxPtr(Pythia8::PDFPtr, Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setPhotonFluxPtr(Pythia8::PDFPtr, Pythia8::PDFPtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:53:8
    t.method("setPhotonFluxPtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::PDFPtr, Pythia8::PDFPtr) >(&Pythia8::BeamSetup::setPhotonFluxPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setLHAupPtr(Pythia8::LHAupPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setLHAupPtr(Pythia8::LHAupPtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:59:8
    t.method("setLHAupPtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::LHAupPtr) >(&Pythia8::BeamSetup::setLHAupPtr));

    DEBUG_MSG("Adding wrapper for int Pythia8::BeamSetup::represent(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::BeamSetup::represent(int)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:64:7
    t.method("represent", static_cast<int (Pythia8::BeamSetup::*)(int)  const>(&Pythia8::BeamSetup::represent));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setBeamIDs(int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setBeamIDs(int, int)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:67:8
    t.method("setBeamIDs", static_cast<bool (Pythia8::BeamSetup::*)(int, int) >(&Pythia8::BeamSetup::setBeamIDs));
    t.method("setBeamIDs", [](Pythia8::BeamSetup& a, int arg0)->bool { return a.setBeamIDs(arg0); });
    t.method("setBeamIDs", [](Pythia8::BeamSetup* a, int arg0)->bool { return a->setBeamIDs(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setKinematics(double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setKinematics(double)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:70:8
    t.method("setKinematics", static_cast<bool (Pythia8::BeamSetup::*)(double) >(&Pythia8::BeamSetup::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setKinematics(double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setKinematics(double, double)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:71:8
    t.method("setKinematics", static_cast<bool (Pythia8::BeamSetup::*)(double, double) >(&Pythia8::BeamSetup::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setKinematics(double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setKinematics(double, double, double, double, double, double)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:72:8
    t.method("setKinematics", static_cast<bool (Pythia8::BeamSetup::*)(double, double, double, double, double, double) >(&Pythia8::BeamSetup::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setKinematics(Pythia8::Vec4, Pythia8::Vec4) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setKinematics(Pythia8::Vec4, Pythia8::Vec4)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:74:8
    t.method("setKinematics", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::Vec4, Pythia8::Vec4) >(&Pythia8::BeamSetup::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::setBeamShapePtr(Pythia8::BeamShapePtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::setBeamShapePtr(Pythia8::BeamShapePtr)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:77:8
    t.method("setBeamShapePtr", static_cast<bool (Pythia8::BeamSetup::*)(Pythia8::BeamShapePtr) >(&Pythia8::BeamSetup::setBeamShapePtr));

    DEBUG_MSG("Adding wrapper for Pythia8::BeamShapePtr Pythia8::BeamSetup::getBeamShapePtr() (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::BeamShapePtr Pythia8::BeamSetup::getBeamShapePtr()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:81:16
    t.method("getBeamShapePtr", static_cast<Pythia8::BeamShapePtr (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::getBeamShapePtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::initFrame() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::initFrame()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:91:8
    t.method("initFrame", static_cast<bool (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::initFrame));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::initBeams(bool, Pythia8::StringFlav *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::initBeams(bool, Pythia8::StringFlav *)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:94:8
    t.method("initBeams", static_cast<bool (Pythia8::BeamSetup::*)(bool, Pythia8::StringFlav *) >(&Pythia8::BeamSetup::initBeams));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::getVMDsideA() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::getVMDsideA()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:97:8
    t.method("getVMDsideA", static_cast<bool (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::getVMDsideA));

    DEBUG_MSG("Adding wrapper for bool Pythia8::BeamSetup::getVMDsideB() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::BeamSetup::getVMDsideB()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:98:8
    t.method("getVMDsideB", static_cast<bool (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::getVMDsideB));

    DEBUG_MSG("Adding wrapper for void Pythia8::BeamSetup::clear() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::BeamSetup::clear()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:101:8
    t.method("clear", static_cast<void (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::clear));

    DEBUG_MSG("Adding wrapper for void Pythia8::BeamSetup::newValenceContent() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::BeamSetup::newValenceContent()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:104:8
    t.method("newValenceContent", static_cast<void (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::newValenceContent));

    DEBUG_MSG("Adding wrapper for void Pythia8::BeamSetup::nextKinematics() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::BeamSetup::nextKinematics()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:107:8
    t.method("nextKinematics", static_cast<void (Pythia8::BeamSetup::*)() >(&Pythia8::BeamSetup::nextKinematics));

    DEBUG_MSG("Adding wrapper for void Pythia8::BeamSetup::boostAndVertex(Pythia8::Event &, Pythia8::Event &, bool, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::BeamSetup::boostAndVertex(Pythia8::Event &, Pythia8::Event &, bool, bool)
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:110:8
    t.method("boostAndVertex", static_cast<void (Pythia8::BeamSetup::*)(Pythia8::Event &, Pythia8::Event &, bool, bool) >(&Pythia8::BeamSetup::boostAndVertex));

    DEBUG_MSG("Adding wrapper for void Pythia8::BeamSetup::list() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::BeamSetup::list()
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:114:8
    t.method("list", static_cast<void (Pythia8::BeamSetup::*)()  const>(&Pythia8::BeamSetup::list));

    DEBUG_MSG("Adding doLHA methods  to provide read access to the field doLHA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:10
    // signature to use in the veto list: Pythia8::BeamSetup::doLHA
    t.method("doLHA", [](const Pythia8::BeamSetup& a) -> bool { return a.doLHA; });
    t.method("doLHA", [](Pythia8::BeamSetup& a) -> bool { return a.doLHA; });
    t.method("doLHA", [](const Pythia8::BeamSetup* a) -> bool { return a->doLHA; });
    t.method("doLHA", [](Pythia8::BeamSetup* a) -> bool { return a->doLHA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:10
    // signature to use in the veto list: Pythia8::BeamSetup::doLHA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding doLHA! methods to provide write access to the field doLHA (" __HERE__ ")");
    t.method("doLHA!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.doLHA = val; });

    DEBUG_MSG("Adding doLHA! methods to provide write access to the field doLHA (" __HERE__ ")");
    t.method("doLHA!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->doLHA = val; });

    DEBUG_MSG("Adding useNewLHA methods  to provide read access to the field useNewLHA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:25
    // signature to use in the veto list: Pythia8::BeamSetup::useNewLHA
    t.method("useNewLHA", [](const Pythia8::BeamSetup& a) -> bool { return a.useNewLHA; });
    t.method("useNewLHA", [](Pythia8::BeamSetup& a) -> bool { return a.useNewLHA; });
    t.method("useNewLHA", [](const Pythia8::BeamSetup* a) -> bool { return a->useNewLHA; });
    t.method("useNewLHA", [](Pythia8::BeamSetup* a) -> bool { return a->useNewLHA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:25
    // signature to use in the veto list: Pythia8::BeamSetup::useNewLHA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding useNewLHA! methods to provide write access to the field useNewLHA (" __HERE__ ")");
    t.method("useNewLHA!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.useNewLHA = val; });

    DEBUG_MSG("Adding useNewLHA! methods to provide write access to the field useNewLHA (" __HERE__ ")");
    t.method("useNewLHA!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->useNewLHA = val; });

    DEBUG_MSG("Adding skipInit methods  to provide read access to the field skipInit (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:44
    // signature to use in the veto list: Pythia8::BeamSetup::skipInit
    t.method("skipInit", [](const Pythia8::BeamSetup& a) -> bool { return a.skipInit; });
    t.method("skipInit", [](Pythia8::BeamSetup& a) -> bool { return a.skipInit; });
    t.method("skipInit", [](const Pythia8::BeamSetup* a) -> bool { return a->skipInit; });
    t.method("skipInit", [](Pythia8::BeamSetup* a) -> bool { return a->skipInit; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:117:44
    // signature to use in the veto list: Pythia8::BeamSetup::skipInit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding skipInit! methods to provide write access to the field skipInit (" __HERE__ ")");
    t.method("skipInit!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.skipInit = val; });

    DEBUG_MSG("Adding skipInit! methods to provide write access to the field skipInit (" __HERE__ ")");
    t.method("skipInit!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->skipInit = val; });

    DEBUG_MSG("Adding doMomentumSpread methods  to provide read access to the field doMomentumSpread (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:10
    // signature to use in the veto list: Pythia8::BeamSetup::doMomentumSpread
    t.method("doMomentumSpread", [](const Pythia8::BeamSetup& a) -> bool { return a.doMomentumSpread; });
    t.method("doMomentumSpread", [](Pythia8::BeamSetup& a) -> bool { return a.doMomentumSpread; });
    t.method("doMomentumSpread", [](const Pythia8::BeamSetup* a) -> bool { return a->doMomentumSpread; });
    t.method("doMomentumSpread", [](Pythia8::BeamSetup* a) -> bool { return a->doMomentumSpread; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:10
    // signature to use in the veto list: Pythia8::BeamSetup::doMomentumSpread
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding doMomentumSpread! methods to provide write access to the field doMomentumSpread (" __HERE__ ")");
    t.method("doMomentumSpread!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.doMomentumSpread = val; });

    DEBUG_MSG("Adding doMomentumSpread! methods to provide write access to the field doMomentumSpread (" __HERE__ ")");
    t.method("doMomentumSpread!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->doMomentumSpread = val; });

    DEBUG_MSG("Adding doVertexSpread methods  to provide read access to the field doVertexSpread (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:33
    // signature to use in the veto list: Pythia8::BeamSetup::doVertexSpread
    t.method("doVertexSpread", [](const Pythia8::BeamSetup& a) -> bool { return a.doVertexSpread; });
    t.method("doVertexSpread", [](Pythia8::BeamSetup& a) -> bool { return a.doVertexSpread; });
    t.method("doVertexSpread", [](const Pythia8::BeamSetup* a) -> bool { return a->doVertexSpread; });
    t.method("doVertexSpread", [](Pythia8::BeamSetup* a) -> bool { return a->doVertexSpread; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:33
    // signature to use in the veto list: Pythia8::BeamSetup::doVertexSpread
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding doVertexSpread! methods to provide write access to the field doVertexSpread (" __HERE__ ")");
    t.method("doVertexSpread!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.doVertexSpread = val; });

    DEBUG_MSG("Adding doVertexSpread! methods to provide write access to the field doVertexSpread (" __HERE__ ")");
    t.method("doVertexSpread!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->doVertexSpread = val; });

    DEBUG_MSG("Adding doVarEcm methods  to provide read access to the field doVarEcm (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:54
    // signature to use in the veto list: Pythia8::BeamSetup::doVarEcm
    t.method("doVarEcm", [](const Pythia8::BeamSetup& a) -> bool { return a.doVarEcm; });
    t.method("doVarEcm", [](Pythia8::BeamSetup& a) -> bool { return a.doVarEcm; });
    t.method("doVarEcm", [](const Pythia8::BeamSetup* a) -> bool { return a->doVarEcm; });
    t.method("doVarEcm", [](Pythia8::BeamSetup* a) -> bool { return a->doVarEcm; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:118:54
    // signature to use in the veto list: Pythia8::BeamSetup::doVarEcm
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding doVarEcm! methods to provide write access to the field doVarEcm (" __HERE__ ")");
    t.method("doVarEcm!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.doVarEcm = val; });

    DEBUG_MSG("Adding doVarEcm! methods to provide write access to the field doVarEcm (" __HERE__ ")");
    t.method("doVarEcm!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->doVarEcm = val; });

    DEBUG_MSG("Adding allowIDAswitch methods  to provide read access to the field allowIDAswitch (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:10
    // signature to use in the veto list: Pythia8::BeamSetup::allowIDAswitch
    t.method("allowIDAswitch", [](const Pythia8::BeamSetup& a) -> bool { return a.allowIDAswitch; });
    t.method("allowIDAswitch", [](Pythia8::BeamSetup& a) -> bool { return a.allowIDAswitch; });
    t.method("allowIDAswitch", [](const Pythia8::BeamSetup* a) -> bool { return a->allowIDAswitch; });
    t.method("allowIDAswitch", [](Pythia8::BeamSetup* a) -> bool { return a->allowIDAswitch; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:10
    // signature to use in the veto list: Pythia8::BeamSetup::allowIDAswitch
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding allowIDAswitch! methods to provide write access to the field allowIDAswitch (" __HERE__ ")");
    t.method("allowIDAswitch!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.allowIDAswitch = val; });

    DEBUG_MSG("Adding allowIDAswitch! methods to provide write access to the field allowIDAswitch (" __HERE__ ")");
    t.method("allowIDAswitch!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->allowIDAswitch = val; });

    DEBUG_MSG("Adding hasSwitchedIDs methods  to provide read access to the field hasSwitchedIDs (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:31
    // signature to use in the veto list: Pythia8::BeamSetup::hasSwitchedIDs
    t.method("hasSwitchedIDs", [](const Pythia8::BeamSetup& a) -> bool { return a.hasSwitchedIDs; });
    t.method("hasSwitchedIDs", [](Pythia8::BeamSetup& a) -> bool { return a.hasSwitchedIDs; });
    t.method("hasSwitchedIDs", [](const Pythia8::BeamSetup* a) -> bool { return a->hasSwitchedIDs; });
    t.method("hasSwitchedIDs", [](Pythia8::BeamSetup* a) -> bool { return a->hasSwitchedIDs; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:31
    // signature to use in the veto list: Pythia8::BeamSetup::hasSwitchedIDs
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding hasSwitchedIDs! methods to provide write access to the field hasSwitchedIDs (" __HERE__ ")");
    t.method("hasSwitchedIDs!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.hasSwitchedIDs = val; });

    DEBUG_MSG("Adding hasSwitchedIDs! methods to provide write access to the field hasSwitchedIDs (" __HERE__ ")");
    t.method("hasSwitchedIDs!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->hasSwitchedIDs = val; });

    DEBUG_MSG("Adding beamA2gamma methods  to provide read access to the field beamA2gamma (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:52
    // signature to use in the veto list: Pythia8::BeamSetup::beamA2gamma
    t.method("beamA2gamma", [](const Pythia8::BeamSetup& a) -> bool { return a.beamA2gamma; });
    t.method("beamA2gamma", [](Pythia8::BeamSetup& a) -> bool { return a.beamA2gamma; });
    t.method("beamA2gamma", [](const Pythia8::BeamSetup* a) -> bool { return a->beamA2gamma; });
    t.method("beamA2gamma", [](Pythia8::BeamSetup* a) -> bool { return a->beamA2gamma; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:119:52
    // signature to use in the veto list: Pythia8::BeamSetup::beamA2gamma
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamA2gamma! methods to provide write access to the field beamA2gamma (" __HERE__ ")");
    t.method("beamA2gamma!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.beamA2gamma = val; });

    DEBUG_MSG("Adding beamA2gamma! methods to provide write access to the field beamA2gamma (" __HERE__ ")");
    t.method("beamA2gamma!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->beamA2gamma = val; });

    DEBUG_MSG("Adding beamB2gamma methods  to provide read access to the field beamB2gamma (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:120:10
    // signature to use in the veto list: Pythia8::BeamSetup::beamB2gamma
    t.method("beamB2gamma", [](const Pythia8::BeamSetup& a) -> bool { return a.beamB2gamma; });
    t.method("beamB2gamma", [](Pythia8::BeamSetup& a) -> bool { return a.beamB2gamma; });
    t.method("beamB2gamma", [](const Pythia8::BeamSetup* a) -> bool { return a->beamB2gamma; });
    t.method("beamB2gamma", [](Pythia8::BeamSetup* a) -> bool { return a->beamB2gamma; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:120:10
    // signature to use in the veto list: Pythia8::BeamSetup::beamB2gamma
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamB2gamma! methods to provide write access to the field beamB2gamma (" __HERE__ ")");
    t.method("beamB2gamma!", [](Pythia8::BeamSetup& a, bool val) -> bool { return a.beamB2gamma = val; });

    DEBUG_MSG("Adding beamB2gamma! methods to provide write access to the field beamB2gamma (" __HERE__ ")");
    t.method("beamB2gamma!", [](Pythia8::BeamSetup* a, bool val) -> bool { return a->beamB2gamma = val; });

    DEBUG_MSG("Adding idA methods  to provide read access to the field idA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:10
    // signature to use in the veto list: Pythia8::BeamSetup::idA
    t.method("idA", [](const Pythia8::BeamSetup& a) -> int { return a.idA; });
    t.method("idA", [](Pythia8::BeamSetup& a) -> int { return a.idA; });
    t.method("idA", [](const Pythia8::BeamSetup* a) -> int { return a->idA; });
    t.method("idA", [](Pythia8::BeamSetup* a) -> int { return a->idA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:10
    // signature to use in the veto list: Pythia8::BeamSetup::idA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding idA! methods to provide write access to the field idA (" __HERE__ ")");
    t.method("idA!", [](Pythia8::BeamSetup& a, int val) -> int { return a.idA = val; });

    DEBUG_MSG("Adding idA! methods to provide write access to the field idA (" __HERE__ ")");
    t.method("idA!", [](Pythia8::BeamSetup* a, int val) -> int { return a->idA = val; });

    DEBUG_MSG("Adding idB methods  to provide read access to the field idB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:20
    // signature to use in the veto list: Pythia8::BeamSetup::idB
    t.method("idB", [](const Pythia8::BeamSetup& a) -> int { return a.idB; });
    t.method("idB", [](Pythia8::BeamSetup& a) -> int { return a.idB; });
    t.method("idB", [](const Pythia8::BeamSetup* a) -> int { return a->idB; });
    t.method("idB", [](Pythia8::BeamSetup* a) -> int { return a->idB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:20
    // signature to use in the veto list: Pythia8::BeamSetup::idB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding idB! methods to provide write access to the field idB (" __HERE__ ")");
    t.method("idB!", [](Pythia8::BeamSetup& a, int val) -> int { return a.idB = val; });

    DEBUG_MSG("Adding idB! methods to provide write access to the field idB (" __HERE__ ")");
    t.method("idB!", [](Pythia8::BeamSetup* a, int val) -> int { return a->idB = val; });

    DEBUG_MSG("Adding frameType methods  to provide read access to the field frameType (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:30
    // signature to use in the veto list: Pythia8::BeamSetup::frameType
    t.method("frameType", [](const Pythia8::BeamSetup& a) -> int { return a.frameType; });
    t.method("frameType", [](Pythia8::BeamSetup& a) -> int { return a.frameType; });
    t.method("frameType", [](const Pythia8::BeamSetup* a) -> int { return a->frameType; });
    t.method("frameType", [](Pythia8::BeamSetup* a) -> int { return a->frameType; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:30
    // signature to use in the veto list: Pythia8::BeamSetup::frameType
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding frameType! methods to provide write access to the field frameType (" __HERE__ ")");
    t.method("frameType!", [](Pythia8::BeamSetup& a, int val) -> int { return a.frameType = val; });

    DEBUG_MSG("Adding frameType! methods to provide write access to the field frameType (" __HERE__ ")");
    t.method("frameType!", [](Pythia8::BeamSetup* a, int val) -> int { return a->frameType = val; });

    DEBUG_MSG("Adding boostType methods  to provide read access to the field boostType (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:46
    // signature to use in the veto list: Pythia8::BeamSetup::boostType
    t.method("boostType", [](const Pythia8::BeamSetup& a) -> int { return a.boostType; });
    t.method("boostType", [](Pythia8::BeamSetup& a) -> int { return a.boostType; });
    t.method("boostType", [](const Pythia8::BeamSetup* a) -> int { return a->boostType; });
    t.method("boostType", [](Pythia8::BeamSetup* a) -> int { return a->boostType; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:46
    // signature to use in the veto list: Pythia8::BeamSetup::boostType
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding boostType! methods to provide write access to the field boostType (" __HERE__ ")");
    t.method("boostType!", [](Pythia8::BeamSetup& a, int val) -> int { return a.boostType = val; });

    DEBUG_MSG("Adding boostType! methods to provide write access to the field boostType (" __HERE__ ")");
    t.method("boostType!", [](Pythia8::BeamSetup* a, int val) -> int { return a->boostType = val; });

    DEBUG_MSG("Adding iPDFAsave methods  to provide read access to the field iPDFAsave (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:62
    // signature to use in the veto list: Pythia8::BeamSetup::iPDFAsave
    t.method("iPDFAsave", [](const Pythia8::BeamSetup& a) -> int { return a.iPDFAsave; });
    t.method("iPDFAsave", [](Pythia8::BeamSetup& a) -> int { return a.iPDFAsave; });
    t.method("iPDFAsave", [](const Pythia8::BeamSetup* a) -> int { return a->iPDFAsave; });
    t.method("iPDFAsave", [](Pythia8::BeamSetup* a) -> int { return a->iPDFAsave; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:121:62
    // signature to use in the veto list: Pythia8::BeamSetup::iPDFAsave
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding iPDFAsave! methods to provide write access to the field iPDFAsave (" __HERE__ ")");
    t.method("iPDFAsave!", [](Pythia8::BeamSetup& a, int val) -> int { return a.iPDFAsave = val; });

    DEBUG_MSG("Adding iPDFAsave! methods to provide write access to the field iPDFAsave (" __HERE__ ")");
    t.method("iPDFAsave!", [](Pythia8::BeamSetup* a, int val) -> int { return a->iPDFAsave = val; });

    DEBUG_MSG("Adding gammaMode methods  to provide read access to the field gammaMode (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:122:10
    // signature to use in the veto list: Pythia8::BeamSetup::gammaMode
    t.method("gammaMode", [](const Pythia8::BeamSetup& a) -> int { return a.gammaMode; });
    t.method("gammaMode", [](Pythia8::BeamSetup& a) -> int { return a.gammaMode; });
    t.method("gammaMode", [](const Pythia8::BeamSetup* a) -> int { return a->gammaMode; });
    t.method("gammaMode", [](Pythia8::BeamSetup* a) -> int { return a->gammaMode; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:122:10
    // signature to use in the veto list: Pythia8::BeamSetup::gammaMode
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding gammaMode! methods to provide write access to the field gammaMode (" __HERE__ ")");
    t.method("gammaMode!", [](Pythia8::BeamSetup& a, int val) -> int { return a.gammaMode = val; });

    DEBUG_MSG("Adding gammaMode! methods to provide write access to the field gammaMode (" __HERE__ ")");
    t.method("gammaMode!", [](Pythia8::BeamSetup* a, int val) -> int { return a->gammaMode = val; });

    DEBUG_MSG("Adding mA methods  to provide read access to the field mA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:10
    // signature to use in the veto list: Pythia8::BeamSetup::mA
    t.method("mA", [](const Pythia8::BeamSetup& a) -> double { return a.mA; });
    t.method("mA", [](Pythia8::BeamSetup& a) -> double { return a.mA; });
    t.method("mA", [](const Pythia8::BeamSetup* a) -> double { return a->mA; });
    t.method("mA", [](Pythia8::BeamSetup* a) -> double { return a->mA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:10
    // signature to use in the veto list: Pythia8::BeamSetup::mA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mA! methods to provide write access to the field mA (" __HERE__ ")");
    t.method("mA!", [](Pythia8::BeamSetup& a, double val) -> double { return a.mA = val; });

    DEBUG_MSG("Adding mA! methods to provide write access to the field mA (" __HERE__ ")");
    t.method("mA!", [](Pythia8::BeamSetup* a, double val) -> double { return a->mA = val; });

    DEBUG_MSG("Adding mB methods  to provide read access to the field mB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:19
    // signature to use in the veto list: Pythia8::BeamSetup::mB
    t.method("mB", [](const Pythia8::BeamSetup& a) -> double { return a.mB; });
    t.method("mB", [](Pythia8::BeamSetup& a) -> double { return a.mB; });
    t.method("mB", [](const Pythia8::BeamSetup* a) -> double { return a->mB; });
    t.method("mB", [](Pythia8::BeamSetup* a) -> double { return a->mB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:19
    // signature to use in the veto list: Pythia8::BeamSetup::mB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mB! methods to provide write access to the field mB (" __HERE__ ")");
    t.method("mB!", [](Pythia8::BeamSetup& a, double val) -> double { return a.mB = val; });

    DEBUG_MSG("Adding mB! methods to provide write access to the field mB (" __HERE__ ")");
    t.method("mB!", [](Pythia8::BeamSetup* a, double val) -> double { return a->mB = val; });

    DEBUG_MSG("Adding pxA methods  to provide read access to the field pxA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:28
    // signature to use in the veto list: Pythia8::BeamSetup::pxA
    t.method("pxA", [](const Pythia8::BeamSetup& a) -> double { return a.pxA; });
    t.method("pxA", [](Pythia8::BeamSetup& a) -> double { return a.pxA; });
    t.method("pxA", [](const Pythia8::BeamSetup* a) -> double { return a->pxA; });
    t.method("pxA", [](Pythia8::BeamSetup* a) -> double { return a->pxA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:28
    // signature to use in the veto list: Pythia8::BeamSetup::pxA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pxA! methods to provide write access to the field pxA (" __HERE__ ")");
    t.method("pxA!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pxA = val; });

    DEBUG_MSG("Adding pxA! methods to provide write access to the field pxA (" __HERE__ ")");
    t.method("pxA!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pxA = val; });

    DEBUG_MSG("Adding pxB methods  to provide read access to the field pxB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:38
    // signature to use in the veto list: Pythia8::BeamSetup::pxB
    t.method("pxB", [](const Pythia8::BeamSetup& a) -> double { return a.pxB; });
    t.method("pxB", [](Pythia8::BeamSetup& a) -> double { return a.pxB; });
    t.method("pxB", [](const Pythia8::BeamSetup* a) -> double { return a->pxB; });
    t.method("pxB", [](Pythia8::BeamSetup* a) -> double { return a->pxB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:38
    // signature to use in the veto list: Pythia8::BeamSetup::pxB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pxB! methods to provide write access to the field pxB (" __HERE__ ")");
    t.method("pxB!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pxB = val; });

    DEBUG_MSG("Adding pxB! methods to provide write access to the field pxB (" __HERE__ ")");
    t.method("pxB!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pxB = val; });

    DEBUG_MSG("Adding pyA methods  to provide read access to the field pyA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:48
    // signature to use in the veto list: Pythia8::BeamSetup::pyA
    t.method("pyA", [](const Pythia8::BeamSetup& a) -> double { return a.pyA; });
    t.method("pyA", [](Pythia8::BeamSetup& a) -> double { return a.pyA; });
    t.method("pyA", [](const Pythia8::BeamSetup* a) -> double { return a->pyA; });
    t.method("pyA", [](Pythia8::BeamSetup* a) -> double { return a->pyA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:48
    // signature to use in the veto list: Pythia8::BeamSetup::pyA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pyA! methods to provide write access to the field pyA (" __HERE__ ")");
    t.method("pyA!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pyA = val; });

    DEBUG_MSG("Adding pyA! methods to provide write access to the field pyA (" __HERE__ ")");
    t.method("pyA!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pyA = val; });

    DEBUG_MSG("Adding pyB methods  to provide read access to the field pyB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:58
    // signature to use in the veto list: Pythia8::BeamSetup::pyB
    t.method("pyB", [](const Pythia8::BeamSetup& a) -> double { return a.pyB; });
    t.method("pyB", [](Pythia8::BeamSetup& a) -> double { return a.pyB; });
    t.method("pyB", [](const Pythia8::BeamSetup* a) -> double { return a->pyB; });
    t.method("pyB", [](Pythia8::BeamSetup* a) -> double { return a->pyB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:58
    // signature to use in the veto list: Pythia8::BeamSetup::pyB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pyB! methods to provide write access to the field pyB (" __HERE__ ")");
    t.method("pyB!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pyB = val; });

    DEBUG_MSG("Adding pyB! methods to provide write access to the field pyB (" __HERE__ ")");
    t.method("pyB!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pyB = val; });

    DEBUG_MSG("Adding pzA methods  to provide read access to the field pzA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:68
    // signature to use in the veto list: Pythia8::BeamSetup::pzA
    t.method("pzA", [](const Pythia8::BeamSetup& a) -> double { return a.pzA; });
    t.method("pzA", [](Pythia8::BeamSetup& a) -> double { return a.pzA; });
    t.method("pzA", [](const Pythia8::BeamSetup* a) -> double { return a->pzA; });
    t.method("pzA", [](Pythia8::BeamSetup* a) -> double { return a->pzA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:123:68
    // signature to use in the veto list: Pythia8::BeamSetup::pzA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pzA! methods to provide write access to the field pzA (" __HERE__ ")");
    t.method("pzA!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pzA = val; });

    DEBUG_MSG("Adding pzA! methods to provide write access to the field pzA (" __HERE__ ")");
    t.method("pzA!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pzA = val; });

    DEBUG_MSG("Adding pzB methods  to provide read access to the field pzB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:10
    // signature to use in the veto list: Pythia8::BeamSetup::pzB
    t.method("pzB", [](const Pythia8::BeamSetup& a) -> double { return a.pzB; });
    t.method("pzB", [](Pythia8::BeamSetup& a) -> double { return a.pzB; });
    t.method("pzB", [](const Pythia8::BeamSetup* a) -> double { return a->pzB; });
    t.method("pzB", [](Pythia8::BeamSetup* a) -> double { return a->pzB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:10
    // signature to use in the veto list: Pythia8::BeamSetup::pzB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pzB! methods to provide write access to the field pzB (" __HERE__ ")");
    t.method("pzB!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pzB = val; });

    DEBUG_MSG("Adding pzB! methods to provide write access to the field pzB (" __HERE__ ")");
    t.method("pzB!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pzB = val; });

    DEBUG_MSG("Adding eA methods  to provide read access to the field eA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:20
    // signature to use in the veto list: Pythia8::BeamSetup::eA
    t.method("eA", [](const Pythia8::BeamSetup& a) -> double { return a.eA; });
    t.method("eA", [](Pythia8::BeamSetup& a) -> double { return a.eA; });
    t.method("eA", [](const Pythia8::BeamSetup* a) -> double { return a->eA; });
    t.method("eA", [](Pythia8::BeamSetup* a) -> double { return a->eA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:20
    // signature to use in the veto list: Pythia8::BeamSetup::eA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding eA! methods to provide write access to the field eA (" __HERE__ ")");
    t.method("eA!", [](Pythia8::BeamSetup& a, double val) -> double { return a.eA = val; });

    DEBUG_MSG("Adding eA! methods to provide write access to the field eA (" __HERE__ ")");
    t.method("eA!", [](Pythia8::BeamSetup* a, double val) -> double { return a->eA = val; });

    DEBUG_MSG("Adding eB methods  to provide read access to the field eB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:29
    // signature to use in the veto list: Pythia8::BeamSetup::eB
    t.method("eB", [](const Pythia8::BeamSetup& a) -> double { return a.eB; });
    t.method("eB", [](Pythia8::BeamSetup& a) -> double { return a.eB; });
    t.method("eB", [](const Pythia8::BeamSetup* a) -> double { return a->eB; });
    t.method("eB", [](Pythia8::BeamSetup* a) -> double { return a->eB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:29
    // signature to use in the veto list: Pythia8::BeamSetup::eB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding eB! methods to provide write access to the field eB (" __HERE__ ")");
    t.method("eB!", [](Pythia8::BeamSetup& a, double val) -> double { return a.eB = val; });

    DEBUG_MSG("Adding eB! methods to provide write access to the field eB (" __HERE__ ")");
    t.method("eB!", [](Pythia8::BeamSetup* a, double val) -> double { return a->eB = val; });

    DEBUG_MSG("Adding pzAcm methods  to provide read access to the field pzAcm (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:38
    // signature to use in the veto list: Pythia8::BeamSetup::pzAcm
    t.method("pzAcm", [](const Pythia8::BeamSetup& a) -> double { return a.pzAcm; });
    t.method("pzAcm", [](Pythia8::BeamSetup& a) -> double { return a.pzAcm; });
    t.method("pzAcm", [](const Pythia8::BeamSetup* a) -> double { return a->pzAcm; });
    t.method("pzAcm", [](Pythia8::BeamSetup* a) -> double { return a->pzAcm; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:38
    // signature to use in the veto list: Pythia8::BeamSetup::pzAcm
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pzAcm! methods to provide write access to the field pzAcm (" __HERE__ ")");
    t.method("pzAcm!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pzAcm = val; });

    DEBUG_MSG("Adding pzAcm! methods to provide write access to the field pzAcm (" __HERE__ ")");
    t.method("pzAcm!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pzAcm = val; });

    DEBUG_MSG("Adding pzBcm methods  to provide read access to the field pzBcm (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:50
    // signature to use in the veto list: Pythia8::BeamSetup::pzBcm
    t.method("pzBcm", [](const Pythia8::BeamSetup& a) -> double { return a.pzBcm; });
    t.method("pzBcm", [](Pythia8::BeamSetup& a) -> double { return a.pzBcm; });
    t.method("pzBcm", [](const Pythia8::BeamSetup* a) -> double { return a->pzBcm; });
    t.method("pzBcm", [](Pythia8::BeamSetup* a) -> double { return a->pzBcm; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:50
    // signature to use in the veto list: Pythia8::BeamSetup::pzBcm
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pzBcm! methods to provide write access to the field pzBcm (" __HERE__ ")");
    t.method("pzBcm!", [](Pythia8::BeamSetup& a, double val) -> double { return a.pzBcm = val; });

    DEBUG_MSG("Adding pzBcm! methods to provide write access to the field pzBcm (" __HERE__ ")");
    t.method("pzBcm!", [](Pythia8::BeamSetup* a, double val) -> double { return a->pzBcm = val; });

    DEBUG_MSG("Adding eCM methods  to provide read access to the field eCM (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:62
    // signature to use in the veto list: Pythia8::BeamSetup::eCM
    t.method("eCM", [](const Pythia8::BeamSetup& a) -> double { return a.eCM; });
    t.method("eCM", [](Pythia8::BeamSetup& a) -> double { return a.eCM; });
    t.method("eCM", [](const Pythia8::BeamSetup* a) -> double { return a->eCM; });
    t.method("eCM", [](Pythia8::BeamSetup* a) -> double { return a->eCM; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:124:62
    // signature to use in the veto list: Pythia8::BeamSetup::eCM
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding eCM! methods to provide write access to the field eCM (" __HERE__ ")");
    t.method("eCM!", [](Pythia8::BeamSetup& a, double val) -> double { return a.eCM = val; });

    DEBUG_MSG("Adding eCM! methods to provide write access to the field eCM (" __HERE__ ")");
    t.method("eCM!", [](Pythia8::BeamSetup* a, double val) -> double { return a->eCM = val; });

    DEBUG_MSG("Adding betaZ methods  to provide read access to the field betaZ (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:125:10
    // signature to use in the veto list: Pythia8::BeamSetup::betaZ
    t.method("betaZ", [](const Pythia8::BeamSetup& a) -> double { return a.betaZ; });
    t.method("betaZ", [](Pythia8::BeamSetup& a) -> double { return a.betaZ; });
    t.method("betaZ", [](const Pythia8::BeamSetup* a) -> double { return a->betaZ; });
    t.method("betaZ", [](Pythia8::BeamSetup* a) -> double { return a->betaZ; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:125:10
    // signature to use in the veto list: Pythia8::BeamSetup::betaZ
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding betaZ! methods to provide write access to the field betaZ (" __HERE__ ")");
    t.method("betaZ!", [](Pythia8::BeamSetup& a, double val) -> double { return a.betaZ = val; });

    DEBUG_MSG("Adding betaZ! methods to provide write access to the field betaZ (" __HERE__ ")");
    t.method("betaZ!", [](Pythia8::BeamSetup* a, double val) -> double { return a->betaZ = val; });

    DEBUG_MSG("Adding gammaZ methods  to provide read access to the field gammaZ (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:125:22
    // signature to use in the veto list: Pythia8::BeamSetup::gammaZ
    t.method("gammaZ", [](const Pythia8::BeamSetup& a) -> double { return a.gammaZ; });
    t.method("gammaZ", [](Pythia8::BeamSetup& a) -> double { return a.gammaZ; });
    t.method("gammaZ", [](const Pythia8::BeamSetup* a) -> double { return a->gammaZ; });
    t.method("gammaZ", [](Pythia8::BeamSetup* a) -> double { return a->gammaZ; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:125:22
    // signature to use in the veto list: Pythia8::BeamSetup::gammaZ
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding gammaZ! methods to provide write access to the field gammaZ (" __HERE__ ")");
    t.method("gammaZ!", [](Pythia8::BeamSetup& a, double val) -> double { return a.gammaZ = val; });

    DEBUG_MSG("Adding gammaZ! methods to provide write access to the field gammaZ (" __HERE__ ")");
    t.method("gammaZ!", [](Pythia8::BeamSetup* a, double val) -> double { return a->gammaZ = val; });

    DEBUG_MSG("Adding pAinit methods  to provide read access to the field pAinit (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:10
    // signature to use in the veto list: Pythia8::BeamSetup::pAinit
    t.method("pAinit", [](const Pythia8::BeamSetup& a) -> const Pythia8::Vec4& { return a.pAinit; });
    t.method("pAinit", [](Pythia8::BeamSetup& a) -> Pythia8::Vec4& { return a.pAinit; });
    t.method("pAinit", [](const Pythia8::BeamSetup* a) -> const Pythia8::Vec4& { return a->pAinit; });
    t.method("pAinit", [](Pythia8::BeamSetup* a) -> Pythia8::Vec4& { return a->pAinit; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:10
    // signature to use in the veto list: Pythia8::BeamSetup::pAinit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pAinit! methods to provide write access to the field pAinit (" __HERE__ ")");
    t.method("pAinit!", [](Pythia8::BeamSetup& a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a.pAinit = val; });

    DEBUG_MSG("Adding pAinit! methods to provide write access to the field pAinit (" __HERE__ ")");
    t.method("pAinit!", [](Pythia8::BeamSetup* a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a->pAinit = val; });

    DEBUG_MSG("Adding pBinit methods  to provide read access to the field pBinit (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:23
    // signature to use in the veto list: Pythia8::BeamSetup::pBinit
    t.method("pBinit", [](const Pythia8::BeamSetup& a) -> const Pythia8::Vec4& { return a.pBinit; });
    t.method("pBinit", [](Pythia8::BeamSetup& a) -> Pythia8::Vec4& { return a.pBinit; });
    t.method("pBinit", [](const Pythia8::BeamSetup* a) -> const Pythia8::Vec4& { return a->pBinit; });
    t.method("pBinit", [](Pythia8::BeamSetup* a) -> Pythia8::Vec4& { return a->pBinit; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:23
    // signature to use in the veto list: Pythia8::BeamSetup::pBinit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pBinit! methods to provide write access to the field pBinit (" __HERE__ ")");
    t.method("pBinit!", [](Pythia8::BeamSetup& a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a.pBinit = val; });

    DEBUG_MSG("Adding pBinit! methods to provide write access to the field pBinit (" __HERE__ ")");
    t.method("pBinit!", [](Pythia8::BeamSetup* a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a->pBinit = val; });

    DEBUG_MSG("Adding pAnow methods  to provide read access to the field pAnow (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:36
    // signature to use in the veto list: Pythia8::BeamSetup::pAnow
    t.method("pAnow", [](const Pythia8::BeamSetup& a) -> const Pythia8::Vec4& { return a.pAnow; });
    t.method("pAnow", [](Pythia8::BeamSetup& a) -> Pythia8::Vec4& { return a.pAnow; });
    t.method("pAnow", [](const Pythia8::BeamSetup* a) -> const Pythia8::Vec4& { return a->pAnow; });
    t.method("pAnow", [](Pythia8::BeamSetup* a) -> Pythia8::Vec4& { return a->pAnow; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:36
    // signature to use in the veto list: Pythia8::BeamSetup::pAnow
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pAnow! methods to provide write access to the field pAnow (" __HERE__ ")");
    t.method("pAnow!", [](Pythia8::BeamSetup& a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a.pAnow = val; });

    DEBUG_MSG("Adding pAnow! methods to provide write access to the field pAnow (" __HERE__ ")");
    t.method("pAnow!", [](Pythia8::BeamSetup* a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a->pAnow = val; });

    DEBUG_MSG("Adding pBnow methods  to provide read access to the field pBnow (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:48
    // signature to use in the veto list: Pythia8::BeamSetup::pBnow
    t.method("pBnow", [](const Pythia8::BeamSetup& a) -> const Pythia8::Vec4& { return a.pBnow; });
    t.method("pBnow", [](Pythia8::BeamSetup& a) -> Pythia8::Vec4& { return a.pBnow; });
    t.method("pBnow", [](const Pythia8::BeamSetup* a) -> const Pythia8::Vec4& { return a->pBnow; });
    t.method("pBnow", [](Pythia8::BeamSetup* a) -> Pythia8::Vec4& { return a->pBnow; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:126:48
    // signature to use in the veto list: Pythia8::BeamSetup::pBnow
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pBnow! methods to provide write access to the field pBnow (" __HERE__ ")");
    t.method("pBnow!", [](Pythia8::BeamSetup& a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a.pBnow = val; });

    DEBUG_MSG("Adding pBnow! methods to provide write access to the field pBnow (" __HERE__ ")");
    t.method("pBnow!", [](Pythia8::BeamSetup* a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a->pBnow = val; });

    DEBUG_MSG("Adding MfromCM methods  to provide read access to the field MfromCM (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:127:16
    // signature to use in the veto list: Pythia8::BeamSetup::MfromCM
    t.method("MfromCM", [](const Pythia8::BeamSetup& a) -> const Pythia8::RotBstMatrix& { return a.MfromCM; });
    t.method("MfromCM", [](Pythia8::BeamSetup& a) -> Pythia8::RotBstMatrix& { return a.MfromCM; });
    t.method("MfromCM", [](const Pythia8::BeamSetup* a) -> const Pythia8::RotBstMatrix& { return a->MfromCM; });
    t.method("MfromCM", [](Pythia8::BeamSetup* a) -> Pythia8::RotBstMatrix& { return a->MfromCM; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:127:16
    // signature to use in the veto list: Pythia8::BeamSetup::MfromCM
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MfromCM! methods to provide write access to the field MfromCM (" __HERE__ ")");
    t.method("MfromCM!", [](Pythia8::BeamSetup& a, const Pythia8::RotBstMatrix& val) -> Pythia8::RotBstMatrix& { return a.MfromCM = val; });

    DEBUG_MSG("Adding MfromCM! methods to provide write access to the field MfromCM (" __HERE__ ")");
    t.method("MfromCM!", [](Pythia8::BeamSetup* a, const Pythia8::RotBstMatrix& val) -> Pythia8::RotBstMatrix& { return a->MfromCM = val; });

    DEBUG_MSG("Adding MtoCM methods  to provide read access to the field MtoCM (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:127:30
    // signature to use in the veto list: Pythia8::BeamSetup::MtoCM
    t.method("MtoCM", [](const Pythia8::BeamSetup& a) -> const Pythia8::RotBstMatrix& { return a.MtoCM; });
    t.method("MtoCM", [](Pythia8::BeamSetup& a) -> Pythia8::RotBstMatrix& { return a.MtoCM; });
    t.method("MtoCM", [](const Pythia8::BeamSetup* a) -> const Pythia8::RotBstMatrix& { return a->MtoCM; });
    t.method("MtoCM", [](Pythia8::BeamSetup* a) -> Pythia8::RotBstMatrix& { return a->MtoCM; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:127:30
    // signature to use in the veto list: Pythia8::BeamSetup::MtoCM
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding MtoCM! methods to provide write access to the field MtoCM (" __HERE__ ")");
    t.method("MtoCM!", [](Pythia8::BeamSetup& a, const Pythia8::RotBstMatrix& val) -> Pythia8::RotBstMatrix& { return a.MtoCM = val; });

    DEBUG_MSG("Adding MtoCM! methods to provide write access to the field MtoCM (" __HERE__ ")");
    t.method("MtoCM!", [](Pythia8::BeamSetup* a, const Pythia8::RotBstMatrix& val) -> Pythia8::RotBstMatrix& { return a->MtoCM = val; });

    DEBUG_MSG("Adding lhaUpPtr methods  to provide read access to the field lhaUpPtr (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:128:12
    // signature to use in the veto list: Pythia8::BeamSetup::lhaUpPtr
    t.method("lhaUpPtr", [](const Pythia8::BeamSetup& a) -> const Pythia8::LHAupPtr& { return a.lhaUpPtr; });
    t.method("lhaUpPtr", [](Pythia8::BeamSetup& a) -> Pythia8::LHAupPtr& { return a.lhaUpPtr; });
    t.method("lhaUpPtr", [](const Pythia8::BeamSetup* a) -> const Pythia8::LHAupPtr& { return a->lhaUpPtr; });
    t.method("lhaUpPtr", [](Pythia8::BeamSetup* a) -> Pythia8::LHAupPtr& { return a->lhaUpPtr; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:128:12
    // signature to use in the veto list: Pythia8::BeamSetup::lhaUpPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding lhaUpPtr! methods to provide write access to the field lhaUpPtr (" __HERE__ ")");
    t.method("lhaUpPtr!", [](Pythia8::BeamSetup& a, const Pythia8::LHAupPtr& val) -> Pythia8::LHAupPtr& { return a.lhaUpPtr = val; });

    DEBUG_MSG("Adding lhaUpPtr! methods to provide write access to the field lhaUpPtr (" __HERE__ ")");
    t.method("lhaUpPtr!", [](Pythia8::BeamSetup* a, const Pythia8::LHAupPtr& val) -> Pythia8::LHAupPtr& { return a->lhaUpPtr = val; });

    DEBUG_MSG("Adding beamA methods  to provide read access to the field beamA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:131:18
    // signature to use in the veto list: Pythia8::BeamSetup::beamA
    t.method("beamA", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamA; });
    t.method("beamA", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamA; });
    t.method("beamA", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamA; });
    t.method("beamA", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:131:18
    // signature to use in the veto list: Pythia8::BeamSetup::beamA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamA! methods to provide write access to the field beamA (" __HERE__ ")");
    t.method("beamA!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamA = val; });

    DEBUG_MSG("Adding beamA! methods to provide write access to the field beamA (" __HERE__ ")");
    t.method("beamA!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamA = val; });

    DEBUG_MSG("Adding beamB methods  to provide read access to the field beamB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:132:18
    // signature to use in the veto list: Pythia8::BeamSetup::beamB
    t.method("beamB", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamB; });
    t.method("beamB", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamB; });
    t.method("beamB", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamB; });
    t.method("beamB", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:132:18
    // signature to use in the veto list: Pythia8::BeamSetup::beamB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamB! methods to provide write access to the field beamB (" __HERE__ ")");
    t.method("beamB!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamB = val; });

    DEBUG_MSG("Adding beamB! methods to provide write access to the field beamB (" __HERE__ ")");
    t.method("beamB!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamB = val; });

    DEBUG_MSG("Adding beamPomA methods  to provide read access to the field beamPomA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:135:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamPomA
    t.method("beamPomA", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamPomA; });
    t.method("beamPomA", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamPomA; });
    t.method("beamPomA", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamPomA; });
    t.method("beamPomA", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamPomA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:135:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamPomA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamPomA! methods to provide write access to the field beamPomA (" __HERE__ ")");
    t.method("beamPomA!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamPomA = val; });

    DEBUG_MSG("Adding beamPomA! methods to provide write access to the field beamPomA (" __HERE__ ")");
    t.method("beamPomA!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamPomA = val; });

    DEBUG_MSG("Adding beamPomB methods  to provide read access to the field beamPomB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:136:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamPomB
    t.method("beamPomB", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamPomB; });
    t.method("beamPomB", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamPomB; });
    t.method("beamPomB", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamPomB; });
    t.method("beamPomB", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamPomB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:136:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamPomB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamPomB! methods to provide write access to the field beamPomB (" __HERE__ ")");
    t.method("beamPomB!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamPomB = val; });

    DEBUG_MSG("Adding beamPomB! methods to provide write access to the field beamPomB (" __HERE__ ")");
    t.method("beamPomB!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamPomB = val; });

    DEBUG_MSG("Adding beamGamA methods  to provide read access to the field beamGamA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:139:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamGamA
    t.method("beamGamA", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamGamA; });
    t.method("beamGamA", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamGamA; });
    t.method("beamGamA", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamGamA; });
    t.method("beamGamA", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamGamA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:139:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamGamA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamGamA! methods to provide write access to the field beamGamA (" __HERE__ ")");
    t.method("beamGamA!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamGamA = val; });

    DEBUG_MSG("Adding beamGamA! methods to provide write access to the field beamGamA (" __HERE__ ")");
    t.method("beamGamA!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamGamA = val; });

    DEBUG_MSG("Adding beamGamB methods  to provide read access to the field beamGamB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:140:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamGamB
    t.method("beamGamB", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamGamB; });
    t.method("beamGamB", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamGamB; });
    t.method("beamGamB", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamGamB; });
    t.method("beamGamB", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamGamB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:140:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamGamB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamGamB! methods to provide write access to the field beamGamB (" __HERE__ ")");
    t.method("beamGamB!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamGamB = val; });

    DEBUG_MSG("Adding beamGamB! methods to provide write access to the field beamGamB (" __HERE__ ")");
    t.method("beamGamB!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamGamB = val; });

    DEBUG_MSG("Adding beamVMDA methods  to provide read access to the field beamVMDA (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:143:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamVMDA
    t.method("beamVMDA", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamVMDA; });
    t.method("beamVMDA", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamVMDA; });
    t.method("beamVMDA", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamVMDA; });
    t.method("beamVMDA", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamVMDA; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:143:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamVMDA
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamVMDA! methods to provide write access to the field beamVMDA (" __HERE__ ")");
    t.method("beamVMDA!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamVMDA = val; });

    DEBUG_MSG("Adding beamVMDA! methods to provide write access to the field beamVMDA (" __HERE__ ")");
    t.method("beamVMDA!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamVMDA = val; });

    DEBUG_MSG("Adding beamVMDB methods  to provide read access to the field beamVMDB (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:144:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamVMDB
    t.method("beamVMDB", [](const Pythia8::BeamSetup& a) -> const Pythia8::BeamParticle& { return a.beamVMDB; });
    t.method("beamVMDB", [](Pythia8::BeamSetup& a) -> Pythia8::BeamParticle& { return a.beamVMDB; });
    t.method("beamVMDB", [](const Pythia8::BeamSetup* a) -> const Pythia8::BeamParticle& { return a->beamVMDB; });
    t.method("beamVMDB", [](Pythia8::BeamSetup* a) -> Pythia8::BeamParticle& { return a->beamVMDB; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:144:16
    // signature to use in the veto list: Pythia8::BeamSetup::beamVMDB
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding beamVMDB! methods to provide write access to the field beamVMDB (" __HERE__ ")");
    t.method("beamVMDB!", [](Pythia8::BeamSetup& a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a.beamVMDB = val; });

    DEBUG_MSG("Adding beamVMDB! methods to provide write access to the field beamVMDB (" __HERE__ ")");
    t.method("beamVMDB!", [](Pythia8::BeamSetup* a, const Pythia8::BeamParticle& val) -> Pythia8::BeamParticle& { return a->beamVMDB = val; });

    DEBUG_MSG("Adding idAList methods  to provide read access to the field idAList (" __HERE__ ")");
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:147:15
    // signature to use in the veto list: Pythia8::BeamSetup::idAList
    t.method("idAList", [](const Pythia8::BeamSetup& a) -> const std::vector<int>& { return a.idAList; });
    t.method("idAList", [](Pythia8::BeamSetup& a) -> std::vector<int>& { return a.idAList; });
    t.method("idAList", [](const Pythia8::BeamSetup* a) -> const std::vector<int>& { return a->idAList; });
    t.method("idAList", [](Pythia8::BeamSetup* a) -> std::vector<int>& { return a->idAList; });
    // defined in /cvmfs/sft.cern.ch/lcg/releases/MCGenerators/pythia8/312-88928/arm64-mac12-clang140-opt/include/Pythia8/BeamSetup.h:147:15
    // signature to use in the veto list: Pythia8::BeamSetup::idAList
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding idAList! methods to provide write access to the field idAList (" __HERE__ ")");
    t.method("idAList!", [](Pythia8::BeamSetup& a, const std::vector<int>& val) -> std::vector<int>& { return a.idAList = val; });

    DEBUG_MSG("Adding idAList! methods to provide write access to the field idAList (" __HERE__ ")");
    t.method("idAList!", [](Pythia8::BeamSetup* a, const std::vector<int>& val) -> std::vector<int>& { return a->idAList = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::BeamSetup>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_BeamSetup(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_BeamSetup(module));
}
