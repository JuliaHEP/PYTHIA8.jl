// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SuppressSmallPT> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SuppressSmallPT> : std::false_type { };
template<> struct SuperType<Pythia8::SuppressSmallPT> { typedef Pythia8::UserHooks type; };
}

// Class generating the wrapper for type Pythia8::SuppressSmallPT
// signature to use in the veto file: Pythia8::SuppressSmallPT
struct JlPythia8_SuppressSmallPT: public Wrapper {

  JlPythia8_SuppressSmallPT(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SuppressSmallPT (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:265:7
    jlcxx::TypeWrapper<Pythia8::SuppressSmallPT>  t = jlModule.add_type<Pythia8::SuppressSmallPT>("Pythia8!SuppressSmallPT",
      jlcxx::julia_base_type<Pythia8::UserHooks>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SuppressSmallPT>>(new jlcxx::TypeWrapper<Pythia8::SuppressSmallPT>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::SuppressSmallPT::SuppressSmallPT(double, int, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:270:3
    t.constructor<double>(/*finalize=*/true);
    t.constructor<double, int>(/*finalize=*/true);
    t.constructor<double, int, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::SuppressSmallPT::canModifySigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SuppressSmallPT::canModifySigma()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:276:16
    t.method("canModifySigma", static_cast<bool (Pythia8::SuppressSmallPT::*)() >(&Pythia8::SuppressSmallPT::canModifySigma));

    DEBUG_MSG("Adding wrapper for double Pythia8::SuppressSmallPT::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SuppressSmallPT::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:280:18
    t.method("multiplySigmaBy", static_cast<double (Pythia8::SuppressSmallPT::*)(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) >(&Pythia8::SuppressSmallPT::multiplySigmaBy));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SuppressSmallPT>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SuppressSmallPT(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SuppressSmallPT(module));
}
