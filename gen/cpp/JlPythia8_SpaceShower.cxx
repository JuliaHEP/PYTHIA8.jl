// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SpaceShower> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SpaceShower> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::SpaceShower
// signature to use in the veto file: Pythia8::SpaceShower
struct JlPythia8_SpaceShower: public Wrapper {

  JlPythia8_SpaceShower(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SpaceShower (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:33:7
    jlcxx::TypeWrapper<Pythia8::SpaceShower>  t = jlModule.add_type<Pythia8::SpaceShower>("Pythia8!SpaceShower");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SpaceShower>>(new jlcxx::TypeWrapper<Pythia8::SpaceShower>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::initPtrs(Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::initPtrs(Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:44:8
    t.method("initPtrs", static_cast<void (Pythia8::SpaceShower::*)(Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *) >(&Pythia8::SpaceShower::initPtrs));

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::reassignBeamPtrs(Pythia8::BeamParticle *, Pythia8::BeamParticle *, int) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::reassignBeamPtrs(Pythia8::BeamParticle *, Pythia8::BeamParticle *, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:54:8
    t.method("reassignBeamPtrs", static_cast<void (Pythia8::SpaceShower::*)(Pythia8::BeamParticle *, Pythia8::BeamParticle *, int) >(&Pythia8::SpaceShower::reassignBeamPtrs));
    t.method("reassignBeamPtrs", [](Pythia8::SpaceShower& a, Pythia8::BeamParticle * arg0, Pythia8::BeamParticle * arg1)->void { a.reassignBeamPtrs(arg0, arg1); });
    t.method("reassignBeamPtrs", [](Pythia8::SpaceShower* a, Pythia8::BeamParticle * arg0, Pythia8::BeamParticle * arg1)->void { a->reassignBeamPtrs(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::init(Pythia8::BeamParticle *, Pythia8::BeamParticle *) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::init(Pythia8::BeamParticle *, Pythia8::BeamParticle *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:60:16
    t.method("init", static_cast<void (Pythia8::SpaceShower::*)(Pythia8::BeamParticle *, Pythia8::BeamParticle *) >(&Pythia8::SpaceShower::init));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::limitPTmax(Pythia8::Event &, double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::limitPTmax(Pythia8::Event &, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:64:16
    t.method("limitPTmax", static_cast<bool (Pythia8::SpaceShower::*)(Pythia8::Event &, double, double) >(&Pythia8::SpaceShower::limitPTmax));
    t.method("limitPTmax", [](Pythia8::SpaceShower& a, Pythia8::Event & arg0)->bool { return a.limitPTmax(arg0); });
    t.method("limitPTmax", [](Pythia8::SpaceShower& a, Pythia8::Event & arg0, double arg1)->bool { return a.limitPTmax(arg0, arg1); });
    t.method("limitPTmax", [](Pythia8::SpaceShower* a, Pythia8::Event & arg0)->bool { return a->limitPTmax(arg0); });
    t.method("limitPTmax", [](Pythia8::SpaceShower* a, Pythia8::Event & arg0, double arg1)->bool { return a->limitPTmax(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::prepare(int, Pythia8::Event &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::prepare(int, Pythia8::Event &, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:68:16
    t.method("prepare", static_cast<void (Pythia8::SpaceShower::*)(int, Pythia8::Event &, bool) >(&Pythia8::SpaceShower::prepare));
    t.method("prepare", [](Pythia8::SpaceShower& a, int arg0, Pythia8::Event & arg1)->void { a.prepare(arg0, arg1); });
    t.method("prepare", [](Pythia8::SpaceShower* a, int arg0, Pythia8::Event & arg1)->void { a->prepare(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::update(int, Pythia8::Event &, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::update(int, Pythia8::Event &, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:72:16
    t.method("update", static_cast<void (Pythia8::SpaceShower::*)(int, Pythia8::Event &, bool) >(&Pythia8::SpaceShower::update));
    t.method("update", [](Pythia8::SpaceShower& a, int arg0, Pythia8::Event & arg1)->void { a.update(arg0, arg1); });
    t.method("update", [](Pythia8::SpaceShower* a, int arg0, Pythia8::Event & arg1)->void { a->update(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double Pythia8::SpaceShower::pTnext(Pythia8::Event &, double, double, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SpaceShower::pTnext(Pythia8::Event &, double, double, int, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:76:18
    t.method("pTnext", static_cast<double (Pythia8::SpaceShower::*)(Pythia8::Event &, double, double, int, bool) >(&Pythia8::SpaceShower::pTnext));
    t.method("pTnext", [](Pythia8::SpaceShower& a, Pythia8::Event & arg0, double arg1, double arg2)->double { return a.pTnext(arg0, arg1, arg2); });
    t.method("pTnext", [](Pythia8::SpaceShower& a, Pythia8::Event & arg0, double arg1, double arg2, int arg3)->double { return a.pTnext(arg0, arg1, arg2, arg3); });
    t.method("pTnext", [](Pythia8::SpaceShower* a, Pythia8::Event & arg0, double arg1, double arg2)->double { return a->pTnext(arg0, arg1, arg2); });
    t.method("pTnext", [](Pythia8::SpaceShower* a, Pythia8::Event & arg0, double arg1, double arg2, int arg3)->double { return a->pTnext(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::branch(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::branch(Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:81:16
    t.method("branch", static_cast<bool (Pythia8::SpaceShower::*)(Pythia8::Event &) >(&Pythia8::SpaceShower::branch));

    DEBUG_MSG("Adding wrapper for void Pythia8::SpaceShower::list() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SpaceShower::list()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:84:16
    t.method("list", static_cast<void (Pythia8::SpaceShower::*)()  const>(&Pythia8::SpaceShower::list));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::initUncertainties() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::initUncertainties()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:87:16
    t.method("initUncertainties", static_cast<bool (Pythia8::SpaceShower::*)() >(&Pythia8::SpaceShower::initUncertainties));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::initEnhancements() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::initEnhancements()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:90:16
    t.method("initEnhancements", static_cast<bool (Pythia8::SpaceShower::*)() >(&Pythia8::SpaceShower::initEnhancements));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::doRestart() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::doRestart()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:93:16
    t.method("doRestart", static_cast<bool (Pythia8::SpaceShower::*)()  const>(&Pythia8::SpaceShower::doRestart));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::wasGamma2qqbar() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::wasGamma2qqbar()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:96:16
    t.method("wasGamma2qqbar", static_cast<bool (Pythia8::SpaceShower::*)() >(&Pythia8::SpaceShower::wasGamma2qqbar));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::getHasWeaklyRadiated() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::getHasWeaklyRadiated()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:99:16
    t.method("getHasWeaklyRadiated", static_cast<bool (Pythia8::SpaceShower::*)() >(&Pythia8::SpaceShower::getHasWeaklyRadiated));

    DEBUG_MSG("Adding wrapper for int Pythia8::SpaceShower::system() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SpaceShower::system()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:102:15
    t.method("system", static_cast<int (Pythia8::SpaceShower::*)()  const>(&Pythia8::SpaceShower::system));

    DEBUG_MSG("Adding wrapper for double Pythia8::SpaceShower::enhancePTmax() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SpaceShower::enhancePTmax()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:105:18
    t.method("enhancePTmax", static_cast<double (Pythia8::SpaceShower::*)()  const>(&Pythia8::SpaceShower::enhancePTmax));

    DEBUG_MSG("Adding wrapper for Pythia8::Event Pythia8::SpaceShower::clustered(const Pythia8::Event &, int, int, int, std::string) (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::Event Pythia8::SpaceShower::clustered(const Pythia8::Event &, int, int, int, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:116:17
    t.method("clustered", static_cast<Pythia8::Event (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int, int, std::string) >(&Pythia8::SpaceShower::clustered));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::isSpacelike(const Pythia8::Event &, int, int, int, std::string) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::isSpacelike(const Pythia8::Event &, int, int, int, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:132:16
    t.method("isSpacelike", static_cast<bool (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int, int, std::string) >(&Pythia8::SpaceShower::isSpacelike));

    DEBUG_MSG("Adding wrapper for std::vector<std::string> Pythia8::SpaceShower::getSplittingName(const Pythia8::Event &, int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<std::string> Pythia8::SpaceShower::getSplittingName(const Pythia8::Event &, int, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:137:26
    t.method("getSplittingName", static_cast<std::vector<std::string> (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int, int) >(&Pythia8::SpaceShower::getSplittingName));

    DEBUG_MSG("Adding wrapper for double Pythia8::SpaceShower::getSplittingProb(const Pythia8::Event &, int, int, int, std::string) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SpaceShower::getSplittingProb(const Pythia8::Event &, int, int, int, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:142:18
    t.method("getSplittingProb", static_cast<double (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int, int, std::string) >(&Pythia8::SpaceShower::getSplittingProb));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SpaceShower::allowedSplitting(const Pythia8::Event &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SpaceShower::allowedSplitting(const Pythia8::Event &, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:145:16
    t.method("allowedSplitting", static_cast<bool (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int) >(&Pythia8::SpaceShower::allowedSplitting));

    DEBUG_MSG("Adding wrapper for std::vector<int> Pythia8::SpaceShower::getRecoilers(const Pythia8::Event &, int, int, std::string) (" __HERE__ ")");
    // signature to use in the veto list: std::vector<int> Pythia8::SpaceShower::getRecoilers(const Pythia8::Event &, int, int, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:147:23
    t.method("getRecoilers", static_cast<std::vector<int> (Pythia8::SpaceShower::*)(const Pythia8::Event &, int, int, std::string) >(&Pythia8::SpaceShower::getRecoilers));

    DEBUG_MSG("Adding wrapper for double Pythia8::SpaceShower::enhanceFactor(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SpaceShower::enhanceFactor(const std::string &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:150:18
    t.method("enhanceFactor", static_cast<double (Pythia8::SpaceShower::*)(const std::string &) >(&Pythia8::SpaceShower::enhanceFactor));

    DEBUG_MSG("Adding wrapper for double Pythia8::SpaceShower::noEmissionProbability(double, double, double, int, int, double, double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SpaceShower::noEmissionProbability(double, double, double, int, int, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:159:18
    t.method("noEmissionProbability", static_cast<double (Pythia8::SpaceShower::*)(double, double, double, int, int, double, double) >(&Pythia8::SpaceShower::noEmissionProbability));

    DEBUG_MSG("Adding mergingHooksPtr methods  to provide read access to the field mergingHooksPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:163:20
    // signature to use in the veto list: Pythia8::SpaceShower::mergingHooksPtr
    t.method("mergingHooksPtr", [](const Pythia8::SpaceShower& a) -> const Pythia8::MergingHooksPtr& { return a.mergingHooksPtr; });
    t.method("mergingHooksPtr", [](Pythia8::SpaceShower& a) -> Pythia8::MergingHooksPtr& { return a.mergingHooksPtr; });
    t.method("mergingHooksPtr", [](const Pythia8::SpaceShower* a) -> const Pythia8::MergingHooksPtr& { return a->mergingHooksPtr; });
    t.method("mergingHooksPtr", [](Pythia8::SpaceShower* a) -> Pythia8::MergingHooksPtr& { return a->mergingHooksPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:163:20
    // signature to use in the veto list: Pythia8::SpaceShower::mergingHooksPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mergingHooksPtr! methods to provide write access to the field mergingHooksPtr (" __HERE__ ")");
    t.method("mergingHooksPtr!", [](Pythia8::SpaceShower& a, const Pythia8::MergingHooksPtr& val) -> Pythia8::MergingHooksPtr& { return a.mergingHooksPtr = val; });

    DEBUG_MSG("Adding mergingHooksPtr! methods to provide write access to the field mergingHooksPtr (" __HERE__ ")");
    t.method("mergingHooksPtr!", [](Pythia8::SpaceShower* a, const Pythia8::MergingHooksPtr& val) -> Pythia8::MergingHooksPtr& { return a->mergingHooksPtr = val; });

    DEBUG_MSG("Adding weightContainerPtr methods  to provide read access to the field weightContainerPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:165:20
    // signature to use in the veto list: Pythia8::SpaceShower::weightContainerPtr
    t.method("weightContainerPtr", [](const Pythia8::SpaceShower& a) -> Pythia8::WeightContainer * { return a.weightContainerPtr; });
    t.method("weightContainerPtr", [](Pythia8::SpaceShower& a) -> Pythia8::WeightContainer * { return a.weightContainerPtr; });
    t.method("weightContainerPtr", [](const Pythia8::SpaceShower* a) -> Pythia8::WeightContainer * { return a->weightContainerPtr; });
    t.method("weightContainerPtr", [](Pythia8::SpaceShower* a) -> Pythia8::WeightContainer * { return a->weightContainerPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SpaceShower.h:165:20
    // signature to use in the veto list: Pythia8::SpaceShower::weightContainerPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding weightContainerPtr! methods to provide write access to the field weightContainerPtr (" __HERE__ ")");
    t.method("weightContainerPtr!", [](Pythia8::SpaceShower& a, Pythia8::WeightContainer * val) -> Pythia8::WeightContainer * { return a.weightContainerPtr = val; });

    DEBUG_MSG("Adding weightContainerPtr! methods to provide write access to the field weightContainerPtr (" __HERE__ ")");
    t.method("weightContainerPtr!", [](Pythia8::SpaceShower* a, Pythia8::WeightContainer * val) -> Pythia8::WeightContainer * { return a->weightContainerPtr = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SpaceShower>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SpaceShower(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SpaceShower(module));
}
