// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::WVec> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::WVec> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::WVec
// signature to use in the veto file: Pythia8::WVec
struct JlPythia8_WVec: public Wrapper {

  JlPythia8_WVec(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::WVec (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:175:7
    jlcxx::TypeWrapper<Pythia8::WVec>  t = jlModule.add_type<Pythia8::WVec>("Pythia8!WVec");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::WVec>>(new jlcxx::TypeWrapper<Pythia8::WVec>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::WVec::WVec(std::string, std::vector<std::string>) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:180:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, std::vector<std::string>>(/*finalize=*/true);

    DEBUG_MSG("Adding name methods  to provide read access to the field name (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:184:10
    // signature to use in the veto list: Pythia8::WVec::name
    t.method("name", [](const Pythia8::WVec& a) -> const std::string& { return a.name; });
    t.method("name", [](Pythia8::WVec& a) -> std::string& { return a.name; });
    t.method("name", [](const Pythia8::WVec* a) -> const std::string& { return a->name; });
    t.method("name", [](Pythia8::WVec* a) -> std::string& { return a->name; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:184:10
    // signature to use in the veto list: Pythia8::WVec::name
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](Pythia8::WVec& a, const std::string& val) -> std::string& { return a.name = val; });

    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](Pythia8::WVec* a, const std::string& val) -> std::string& { return a->name = val; });

    DEBUG_MSG("Adding valNow methods  to provide read access to the field valNow (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:185:18
    // signature to use in the veto list: Pythia8::WVec::valNow
    t.method("valNow", [](const Pythia8::WVec& a) -> const std::vector<std::string>& { return a.valNow; });
    t.method("valNow", [](Pythia8::WVec& a) -> std::vector<std::string>& { return a.valNow; });
    t.method("valNow", [](const Pythia8::WVec* a) -> const std::vector<std::string>& { return a->valNow; });
    t.method("valNow", [](Pythia8::WVec* a) -> std::vector<std::string>& { return a->valNow; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:185:18
    // signature to use in the veto list: Pythia8::WVec::valNow
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding valNow! methods to provide write access to the field valNow (" __HERE__ ")");
    t.method("valNow!", [](Pythia8::WVec& a, const std::vector<std::string>& val) -> std::vector<std::string>& { return a.valNow = val; });

    DEBUG_MSG("Adding valNow! methods to provide write access to the field valNow (" __HERE__ ")");
    t.method("valNow!", [](Pythia8::WVec* a, const std::vector<std::string>& val) -> std::vector<std::string>& { return a->valNow = val; });

    DEBUG_MSG("Adding valDefault methods  to provide read access to the field valDefault (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:185:26
    // signature to use in the veto list: Pythia8::WVec::valDefault
    t.method("valDefault", [](const Pythia8::WVec& a) -> const std::vector<std::string>& { return a.valDefault; });
    t.method("valDefault", [](Pythia8::WVec& a) -> std::vector<std::string>& { return a.valDefault; });
    t.method("valDefault", [](const Pythia8::WVec* a) -> const std::vector<std::string>& { return a->valDefault; });
    t.method("valDefault", [](Pythia8::WVec* a) -> std::vector<std::string>& { return a->valDefault; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Settings.h:185:26
    // signature to use in the veto list: Pythia8::WVec::valDefault
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding valDefault! methods to provide write access to the field valDefault (" __HERE__ ")");
    t.method("valDefault!", [](Pythia8::WVec& a, const std::vector<std::string>& val) -> std::vector<std::string>& { return a.valDefault = val; });

    DEBUG_MSG("Adding valDefault! methods to provide write access to the field valDefault (" __HERE__ ")");
    t.method("valDefault!", [](Pythia8::WVec* a, const std::vector<std::string>& val) -> std::vector<std::string>& { return a->valDefault = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::WVec>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_WVec(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_WVec(module));
}
