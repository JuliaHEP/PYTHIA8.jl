// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SigmaProcess> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SigmaProcess> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::SigmaProcess
// signature to use in the veto file: Pythia8::SigmaProcess
struct JlPythia8_SigmaProcess: public Wrapper {

  JlPythia8_SigmaProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SigmaProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:86:7
    jlcxx::TypeWrapper<Pythia8::SigmaProcess>  t = jlModule.add_type<Pythia8::SigmaProcess>("Pythia8!SigmaProcess");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SigmaProcess>>(new jlcxx::TypeWrapper<Pythia8::SigmaProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::init(Pythia8::BeamParticle *, Pythia8::BeamParticle *, Pythia8::SLHAinterface *) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::init(Pythia8::BeamParticle *, Pythia8::BeamParticle *, Pythia8::SLHAinterface *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:94:8
    t.method("init", static_cast<void (Pythia8::SigmaProcess::*)(Pythia8::BeamParticle *, Pythia8::BeamParticle *, Pythia8::SLHAinterface *) >(&Pythia8::SigmaProcess::init));
    t.method("init", [](Pythia8::SigmaProcess& a, Pythia8::BeamParticle * arg0, Pythia8::BeamParticle * arg1)->void { a.init(arg0, arg1); });
    t.method("init", [](Pythia8::SigmaProcess* a, Pythia8::BeamParticle * arg0, Pythia8::BeamParticle * arg1)->void { a->init(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::setLHAPtr(Pythia8::LHAupPtr) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::setLHAPtr(Pythia8::LHAupPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:98:8
    t.method("setLHAPtr", static_cast<void (Pythia8::SigmaProcess::*)(Pythia8::LHAupPtr) >(&Pythia8::SigmaProcess::setLHAPtr));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::updateBeamIDs() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::updateBeamIDs()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:101:8
    t.method("updateBeamIDs", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::updateBeamIDs));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::initProc() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::initProc()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:105:16
    t.method("initProc", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::initProc));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::initFlux() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::initFlux()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:108:16
    t.method("initFlux", static_cast<bool (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::initFlux));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::set1Kin(double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::set1Kin(double, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:112:16
    t.method("set1Kin", static_cast<void (Pythia8::SigmaProcess::*)(double, double, double) >(&Pythia8::SigmaProcess::set1Kin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::set2Kin(double, double, double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::set2Kin(double, double, double, double, double, double, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:116:16
    t.method("set2Kin", static_cast<void (Pythia8::SigmaProcess::*)(double, double, double, double, double, double, double, double) >(&Pythia8::SigmaProcess::set2Kin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::set2KinMPI(double, double, double, double, double, double, double, bool, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::set2KinMPI(double, double, double, double, double, double, double, bool, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:122:16
    t.method("set2KinMPI", static_cast<void (Pythia8::SigmaProcess::*)(double, double, double, double, double, double, double, bool, double, double) >(&Pythia8::SigmaProcess::set2KinMPI));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::set3Kin(double, double, double, Pythia8::Vec4, Pythia8::Vec4, Pythia8::Vec4, double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::set3Kin(double, double, double, Pythia8::Vec4, Pythia8::Vec4, Pythia8::Vec4, double, double, double, double, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:128:16
    t.method("set3Kin", static_cast<void (Pythia8::SigmaProcess::*)(double, double, double, Pythia8::Vec4, Pythia8::Vec4, Pythia8::Vec4, double, double, double, double, double, double) >(&Pythia8::SigmaProcess::set3Kin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::sigmaKin() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::sigmaKin()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:132:16
    t.method("sigmaKin", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::sigmaKin));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::sigmaHat() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::sigmaHat()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:137:18
    t.method("sigmaHat", static_cast<double (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::sigmaHat));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::sigmaHatWrap(int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::sigmaHatWrap(int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:142:18
    t.method("sigmaHatWrap", static_cast<double (Pythia8::SigmaProcess::*)(int, int) >(&Pythia8::SigmaProcess::sigmaHatWrap));
    t.method("sigmaHatWrap", [](Pythia8::SigmaProcess& a)->double { return a.sigmaHatWrap(); });
    t.method("sigmaHatWrap", [](Pythia8::SigmaProcess& a, int arg0)->double { return a.sigmaHatWrap(arg0); });
    t.method("sigmaHatWrap", [](Pythia8::SigmaProcess* a)->double { return a->sigmaHatWrap(); });
    t.method("sigmaHatWrap", [](Pythia8::SigmaProcess* a, int arg0)->double { return a->sigmaHatWrap(arg0); });

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::sigmaPDF(bool, bool, bool, double, double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::sigmaPDF(bool, bool, bool, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:149:18
    t.method("sigmaPDF", static_cast<double (Pythia8::SigmaProcess::*)(bool, bool, bool, double, double) >(&Pythia8::SigmaProcess::sigmaPDF));
    t.method("sigmaPDF", [](Pythia8::SigmaProcess& a)->double { return a.sigmaPDF(); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess& a, bool arg0)->double { return a.sigmaPDF(arg0); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess& a, bool arg0, bool arg1)->double { return a.sigmaPDF(arg0, arg1); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess& a, bool arg0, bool arg1, bool arg2)->double { return a.sigmaPDF(arg0, arg1, arg2); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess& a, bool arg0, bool arg1, bool arg2, double arg3)->double { return a.sigmaPDF(arg0, arg1, arg2, arg3); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess* a)->double { return a->sigmaPDF(); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess* a, bool arg0)->double { return a->sigmaPDF(arg0); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess* a, bool arg0, bool arg1)->double { return a->sigmaPDF(arg0, arg1); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess* a, bool arg0, bool arg1, bool arg2)->double { return a->sigmaPDF(arg0, arg1, arg2); });
    t.method("sigmaPDF", [](Pythia8::SigmaProcess* a, bool arg0, bool arg1, bool arg2, double arg3)->double { return a->sigmaPDF(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::pickInState(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::pickInState(int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:153:8
    t.method("pickInState", static_cast<void (Pythia8::SigmaProcess::*)(int, int) >(&Pythia8::SigmaProcess::pickInState));
    t.method("pickInState", [](Pythia8::SigmaProcess& a)->void { a.pickInState(); });
    t.method("pickInState", [](Pythia8::SigmaProcess& a, int arg0)->void { a.pickInState(arg0); });
    t.method("pickInState", [](Pythia8::SigmaProcess* a)->void { a->pickInState(); });
    t.method("pickInState", [](Pythia8::SigmaProcess* a, int arg0)->void { a->pickInState(arg0); });

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::setIdColAcol() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::setIdColAcol()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:156:16
    t.method("setIdColAcol", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::setIdColAcol));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::final2KinMPI(int, int, Pythia8::Vec4, Pythia8::Vec4, double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::final2KinMPI(int, int, Pythia8::Vec4, Pythia8::Vec4, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:159:16
    t.method("final2KinMPI", static_cast<bool (Pythia8::SigmaProcess::*)(int, int, Pythia8::Vec4, Pythia8::Vec4, double, double) >(&Pythia8::SigmaProcess::final2KinMPI));
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a)->bool { return a.final2KinMPI(); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a, int arg0)->bool { return a.final2KinMPI(arg0); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a, int arg0, int arg1)->bool { return a.final2KinMPI(arg0, arg1); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a, int arg0, int arg1, Pythia8::Vec4 arg2)->bool { return a.final2KinMPI(arg0, arg1, arg2); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a, int arg0, int arg1, Pythia8::Vec4 arg2, Pythia8::Vec4 arg3)->bool { return a.final2KinMPI(arg0, arg1, arg2, arg3); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess& a, int arg0, int arg1, Pythia8::Vec4 arg2, Pythia8::Vec4 arg3, double arg4)->bool { return a.final2KinMPI(arg0, arg1, arg2, arg3, arg4); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a)->bool { return a->final2KinMPI(); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a, int arg0)->bool { return a->final2KinMPI(arg0); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a, int arg0, int arg1)->bool { return a->final2KinMPI(arg0, arg1); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a, int arg0, int arg1, Pythia8::Vec4 arg2)->bool { return a->final2KinMPI(arg0, arg1, arg2); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a, int arg0, int arg1, Pythia8::Vec4 arg2, Pythia8::Vec4 arg3)->bool { return a->final2KinMPI(arg0, arg1, arg2, arg3); });
    t.method("final2KinMPI", [](Pythia8::SigmaProcess* a, int arg0, int arg1, Pythia8::Vec4 arg2, Pythia8::Vec4 arg3, double arg4)->bool { return a->final2KinMPI(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::weightDecayFlav(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::weightDecayFlav(Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:164:18
    t.method("weightDecayFlav", static_cast<double (Pythia8::SigmaProcess::*)(Pythia8::Event &) >(&Pythia8::SigmaProcess::weightDecayFlav));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::weightDecay(Pythia8::Event &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::weightDecay(Pythia8::Event &, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:169:18
    t.method("weightDecay", static_cast<double (Pythia8::SigmaProcess::*)(Pythia8::Event &, int, int) >(&Pythia8::SigmaProcess::weightDecay));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::setScale() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::setScale()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:172:16
    t.method("setScale", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::setScale));

    DEBUG_MSG("Adding wrapper for std::string Pythia8::SigmaProcess::name() (" __HERE__ ")");
    // signature to use in the veto list: std::string Pythia8::SigmaProcess::name()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:175:18
    t.method("name", static_cast<std::string (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::name));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::code() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::code()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:176:18
    t.method("code", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::code));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::nFinal() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::nFinal()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:177:18
    t.method("nFinal", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::nFinal));

    DEBUG_MSG("Adding wrapper for std::string Pythia8::SigmaProcess::inFlux() (" __HERE__ ")");
    // signature to use in the veto list: std::string Pythia8::SigmaProcess::inFlux()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:180:18
    t.method("inFlux", static_cast<std::string (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::inFlux));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::convert2mb() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::convert2mb()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:183:18
    t.method("convert2mb", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::convert2mb));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::convertM2() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::convertM2()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:186:18
    t.method("convertM2", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::convertM2));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isLHA() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isLHA()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:189:18
    t.method("isLHA", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isLHA));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isNonDiff() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isNonDiff()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:192:18
    t.method("isNonDiff", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isNonDiff));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isResolved() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isResolved()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:193:18
    t.method("isResolved", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isResolved));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isDiffA() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isDiffA()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:194:18
    t.method("isDiffA", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isDiffA));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isDiffB() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isDiffB()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:195:18
    t.method("isDiffB", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isDiffB));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isDiffC() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isDiffC()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:196:18
    t.method("isDiffC", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isDiffC));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isSUSY() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isSUSY()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:199:18
    t.method("isSUSY", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isSUSY));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::allowNegativeSigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::allowNegativeSigma()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:202:18
    t.method("allowNegativeSigma", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::allowNegativeSigma));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::id3Mass() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::id3Mass()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:207:18
    t.method("id3Mass", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::id3Mass));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::id4Mass() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::id4Mass()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:208:18
    t.method("id4Mass", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::id4Mass));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::id5Mass() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::id5Mass()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:209:18
    t.method("id5Mass", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::id5Mass));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::resonanceA() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::resonanceA()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:212:18
    t.method("resonanceA", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::resonanceA));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::resonanceB() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::resonanceB()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:213:18
    t.method("resonanceB", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::resonanceB));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isSChannel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isSChannel()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:216:18
    t.method("isSChannel", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isSChannel));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::idSChannel() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::idSChannel()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:219:18
    t.method("idSChannel", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::idSChannel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::isQCD3body() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::isQCD3body()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:222:18
    t.method("isQCD3body", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::isQCD3body));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::idTchan1() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::idTchan1()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:225:18
    t.method("idTchan1", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::idTchan1));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::idTchan2() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::idTchan2()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:226:18
    t.method("idTchan2", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::idTchan2));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::tChanFracPow1() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::tChanFracPow1()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:227:18
    t.method("tChanFracPow1", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::tChanFracPow1));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::tChanFracPow2() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::tChanFracPow2()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:228:18
    t.method("tChanFracPow2", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::tChanFracPow2));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::useMirrorWeight() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::useMirrorWeight()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:229:18
    t.method("useMirrorWeight", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::useMirrorWeight));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::gmZmode() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::gmZmode()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:232:18
    t.method("gmZmode", static_cast<int (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::gmZmode));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaProcess::swappedTU() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaProcess::swappedTU()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:235:8
    t.method("swappedTU", static_cast<bool (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::swappedTU));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::id(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::id(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:238:10
    t.method("id", static_cast<int (Pythia8::SigmaProcess::*)(int)  const>(&Pythia8::SigmaProcess::id));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::col(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::col(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:239:10
    t.method("col", static_cast<int (Pythia8::SigmaProcess::*)(int)  const>(&Pythia8::SigmaProcess::col));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaProcess::acol(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaProcess::acol(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:240:10
    t.method("acol", static_cast<int (Pythia8::SigmaProcess::*)(int)  const>(&Pythia8::SigmaProcess::acol));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::m(int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::m(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:241:10
    t.method("m", static_cast<double (Pythia8::SigmaProcess::*)(int)  const>(&Pythia8::SigmaProcess::m));

    DEBUG_MSG("Adding wrapper for Pythia8::Particle Pythia8::SigmaProcess::getParton(int) (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::Particle Pythia8::SigmaProcess::getParton(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:242:12
    t.method("getParton", static_cast<Pythia8::Particle (Pythia8::SigmaProcess::*)(int)  const>(&Pythia8::SigmaProcess::getParton));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::Q2Ren() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::Q2Ren()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:246:10
    t.method("Q2Ren", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::Q2Ren));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::alphaEMRen() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::alphaEMRen()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:247:10
    t.method("alphaEMRen", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::alphaEMRen));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::alphaSRen() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::alphaSRen()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:248:10
    t.method("alphaSRen", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::alphaSRen));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::Q2Fac() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::Q2Fac()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:249:10
    t.method("Q2Fac", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::Q2Fac));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::pdf1() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::pdf1()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:250:10
    t.method("pdf1", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::pdf1));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::pdf2() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::pdf2()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:251:10
    t.method("pdf2", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::pdf2));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::thetaMPI() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::thetaMPI()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:254:10
    t.method("thetaMPI", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::thetaMPI));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::phiMPI() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::phiMPI()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:255:10
    t.method("phiMPI", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::phiMPI));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::sHBetaMPI() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::sHBetaMPI()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:256:10
    t.method("sHBetaMPI", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::sHBetaMPI));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::pT2MPI() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::pT2MPI()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:257:10
    t.method("pT2MPI", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::pT2MPI));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaProcess::pTMPIFin() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaProcess::pTMPIFin()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:258:10
    t.method("pTMPIFin", static_cast<double (Pythia8::SigmaProcess::*)()  const>(&Pythia8::SigmaProcess::pTMPIFin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::saveKin() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::saveKin()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:261:8
    t.method("saveKin", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::saveKin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::loadKin() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::loadKin()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:265:8
    t.method("loadKin", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::loadKin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::swapKin() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::swapKin()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:270:8
    t.method("swapKin", static_cast<void (Pythia8::SigmaProcess::*)() >(&Pythia8::SigmaProcess::swapKin));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaProcess::setIdInDiff(int, int) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaProcess::setIdInDiff(int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:277:16
    t.method("setIdInDiff", static_cast<void (Pythia8::SigmaProcess::*)(int, int) >(&Pythia8::SigmaProcess::setIdInDiff));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SigmaProcess>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SigmaProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SigmaProcess(module));
}
