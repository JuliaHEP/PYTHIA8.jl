// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::LHAProcess> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::LHAProcess> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::LHAProcess
// signature to use in the veto file: Pythia8::LHAProcess
struct JlPythia8_LHAProcess: public Wrapper {

  JlPythia8_LHAProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::LHAProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:28:7
    jlcxx::TypeWrapper<Pythia8::LHAProcess>  t = jlModule.add_type<Pythia8::LHAProcess>("Pythia8!LHAProcess");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAProcess>>(new jlcxx::TypeWrapper<Pythia8::LHAProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::LHAProcess::LHAProcess(int, double, double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:34:3
    t.constructor<int, double, double, double>(/*finalize=*/true);

    DEBUG_MSG("Adding idProc methods  to provide read access to the field idProc (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:39:10
    // signature to use in the veto list: Pythia8::LHAProcess::idProc
    t.method("idProc", [](const Pythia8::LHAProcess& a) -> int { return a.idProc; });
    t.method("idProc", [](Pythia8::LHAProcess& a) -> int { return a.idProc; });
    t.method("idProc", [](const Pythia8::LHAProcess* a) -> int { return a->idProc; });
    t.method("idProc", [](Pythia8::LHAProcess* a) -> int { return a->idProc; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:39:10
    // signature to use in the veto list: Pythia8::LHAProcess::idProc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding idProc! methods to provide write access to the field idProc (" __HERE__ ")");
    t.method("idProc!", [](Pythia8::LHAProcess& a, int val) -> int { return a.idProc = val; });

    DEBUG_MSG("Adding idProc! methods to provide write access to the field idProc (" __HERE__ ")");
    t.method("idProc!", [](Pythia8::LHAProcess* a, int val) -> int { return a->idProc = val; });

    DEBUG_MSG("Adding xSecProc methods  to provide read access to the field xSecProc (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:10
    // signature to use in the veto list: Pythia8::LHAProcess::xSecProc
    t.method("xSecProc", [](const Pythia8::LHAProcess& a) -> double { return a.xSecProc; });
    t.method("xSecProc", [](Pythia8::LHAProcess& a) -> double { return a.xSecProc; });
    t.method("xSecProc", [](const Pythia8::LHAProcess* a) -> double { return a->xSecProc; });
    t.method("xSecProc", [](Pythia8::LHAProcess* a) -> double { return a->xSecProc; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:10
    // signature to use in the veto list: Pythia8::LHAProcess::xSecProc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding xSecProc! methods to provide write access to the field xSecProc (" __HERE__ ")");
    t.method("xSecProc!", [](Pythia8::LHAProcess& a, double val) -> double { return a.xSecProc = val; });

    DEBUG_MSG("Adding xSecProc! methods to provide write access to the field xSecProc (" __HERE__ ")");
    t.method("xSecProc!", [](Pythia8::LHAProcess* a, double val) -> double { return a->xSecProc = val; });

    DEBUG_MSG("Adding xErrProc methods  to provide read access to the field xErrProc (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:20
    // signature to use in the veto list: Pythia8::LHAProcess::xErrProc
    t.method("xErrProc", [](const Pythia8::LHAProcess& a) -> double { return a.xErrProc; });
    t.method("xErrProc", [](Pythia8::LHAProcess& a) -> double { return a.xErrProc; });
    t.method("xErrProc", [](const Pythia8::LHAProcess* a) -> double { return a->xErrProc; });
    t.method("xErrProc", [](Pythia8::LHAProcess* a) -> double { return a->xErrProc; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:20
    // signature to use in the veto list: Pythia8::LHAProcess::xErrProc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding xErrProc! methods to provide write access to the field xErrProc (" __HERE__ ")");
    t.method("xErrProc!", [](Pythia8::LHAProcess& a, double val) -> double { return a.xErrProc = val; });

    DEBUG_MSG("Adding xErrProc! methods to provide write access to the field xErrProc (" __HERE__ ")");
    t.method("xErrProc!", [](Pythia8::LHAProcess* a, double val) -> double { return a->xErrProc = val; });

    DEBUG_MSG("Adding xMaxProc methods  to provide read access to the field xMaxProc (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:30
    // signature to use in the veto list: Pythia8::LHAProcess::xMaxProc
    t.method("xMaxProc", [](const Pythia8::LHAProcess& a) -> double { return a.xMaxProc; });
    t.method("xMaxProc", [](Pythia8::LHAProcess& a) -> double { return a.xMaxProc; });
    t.method("xMaxProc", [](const Pythia8::LHAProcess* a) -> double { return a->xMaxProc; });
    t.method("xMaxProc", [](Pythia8::LHAProcess* a) -> double { return a->xMaxProc; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:40:30
    // signature to use in the veto list: Pythia8::LHAProcess::xMaxProc
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding xMaxProc! methods to provide write access to the field xMaxProc (" __HERE__ ")");
    t.method("xMaxProc!", [](Pythia8::LHAProcess& a, double val) -> double { return a.xMaxProc = val; });

    DEBUG_MSG("Adding xMaxProc! methods to provide write access to the field xMaxProc (" __HERE__ ")");
    t.method("xMaxProc!", [](Pythia8::LHAProcess* a, double val) -> double { return a->xMaxProc = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAProcess>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_LHAProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_LHAProcess(module));
}
