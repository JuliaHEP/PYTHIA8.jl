// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::LHAupFromPYTHIA8> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::LHAupFromPYTHIA8> : std::false_type { };
template<> struct SuperType<Pythia8::LHAupFromPYTHIA8> { typedef Pythia8::LHAup type; };
}

// Class generating the wrapper for type Pythia8::LHAupFromPYTHIA8
// signature to use in the veto file: Pythia8::LHAupFromPYTHIA8
struct JlPythia8_LHAupFromPYTHIA8: public Wrapper {

  JlPythia8_LHAupFromPYTHIA8(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::LHAupFromPYTHIA8 (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:484:7
    jlcxx::TypeWrapper<Pythia8::LHAupFromPYTHIA8>  t = jlModule.add_type<Pythia8::LHAupFromPYTHIA8>("Pythia8!LHAupFromPYTHIA8",
      jlcxx::julia_base_type<Pythia8::LHAup>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAupFromPYTHIA8>>(new jlcxx::TypeWrapper<Pythia8::LHAupFromPYTHIA8>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void Pythia8::LHAupFromPYTHIA8::LHAupFromPYTHIA8(Pythia8::Event *, const Pythia8::Info *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:489:3
    t.constructor<Pythia8::Event *, const Pythia8::Info *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::LHAupFromPYTHIA8::setInit() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::LHAupFromPYTHIA8::setInit()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:496:8
    t.method("setInit", static_cast<bool (Pythia8::LHAupFromPYTHIA8::*)() >(&Pythia8::LHAupFromPYTHIA8::setInit));

    DEBUG_MSG("Adding wrapper for bool Pythia8::LHAupFromPYTHIA8::setEvent(int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::LHAupFromPYTHIA8::setEvent(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:499:8
    t.method("setEvent", static_cast<bool (Pythia8::LHAupFromPYTHIA8::*)(int) >(&Pythia8::LHAupFromPYTHIA8::setEvent));
    t.method("setEvent", [](Pythia8::LHAupFromPYTHIA8& a)->bool { return a.setEvent(); });
    t.method("setEvent", [](Pythia8::LHAupFromPYTHIA8* a)->bool { return a->setEvent(); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::LHAupFromPYTHIA8::updateSigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::LHAupFromPYTHIA8::updateSigma()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/LesHouches.h:502:8
    t.method("updateSigma", static_cast<bool (Pythia8::LHAupFromPYTHIA8::*)() >(&Pythia8::LHAupFromPYTHIA8::updateSigma));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::LHAupFromPYTHIA8>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_LHAupFromPYTHIA8(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_LHAupFromPYTHIA8(module));
}
