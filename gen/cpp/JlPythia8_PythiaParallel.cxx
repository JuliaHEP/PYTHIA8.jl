// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::PythiaParallel> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::PythiaParallel> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::PythiaParallel
// signature to use in the veto file: Pythia8::PythiaParallel
struct JlPythia8_PythiaParallel: public Wrapper {

  JlPythia8_PythiaParallel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::PythiaParallel (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:18:7
    jlcxx::TypeWrapper<Pythia8::PythiaParallel>  t = jlModule.add_type<Pythia8::PythiaParallel>("Pythia8!PythiaParallel");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PythiaParallel>>(new jlcxx::TypeWrapper<Pythia8::PythiaParallel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::PythiaParallel::PythiaParallel(std::string, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:23:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::PythiaParallel::readString(std::string, bool) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::PythiaParallel::readString(std::string, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:27:8
    t.method("readString", static_cast<bool (Pythia8::PythiaParallel::*)(std::string, bool) >(&Pythia8::PythiaParallel::readString));
    t.method("readString", [](Pythia8::PythiaParallel& a, std::string arg0)->bool { return a.readString(arg0); });
    t.method("readString", [](Pythia8::PythiaParallel* a, std::string arg0)->bool { return a->readString(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::PythiaParallel::readFile(std::string, bool, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::PythiaParallel::readFile(std::string, bool, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:31:8
    t.method("readFile", static_cast<bool (Pythia8::PythiaParallel::*)(std::string, bool, int) >(&Pythia8::PythiaParallel::readFile));
    t.method("readFile", [](Pythia8::PythiaParallel& a, std::string arg0)->bool { return a.readFile(arg0); });
    t.method("readFile", [](Pythia8::PythiaParallel& a, std::string arg0, bool arg1)->bool { return a.readFile(arg0, arg1); });
    t.method("readFile", [](Pythia8::PythiaParallel* a, std::string arg0)->bool { return a->readFile(arg0); });
    t.method("readFile", [](Pythia8::PythiaParallel* a, std::string arg0, bool arg1)->bool { return a->readFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::PythiaParallel::readFile(std::string, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::PythiaParallel::readFile(std::string, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:33:8
    t.method("readFile", static_cast<bool (Pythia8::PythiaParallel::*)(std::string, int) >(&Pythia8::PythiaParallel::readFile));

    DEBUG_MSG("Adding wrapper for bool Pythia8::PythiaParallel::init() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::PythiaParallel::init()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:41:8
    t.method("init", static_cast<bool (Pythia8::PythiaParallel::*)() >(&Pythia8::PythiaParallel::init));

    DEBUG_MSG("Adding wrapper for void Pythia8::PythiaParallel::stat() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PythiaParallel::stat()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:51:8
    t.method("stat", static_cast<void (Pythia8::PythiaParallel::*)() >(&Pythia8::PythiaParallel::stat));

    DEBUG_MSG("Adding wrapper for double Pythia8::PythiaParallel::sigmaGen() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::PythiaParallel::sigmaGen()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:62:10
    t.method("sigmaGen", static_cast<double (Pythia8::PythiaParallel::*)()  const>(&Pythia8::PythiaParallel::sigmaGen));

    DEBUG_MSG("Adding wrapper for double Pythia8::PythiaParallel::weightSum() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::PythiaParallel::weightSum()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:65:10
    t.method("weightSum", static_cast<double (Pythia8::PythiaParallel::*)()  const>(&Pythia8::PythiaParallel::weightSum));

    DEBUG_MSG("Adding pythiaHelper methods  to provide read access to the field pythiaHelper (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:59:10
    // signature to use in the veto list: Pythia8::PythiaParallel::pythiaHelper
    t.method("pythiaHelper", [](const Pythia8::PythiaParallel& a) -> const Pythia8::Pythia& { return a.pythiaHelper; });
    t.method("pythiaHelper", [](Pythia8::PythiaParallel& a) -> Pythia8::Pythia& { return a.pythiaHelper; });
    t.method("pythiaHelper", [](const Pythia8::PythiaParallel* a) -> const Pythia8::Pythia& { return a->pythiaHelper; });
    t.method("pythiaHelper", [](Pythia8::PythiaParallel* a) -> Pythia8::Pythia& { return a->pythiaHelper; });

    DEBUG_MSG("Adding settings methods  to provide read access to the field settings (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:68:13
    // signature to use in the veto list: Pythia8::PythiaParallel::settings
    t.method("settings", [](const Pythia8::PythiaParallel& a) -> const Pythia8::Settings & { return a.settings; });
    t.method("settings", [](Pythia8::PythiaParallel& a) -> Pythia8::Settings & { return a.settings; });
    t.method("settings", [](const Pythia8::PythiaParallel* a) -> const Pythia8::Settings & { return a->settings; });
    t.method("settings", [](Pythia8::PythiaParallel* a) -> Pythia8::Settings & { return a->settings; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:68:13
    // signature to use in the veto list: Pythia8::PythiaParallel::settings
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding settings! methods to provide write access to the field settings (" __HERE__ ")");
    t.method("settings!", [](Pythia8::PythiaParallel& a, const Pythia8::Settings & val) -> Pythia8::Settings & { return a.settings = val; });

    DEBUG_MSG("Adding settings! methods to provide write access to the field settings (" __HERE__ ")");
    t.method("settings!", [](Pythia8::PythiaParallel* a, const Pythia8::Settings & val) -> Pythia8::Settings & { return a->settings = val; });

    DEBUG_MSG("Adding particleData methods  to provide read access to the field particleData (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:71:17
    // signature to use in the veto list: Pythia8::PythiaParallel::particleData
    t.method("particleData", [](const Pythia8::PythiaParallel& a) -> const Pythia8::ParticleData & { return a.particleData; });
    t.method("particleData", [](Pythia8::PythiaParallel& a) -> Pythia8::ParticleData & { return a.particleData; });
    t.method("particleData", [](const Pythia8::PythiaParallel* a) -> const Pythia8::ParticleData & { return a->particleData; });
    t.method("particleData", [](Pythia8::PythiaParallel* a) -> Pythia8::ParticleData & { return a->particleData; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PythiaParallel.h:71:17
    // signature to use in the veto list: Pythia8::PythiaParallel::particleData
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding particleData! methods to provide write access to the field particleData (" __HERE__ ")");
    t.method("particleData!", [](Pythia8::PythiaParallel& a, const Pythia8::ParticleData & val) -> Pythia8::ParticleData & { return a.particleData = val; });

    DEBUG_MSG("Adding particleData! methods to provide write access to the field particleData (" __HERE__ ")");
    t.method("particleData!", [](Pythia8::PythiaParallel* a, const Pythia8::ParticleData & val) -> Pythia8::ParticleData & { return a->particleData = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PythiaParallel>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_PythiaParallel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_PythiaParallel(module));
}
