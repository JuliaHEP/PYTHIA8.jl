// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::ClusterJet> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::ClusterJet> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::ClusterJet
// signature to use in the veto file: Pythia8::ClusterJet
struct JlPythia8_ClusterJet: public Wrapper {

  JlPythia8_ClusterJet(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::ClusterJet (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:179:7
    jlcxx::TypeWrapper<Pythia8::ClusterJet>  t = jlModule.add_type<Pythia8::ClusterJet>("Pythia8!ClusterJet");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::ClusterJet>>(new jlcxx::TypeWrapper<Pythia8::ClusterJet>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::ClusterJet::ClusterJet(std::string, int, int, bool, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:184:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, int>(/*finalize=*/true);
    t.constructor<std::string, int, int>(/*finalize=*/true);
    t.constructor<std::string, int, int, bool>(/*finalize=*/true);
    t.constructor<std::string, int, int, bool, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::ClusterJet::analyze(const Pythia8::Event &, double, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::ClusterJet::analyze(const Pythia8::Event &, double, double, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:196:8
    t.method("analyze", static_cast<bool (Pythia8::ClusterJet::*)(const Pythia8::Event &, double, double, int, int) >(&Pythia8::ClusterJet::analyze));
    t.method("analyze", [](Pythia8::ClusterJet& a, const Pythia8::Event & arg0, double arg1, double arg2)->bool { return a.analyze(arg0, arg1, arg2); });
    t.method("analyze", [](Pythia8::ClusterJet& a, const Pythia8::Event & arg0, double arg1, double arg2, int arg3)->bool { return a.analyze(arg0, arg1, arg2, arg3); });
    t.method("analyze", [](Pythia8::ClusterJet* a, const Pythia8::Event & arg0, double arg1, double arg2)->bool { return a->analyze(arg0, arg1, arg2); });
    t.method("analyze", [](Pythia8::ClusterJet* a, const Pythia8::Event & arg0, double arg1, double arg2, int arg3)->bool { return a->analyze(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for int Pythia8::ClusterJet::size() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::ClusterJet::size()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:200:8
    t.method("size", static_cast<int (Pythia8::ClusterJet::*)()  const>(&Pythia8::ClusterJet::size));

    DEBUG_MSG("Adding wrapper for Pythia8::Vec4 Pythia8::ClusterJet::p(int) (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::Vec4 Pythia8::ClusterJet::p(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:201:8
    t.method("p", static_cast<Pythia8::Vec4 (Pythia8::ClusterJet::*)(int)  const>(&Pythia8::ClusterJet::p));

    DEBUG_MSG("Adding wrapper for int Pythia8::ClusterJet::mult(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::ClusterJet::mult(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:202:8
    t.method("mult", static_cast<int (Pythia8::ClusterJet::*)(int)  const>(&Pythia8::ClusterJet::mult));

    DEBUG_MSG("Adding wrapper for int Pythia8::ClusterJet::jetAssignment(int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::ClusterJet::jetAssignment(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:205:7
    t.method("jetAssignment", static_cast<int (Pythia8::ClusterJet::*)(int)  const>(&Pythia8::ClusterJet::jetAssignment));

    DEBUG_MSG("Adding wrapper for void Pythia8::ClusterJet::list() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::ClusterJet::list()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:211:8
    t.method("list", static_cast<void (Pythia8::ClusterJet::*)()  const>(&Pythia8::ClusterJet::list));

    DEBUG_MSG("Adding wrapper for int Pythia8::ClusterJet::distanceSize() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::ClusterJet::distanceSize()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:214:10
    t.method("distanceSize", static_cast<int (Pythia8::ClusterJet::*)()  const>(&Pythia8::ClusterJet::distanceSize));

    DEBUG_MSG("Adding wrapper for double Pythia8::ClusterJet::distance(int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::ClusterJet::distance(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:215:10
    t.method("distance", static_cast<double (Pythia8::ClusterJet::*)(int)  const>(&Pythia8::ClusterJet::distance));

    DEBUG_MSG("Adding wrapper for int Pythia8::ClusterJet::nError() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::ClusterJet::nError()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:219:7
    t.method("nError", static_cast<int (Pythia8::ClusterJet::*)()  const>(&Pythia8::ClusterJet::nError));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::ClusterJet>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_ClusterJet(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_ClusterJet(module));
}
