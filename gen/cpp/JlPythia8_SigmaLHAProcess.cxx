// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SigmaLHAProcess> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SigmaLHAProcess> : std::false_type { };
template<> struct SuperType<Pythia8::SigmaLHAProcess> { typedef Pythia8::SigmaProcess type; };
}

// Class generating the wrapper for type Pythia8::SigmaLHAProcess
// signature to use in the veto file: Pythia8::SigmaLHAProcess
struct JlPythia8_SigmaLHAProcess: public Wrapper {

  JlPythia8_SigmaLHAProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SigmaLHAProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:590:7
    jlcxx::TypeWrapper<Pythia8::SigmaLHAProcess>  t = jlModule.add_type<Pythia8::SigmaLHAProcess>("Pythia8!SigmaLHAProcess",
      jlcxx::julia_base_type<Pythia8::SigmaProcess>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SigmaLHAProcess>>(new jlcxx::TypeWrapper<Pythia8::SigmaLHAProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaLHAProcess::initFlux() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaLHAProcess::initFlux()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:601:18
    t.method("initFlux", static_cast<bool (Pythia8::SigmaLHAProcess::*)() >(&Pythia8::SigmaLHAProcess::initFlux));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaLHAProcess::sigmaPDF(bool, bool, bool, double, double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaLHAProcess::sigmaPDF(bool, bool, bool, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:604:18
    t.method("sigmaPDF", static_cast<double (Pythia8::SigmaLHAProcess::*)(bool, bool, bool, double, double) >(&Pythia8::SigmaLHAProcess::sigmaPDF));

    DEBUG_MSG("Adding wrapper for double Pythia8::SigmaLHAProcess::weightDecay(Pythia8::Event &, int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::SigmaLHAProcess::weightDecay(Pythia8::Event &, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:607:18
    t.method("weightDecay", static_cast<double (Pythia8::SigmaLHAProcess::*)(Pythia8::Event &, int, int) >(&Pythia8::SigmaLHAProcess::weightDecay));

    DEBUG_MSG("Adding wrapper for void Pythia8::SigmaLHAProcess::setScale() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::SigmaLHAProcess::setScale()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:610:18
    t.method("setScale", static_cast<void (Pythia8::SigmaLHAProcess::*)() >(&Pythia8::SigmaLHAProcess::setScale));

    DEBUG_MSG("Adding wrapper for std::string Pythia8::SigmaLHAProcess::name() (" __HERE__ ")");
    // signature to use in the veto list: std::string Pythia8::SigmaLHAProcess::name()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:613:18
    t.method("name", static_cast<std::string (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::name));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaLHAProcess::code() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaLHAProcess::code()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:614:18
    t.method("code", static_cast<int (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::code));

    DEBUG_MSG("Adding wrapper for int Pythia8::SigmaLHAProcess::nFinal() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::SigmaLHAProcess::nFinal()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:617:18
    t.method("nFinal", static_cast<int (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::nFinal));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaLHAProcess::convert2mb() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaLHAProcess::convert2mb()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:620:18
    t.method("convert2mb", static_cast<bool (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::convert2mb));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaLHAProcess::isLHA() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaLHAProcess::isLHA()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:623:18
    t.method("isLHA", static_cast<bool (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::isLHA));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SigmaLHAProcess::allowNegativeSigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SigmaLHAProcess::allowNegativeSigma()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/SigmaProcess.h:626:18
    t.method("allowNegativeSigma", static_cast<bool (Pythia8::SigmaLHAProcess::*)()  const>(&Pythia8::SigmaLHAProcess::allowNegativeSigma));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SigmaLHAProcess>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SigmaLHAProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SigmaLHAProcess(module));
}
