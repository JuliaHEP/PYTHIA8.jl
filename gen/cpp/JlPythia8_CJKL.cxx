// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::CJKL> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::CJKL> : std::false_type { };
template<> struct SuperType<Pythia8::CJKL> { typedef Pythia8::PDF type; };
}

// Class generating the wrapper for type Pythia8::CJKL
// signature to use in the veto file: Pythia8::CJKL
struct JlPythia8_CJKL: public Wrapper {

  JlPythia8_CJKL(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::CJKL (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:813:7
    jlcxx::TypeWrapper<Pythia8::CJKL>  t = jlModule.add_type<Pythia8::CJKL>("Pythia8!CJKL",
      jlcxx::julia_base_type<Pythia8::PDF>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::CJKL>>(new jlcxx::TypeWrapper<Pythia8::CJKL>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::CJKL::CJKL(int, Pythia8::Rndm *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:818:3
    t.constructor<int>(/*finalize=*/true);
    t.constructor<int, Pythia8::Rndm *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for double Pythia8::CJKL::gammaPDFxDependence(int, double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::CJKL::gammaPDFxDependence(int, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:822:10
    t.method("gammaPDFxDependence", static_cast<double (Pythia8::CJKL::*)(int, double) >(&Pythia8::CJKL::gammaPDFxDependence));

    DEBUG_MSG("Adding wrapper for double Pythia8::CJKL::gammaPDFRefScale(int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::CJKL::gammaPDFRefScale(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:823:10
    t.method("gammaPDFRefScale", static_cast<double (Pythia8::CJKL::*)(int) >(&Pythia8::CJKL::gammaPDFRefScale));

    DEBUG_MSG("Adding wrapper for int Pythia8::CJKL::sampleGammaValFlavor(double) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::CJKL::sampleGammaValFlavor(double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:826:7
    t.method("sampleGammaValFlavor", static_cast<int (Pythia8::CJKL::*)(double) >(&Pythia8::CJKL::sampleGammaValFlavor));

    DEBUG_MSG("Adding wrapper for double Pythia8::CJKL::xfIntegratedTotal(double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::CJKL::xfIntegratedTotal(double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:829:10
    t.method("xfIntegratedTotal", static_cast<double (Pythia8::CJKL::*)(double) >(&Pythia8::CJKL::xfIntegratedTotal));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::CJKL>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_CJKL(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_CJKL(module));
}
