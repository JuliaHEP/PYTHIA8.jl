// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::PDF::PDFEnvelope> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::PDF::PDFEnvelope> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::PDF::PDFEnvelope
// signature to use in the veto file: Pythia8::PDF::PDFEnvelope
struct JlPythia8_PDF_PDFEnvelope: public Wrapper {

  JlPythia8_PDF_PDFEnvelope(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::PDF::PDFEnvelope (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:102:10
    jlcxx::TypeWrapper<Pythia8::PDF::PDFEnvelope>  t = jlModule.add_type<Pythia8::PDF::PDFEnvelope>("Pythia8!PDF!PDFEnvelope");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PDF::PDFEnvelope>>(new jlcxx::TypeWrapper<Pythia8::PDF::PDFEnvelope>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding centralPDF methods  to provide read access to the field centralPDF (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:12
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::centralPDF
    t.method("centralPDF", [](const Pythia8::PDF::PDFEnvelope& a) -> double { return a.centralPDF; });
    t.method("centralPDF", [](Pythia8::PDF::PDFEnvelope& a) -> double { return a.centralPDF; });
    t.method("centralPDF", [](const Pythia8::PDF::PDFEnvelope* a) -> double { return a->centralPDF; });
    t.method("centralPDF", [](Pythia8::PDF::PDFEnvelope* a) -> double { return a->centralPDF; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:12
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::centralPDF
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding centralPDF! methods to provide write access to the field centralPDF (" __HERE__ ")");
    t.method("centralPDF!", [](Pythia8::PDF::PDFEnvelope& a, double val) -> double { return a.centralPDF = val; });

    DEBUG_MSG("Adding centralPDF! methods to provide write access to the field centralPDF (" __HERE__ ")");
    t.method("centralPDF!", [](Pythia8::PDF::PDFEnvelope* a, double val) -> double { return a->centralPDF = val; });

    DEBUG_MSG("Adding errplusPDF methods  to provide read access to the field errplusPDF (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:24
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errplusPDF
    t.method("errplusPDF", [](const Pythia8::PDF::PDFEnvelope& a) -> double { return a.errplusPDF; });
    t.method("errplusPDF", [](Pythia8::PDF::PDFEnvelope& a) -> double { return a.errplusPDF; });
    t.method("errplusPDF", [](const Pythia8::PDF::PDFEnvelope* a) -> double { return a->errplusPDF; });
    t.method("errplusPDF", [](Pythia8::PDF::PDFEnvelope* a) -> double { return a->errplusPDF; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:24
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errplusPDF
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding errplusPDF! methods to provide write access to the field errplusPDF (" __HERE__ ")");
    t.method("errplusPDF!", [](Pythia8::PDF::PDFEnvelope& a, double val) -> double { return a.errplusPDF = val; });

    DEBUG_MSG("Adding errplusPDF! methods to provide write access to the field errplusPDF (" __HERE__ ")");
    t.method("errplusPDF!", [](Pythia8::PDF::PDFEnvelope* a, double val) -> double { return a->errplusPDF = val; });

    DEBUG_MSG("Adding errminusPDF methods  to provide read access to the field errminusPDF (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:36
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errminusPDF
    t.method("errminusPDF", [](const Pythia8::PDF::PDFEnvelope& a) -> double { return a.errminusPDF; });
    t.method("errminusPDF", [](Pythia8::PDF::PDFEnvelope& a) -> double { return a.errminusPDF; });
    t.method("errminusPDF", [](const Pythia8::PDF::PDFEnvelope* a) -> double { return a->errminusPDF; });
    t.method("errminusPDF", [](Pythia8::PDF::PDFEnvelope* a) -> double { return a->errminusPDF; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:36
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errminusPDF
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding errminusPDF! methods to provide write access to the field errminusPDF (" __HERE__ ")");
    t.method("errminusPDF!", [](Pythia8::PDF::PDFEnvelope& a, double val) -> double { return a.errminusPDF = val; });

    DEBUG_MSG("Adding errminusPDF! methods to provide write access to the field errminusPDF (" __HERE__ ")");
    t.method("errminusPDF!", [](Pythia8::PDF::PDFEnvelope* a, double val) -> double { return a->errminusPDF = val; });

    DEBUG_MSG("Adding errsymmPDF methods  to provide read access to the field errsymmPDF (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:49
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errsymmPDF
    t.method("errsymmPDF", [](const Pythia8::PDF::PDFEnvelope& a) -> double { return a.errsymmPDF; });
    t.method("errsymmPDF", [](Pythia8::PDF::PDFEnvelope& a) -> double { return a.errsymmPDF; });
    t.method("errsymmPDF", [](const Pythia8::PDF::PDFEnvelope* a) -> double { return a->errsymmPDF; });
    t.method("errsymmPDF", [](Pythia8::PDF::PDFEnvelope* a) -> double { return a->errsymmPDF; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:49
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::errsymmPDF
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding errsymmPDF! methods to provide write access to the field errsymmPDF (" __HERE__ ")");
    t.method("errsymmPDF!", [](Pythia8::PDF::PDFEnvelope& a, double val) -> double { return a.errsymmPDF = val; });

    DEBUG_MSG("Adding errsymmPDF! methods to provide write access to the field errsymmPDF (" __HERE__ ")");
    t.method("errsymmPDF!", [](Pythia8::PDF::PDFEnvelope* a, double val) -> double { return a->errsymmPDF = val; });

    DEBUG_MSG("Adding scalePDF methods  to provide read access to the field scalePDF (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:61
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::scalePDF
    t.method("scalePDF", [](const Pythia8::PDF::PDFEnvelope& a) -> double { return a.scalePDF; });
    t.method("scalePDF", [](Pythia8::PDF::PDFEnvelope& a) -> double { return a.scalePDF; });
    t.method("scalePDF", [](const Pythia8::PDF::PDFEnvelope* a) -> double { return a->scalePDF; });
    t.method("scalePDF", [](Pythia8::PDF::PDFEnvelope* a) -> double { return a->scalePDF; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:103:61
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::scalePDF
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding scalePDF! methods to provide write access to the field scalePDF (" __HERE__ ")");
    t.method("scalePDF!", [](Pythia8::PDF::PDFEnvelope& a, double val) -> double { return a.scalePDF = val; });

    DEBUG_MSG("Adding scalePDF! methods to provide write access to the field scalePDF (" __HERE__ ")");
    t.method("scalePDF!", [](Pythia8::PDF::PDFEnvelope* a, double val) -> double { return a->scalePDF = val; });

    DEBUG_MSG("Adding pdfMemberVars methods  to provide read access to the field pdfMemberVars (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:104:20
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::pdfMemberVars
    t.method("pdfMemberVars", [](const Pythia8::PDF::PDFEnvelope& a) -> const std::vector<double>& { return a.pdfMemberVars; });
    t.method("pdfMemberVars", [](Pythia8::PDF::PDFEnvelope& a) -> std::vector<double>& { return a.pdfMemberVars; });
    t.method("pdfMemberVars", [](const Pythia8::PDF::PDFEnvelope* a) -> const std::vector<double>& { return a->pdfMemberVars; });
    t.method("pdfMemberVars", [](Pythia8::PDF::PDFEnvelope* a) -> std::vector<double>& { return a->pdfMemberVars; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonDistributions.h:104:20
    // signature to use in the veto list: Pythia8::PDF::PDFEnvelope::pdfMemberVars
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pdfMemberVars! methods to provide write access to the field pdfMemberVars (" __HERE__ ")");
    t.method("pdfMemberVars!", [](Pythia8::PDF::PDFEnvelope& a, const std::vector<double>& val) -> std::vector<double>& { return a.pdfMemberVars = val; });

    DEBUG_MSG("Adding pdfMemberVars! methods to provide write access to the field pdfMemberVars (" __HERE__ ")");
    t.method("pdfMemberVars!", [](Pythia8::PDF::PDFEnvelope* a, const std::vector<double>& val) -> std::vector<double>& { return a->pdfMemberVars = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PDF::PDFEnvelope>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_PDF_PDFEnvelope(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_PDF_PDFEnvelope(module));
}
