// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8UserHooks> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8UserHooks> : std::false_type { };
template<> struct SuperType<Pythia8UserHooks> { typedef Pythia8::UserHooks type; };
}

// Class generating the wrapper for type Pythia8UserHooks
// signature to use in the veto file: Pythia8UserHooks
struct JlPythia8UserHooks: public Wrapper {

  JlPythia8UserHooks(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8UserHooks (" __HERE__ ")");
    // defined in ./cpp/Pythia8Wrap.h:18:7
    jlcxx::TypeWrapper<Pythia8UserHooks>  t = jlModule.add_type<Pythia8UserHooks>("Pythia8UserHooks",
      jlcxx::julia_base_type<Pythia8::UserHooks>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8UserHooks>>(new jlcxx::TypeWrapper<Pythia8UserHooks>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for std::shared_ptr<Pythia8::UserHooks> Pythia8UserHooks::make_shared() (" __HERE__ ")");
    // signature to use in the veto list: std::shared_ptr<Pythia8::UserHooks> Pythia8UserHooks::make_shared()
    // defined in ./cpp/Pythia8Wrap.h:20:17
    module_.method("Pythia8UserHooks!make_shared", static_cast<std::shared_ptr<Pythia8::UserHooks> (*)() >(&Pythia8UserHooks::make_shared));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::initAfterBeams() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::initAfterBeams()
    // defined in ./cpp/Pythia8Wrap.h:24:18
    t.method("initAfterBeams", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::initAfterBeams));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canModifySigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canModifySigma()
    // defined in ./cpp/Pythia8Wrap.h:25:18
    t.method("canModifySigma", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canModifySigma));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)
    // defined in ./cpp/Pythia8Wrap.h:26:20
    t.method("multiplySigmaBy", static_cast<double (Pythia8UserHooks::*)(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) >(&Pythia8UserHooks::multiplySigmaBy));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canBiasSelection() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canBiasSelection()
    // defined in ./cpp/Pythia8Wrap.h:27:18
    t.method("canBiasSelection", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canBiasSelection));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::biasSelectionBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::biasSelectionBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)
    // defined in ./cpp/Pythia8Wrap.h:28:20
    t.method("biasSelectionBy", static_cast<double (Pythia8UserHooks::*)(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) >(&Pythia8UserHooks::biasSelectionBy));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::biasedSelectionWeight() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::biasedSelectionWeight()
    // defined in ./cpp/Pythia8Wrap.h:29:20
    t.method("biasedSelectionWeight", static_cast<double (Pythia8UserHooks::*)() >(&Pythia8UserHooks::biasedSelectionWeight));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoProcessLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoProcessLevel()
    // defined in ./cpp/Pythia8Wrap.h:30:18
    t.method("canVetoProcessLevel", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoProcessLevel(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoProcessLevel(Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:31:18
    t.method("doVetoProcessLevel", static_cast<bool (Pythia8UserHooks::*)(Pythia8::Event &) >(&Pythia8UserHooks::doVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canSetLowEnergySigma(int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canSetLowEnergySigma(int, int)
    // defined in ./cpp/Pythia8Wrap.h:32:18
    t.method("canSetLowEnergySigma", static_cast<bool (Pythia8UserHooks::*)(int, int)  const>(&Pythia8UserHooks::canSetLowEnergySigma));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::doSetLowEnergySigma(int, int, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::doSetLowEnergySigma(int, int, double, double, double)
    // defined in ./cpp/Pythia8Wrap.h:33:20
    t.method("doSetLowEnergySigma", static_cast<double (Pythia8UserHooks::*)(int, int, double, double, double)  const>(&Pythia8UserHooks::doSetLowEnergySigma));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoResonanceDecays() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoResonanceDecays()
    // defined in ./cpp/Pythia8Wrap.h:34:18
    t.method("canVetoResonanceDecays", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoResonanceDecays(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoResonanceDecays(Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:35:18
    t.method("doVetoResonanceDecays", static_cast<bool (Pythia8UserHooks::*)(Pythia8::Event &) >(&Pythia8UserHooks::doVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoPT() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoPT()
    // defined in ./cpp/Pythia8Wrap.h:36:18
    t.method("canVetoPT", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoPT));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::scaleVetoPT() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::scaleVetoPT()
    // defined in ./cpp/Pythia8Wrap.h:37:20
    t.method("scaleVetoPT", static_cast<double (Pythia8UserHooks::*)() >(&Pythia8UserHooks::scaleVetoPT));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoPT(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoPT(int, const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:38:18
    t.method("doVetoPT", static_cast<bool (Pythia8UserHooks::*)(int, const Pythia8::Event &) >(&Pythia8UserHooks::doVetoPT));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoStep() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoStep()
    // defined in ./cpp/Pythia8Wrap.h:39:18
    t.method("canVetoStep", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoStep));

    DEBUG_MSG("Adding wrapper for int Pythia8UserHooks::numberVetoStep() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8UserHooks::numberVetoStep()
    // defined in ./cpp/Pythia8Wrap.h:40:17
    t.method("numberVetoStep", static_cast<int (Pythia8UserHooks::*)() >(&Pythia8UserHooks::numberVetoStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoStep(int, int, int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoStep(int, int, int, const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:41:18
    t.method("doVetoStep", static_cast<bool (Pythia8UserHooks::*)(int, int, int, const Pythia8::Event &) >(&Pythia8UserHooks::doVetoStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoMPIStep() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoMPIStep()
    // defined in ./cpp/Pythia8Wrap.h:42:18
    t.method("canVetoMPIStep", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoMPIStep));

    DEBUG_MSG("Adding wrapper for int Pythia8UserHooks::numberVetoMPIStep() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8UserHooks::numberVetoMPIStep()
    // defined in ./cpp/Pythia8Wrap.h:43:17
    t.method("numberVetoMPIStep", static_cast<int (Pythia8UserHooks::*)() >(&Pythia8UserHooks::numberVetoMPIStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoMPIStep(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoMPIStep(int, const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:44:18
    t.method("doVetoMPIStep", static_cast<bool (Pythia8UserHooks::*)(int, const Pythia8::Event &) >(&Pythia8UserHooks::doVetoMPIStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoPartonLevelEarly() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoPartonLevelEarly()
    // defined in ./cpp/Pythia8Wrap.h:45:18
    t.method("canVetoPartonLevelEarly", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoPartonLevelEarly(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoPartonLevelEarly(const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:46:18
    t.method("doVetoPartonLevelEarly", static_cast<bool (Pythia8UserHooks::*)(const Pythia8::Event &) >(&Pythia8UserHooks::doVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::retryPartonLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::retryPartonLevel()
    // defined in ./cpp/Pythia8Wrap.h:47:18
    t.method("retryPartonLevel", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::retryPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoPartonLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoPartonLevel()
    // defined in ./cpp/Pythia8Wrap.h:48:18
    t.method("canVetoPartonLevel", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoPartonLevel(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoPartonLevel(const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:49:18
    t.method("doVetoPartonLevel", static_cast<bool (Pythia8UserHooks::*)(const Pythia8::Event &) >(&Pythia8UserHooks::doVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canSetResonanceScale() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canSetResonanceScale()
    // defined in ./cpp/Pythia8Wrap.h:50:18
    t.method("canSetResonanceScale", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canSetResonanceScale));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::scaleResonance(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::scaleResonance(int, const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:51:20
    t.method("scaleResonance", static_cast<double (Pythia8UserHooks::*)(int, const Pythia8::Event &) >(&Pythia8UserHooks::scaleResonance));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoISREmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoISREmission()
    // defined in ./cpp/Pythia8Wrap.h:52:18
    t.method("canVetoISREmission", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoISREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoISREmission(int, const Pythia8::Event &, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoISREmission(int, const Pythia8::Event &, int)
    // defined in ./cpp/Pythia8Wrap.h:53:18
    t.method("doVetoISREmission", static_cast<bool (Pythia8UserHooks::*)(int, const Pythia8::Event &, int) >(&Pythia8UserHooks::doVetoISREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoFSREmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoFSREmission()
    // defined in ./cpp/Pythia8Wrap.h:54:18
    t.method("canVetoFSREmission", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoFSREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoFSREmission(int, const Pythia8::Event &, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoFSREmission(int, const Pythia8::Event &, int, bool)
    // defined in ./cpp/Pythia8Wrap.h:55:18
    t.method("doVetoFSREmission", static_cast<bool (Pythia8UserHooks::*)(int, const Pythia8::Event &, int, bool) >(&Pythia8UserHooks::doVetoFSREmission));
    t.method("doVetoFSREmission", [](Pythia8UserHooks& a, int arg0, const Pythia8::Event & arg1, int arg2)->bool { return a.doVetoFSREmission(arg0, arg1, arg2); });
    t.method("doVetoFSREmission", [](Pythia8UserHooks* a, int arg0, const Pythia8::Event & arg1, int arg2)->bool { return a->doVetoFSREmission(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoMPIEmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoMPIEmission()
    // defined in ./cpp/Pythia8Wrap.h:56:18
    t.method("canVetoMPIEmission", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoMPIEmission(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoMPIEmission(int, const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:57:18
    t.method("doVetoMPIEmission", static_cast<bool (Pythia8UserHooks::*)(int, const Pythia8::Event &) >(&Pythia8UserHooks::doVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canReconnectResonanceSystems() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canReconnectResonanceSystems()
    // defined in ./cpp/Pythia8Wrap.h:58:18
    t.method("canReconnectResonanceSystems", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doReconnectResonanceSystems(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doReconnectResonanceSystems(int, Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:59:18
    t.method("doReconnectResonanceSystems", static_cast<bool (Pythia8UserHooks::*)(int, Pythia8::Event &) >(&Pythia8UserHooks::doReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canChangeFragPar() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canChangeFragPar()
    // defined in ./cpp/Pythia8Wrap.h:60:18
    t.method("canChangeFragPar", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canChangeFragPar));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::setStringEnds(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::setStringEnds(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>)
    // defined in ./cpp/Pythia8Wrap.h:61:18
    t.method("setStringEnds", static_cast<void (Pythia8UserHooks::*)(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>) >(&Pythia8UserHooks::setStringEnds));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doChangeFragPar(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doChangeFragPar(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *)
    // defined in ./cpp/Pythia8Wrap.h:62:18
    t.method("doChangeFragPar", static_cast<bool (Pythia8UserHooks::*)(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *) >(&Pythia8UserHooks::doChangeFragPar));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoFragmentation(Pythia8::Particle, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoFragmentation(Pythia8::Particle, const Pythia8::StringEnd *)
    // defined in ./cpp/Pythia8Wrap.h:63:18
    t.method("doVetoFragmentation", static_cast<bool (Pythia8UserHooks::*)(Pythia8::Particle, const Pythia8::StringEnd *) >(&Pythia8UserHooks::doVetoFragmentation));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoFragmentation(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoFragmentation(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *)
    // defined in ./cpp/Pythia8Wrap.h:64:18
    t.method("doVetoFragmentation", static_cast<bool (Pythia8UserHooks::*)(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *) >(&Pythia8UserHooks::doVetoFragmentation));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canVetoAfterHadronization() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canVetoAfterHadronization()
    // defined in ./cpp/Pythia8Wrap.h:65:18
    t.method("canVetoAfterHadronization", static_cast<bool (Pythia8UserHooks::*)() >(&Pythia8UserHooks::canVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::doVetoAfterHadronization(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::doVetoAfterHadronization(const Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:66:18
    t.method("doVetoAfterHadronization", static_cast<bool (Pythia8UserHooks::*)(const Pythia8::Event &) >(&Pythia8UserHooks::doVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::canSetImpactParameter() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::canSetImpactParameter()
    // defined in ./cpp/Pythia8Wrap.h:67:18
    t.method("canSetImpactParameter", static_cast<bool (Pythia8UserHooks::*)()  const>(&Pythia8UserHooks::canSetImpactParameter));

    DEBUG_MSG("Adding wrapper for double Pythia8UserHooks::doSetImpactParameter() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8UserHooks::doSetImpactParameter()
    // defined in ./cpp/Pythia8Wrap.h:68:20
    t.method("doSetImpactParameter", static_cast<double (Pythia8UserHooks::*)() >(&Pythia8UserHooks::doSetImpactParameter));

    DEBUG_MSG("Adding wrapper for bool Pythia8UserHooks::onEndHadronLevel(Pythia8::HadronLevel &, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8UserHooks::onEndHadronLevel(Pythia8::HadronLevel &, Pythia8::Event &)
    // defined in ./cpp/Pythia8Wrap.h:69:18
    t.method("onEndHadronLevel", static_cast<bool (Pythia8UserHooks::*)(Pythia8::HadronLevel &, Pythia8::Event &) >(&Pythia8UserHooks::onEndHadronLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_initAfterBeams(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_initAfterBeams(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:71:10
    t.method("set_initAfterBeams", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_initAfterBeams));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canModifySigma(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canModifySigma(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:72:10
    t.method("set_canModifySigma", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canModifySigma));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_multiplySigmaBy(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_multiplySigmaBy(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool))
    // defined in ./cpp/Pythia8Wrap.h:73:10
    t.method("set_multiplySigmaBy", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)) >(&Pythia8UserHooks::set_multiplySigmaBy));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canBiasSelection(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canBiasSelection(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:74:10
    t.method("set_canBiasSelection", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canBiasSelection));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_biasSelectionBy(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_biasSelectionBy(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool))
    // defined in ./cpp/Pythia8Wrap.h:75:10
    t.method("set_biasSelectionBy", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *, const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)) >(&Pythia8UserHooks::set_biasSelectionBy));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_biasedSelectionWeight(void *, double (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_biasedSelectionWeight(void *, double (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:76:10
    t.method("set_biasedSelectionWeight", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *)) >(&Pythia8UserHooks::set_biasedSelectionWeight));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoProcessLevel(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoProcessLevel(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:77:10
    t.method("set_canVetoProcessLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoProcessLevel(void *, bool (*)(void *, Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoProcessLevel(void *, bool (*)(void *, Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:78:10
    t.method("set_doVetoProcessLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canSetLowEnergySigma(void *, bool (*)(void *, int, int)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canSetLowEnergySigma(void *, bool (*)(void *, int, int))
    // defined in ./cpp/Pythia8Wrap.h:79:10
    t.method("set_canSetLowEnergySigma", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, int)) >(&Pythia8UserHooks::set_canSetLowEnergySigma));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doSetLowEnergySigma(void *, double (*)(void *, int, int, double, double, double)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doSetLowEnergySigma(void *, double (*)(void *, int, int, double, double, double))
    // defined in ./cpp/Pythia8Wrap.h:80:10
    t.method("set_doSetLowEnergySigma", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *, int, int, double, double, double)) >(&Pythia8UserHooks::set_doSetLowEnergySigma));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoResonanceDecays(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoResonanceDecays(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:81:10
    t.method("set_canVetoResonanceDecays", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoResonanceDecays(void *, bool (*)(void *, Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoResonanceDecays(void *, bool (*)(void *, Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:82:10
    t.method("set_doVetoResonanceDecays", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoPT(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoPT(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:83:10
    t.method("set_canVetoPT", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoPT));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_scaleVetoPT(void *, double (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_scaleVetoPT(void *, double (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:84:10
    t.method("set_scaleVetoPT", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *)) >(&Pythia8UserHooks::set_scaleVetoPT));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoPT(void *, bool (*)(void *, int, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoPT(void *, bool (*)(void *, int, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:85:10
    t.method("set_doVetoPT", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoPT));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoStep(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoStep(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:86:10
    t.method("set_canVetoStep", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_numberVetoStep(void *, int (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_numberVetoStep(void *, int (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:87:10
    t.method("set_numberVetoStep", static_cast<void (Pythia8UserHooks::*)(void *, int (*)(void *)) >(&Pythia8UserHooks::set_numberVetoStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoStep(void *, bool (*)(void *, int, int, int, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoStep(void *, bool (*)(void *, int, int, int, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:88:10
    t.method("set_doVetoStep", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, int, int, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoMPIStep(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoMPIStep(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:89:10
    t.method("set_canVetoMPIStep", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoMPIStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_numberVetoMPIStep(void *, int (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_numberVetoMPIStep(void *, int (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:90:10
    t.method("set_numberVetoMPIStep", static_cast<void (Pythia8UserHooks::*)(void *, int (*)(void *)) >(&Pythia8UserHooks::set_numberVetoMPIStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoMPIStep(void *, bool (*)(void *, int, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoMPIStep(void *, bool (*)(void *, int, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:91:10
    t.method("set_doVetoMPIStep", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoMPIStep));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoPartonLevelEarly(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoPartonLevelEarly(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:92:10
    t.method("set_canVetoPartonLevelEarly", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoPartonLevelEarly(void *, bool (*)(void *, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoPartonLevelEarly(void *, bool (*)(void *, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:93:10
    t.method("set_doVetoPartonLevelEarly", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_retryPartonLevel(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_retryPartonLevel(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:94:10
    t.method("set_retryPartonLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_retryPartonLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoPartonLevel(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoPartonLevel(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:95:10
    t.method("set_canVetoPartonLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoPartonLevel(void *, bool (*)(void *, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoPartonLevel(void *, bool (*)(void *, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:96:10
    t.method("set_doVetoPartonLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canSetResonanceScale(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canSetResonanceScale(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:97:10
    t.method("set_canSetResonanceScale", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canSetResonanceScale));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_scaleResonance(void *, double (*)(void *, int, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_scaleResonance(void *, double (*)(void *, int, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:98:10
    t.method("set_scaleResonance", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *, int, const Pythia8::Event &)) >(&Pythia8UserHooks::set_scaleResonance));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoISREmission(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoISREmission(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:99:10
    t.method("set_canVetoISREmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoISREmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoISREmission(void *, bool (*)(void *, int, const Pythia8::Event &, int)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoISREmission(void *, bool (*)(void *, int, const Pythia8::Event &, int))
    // defined in ./cpp/Pythia8Wrap.h:100:10
    t.method("set_doVetoISREmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, const Pythia8::Event &, int)) >(&Pythia8UserHooks::set_doVetoISREmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoFSREmission(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoFSREmission(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:101:10
    t.method("set_canVetoFSREmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoFSREmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoFSREmission(void *, bool (*)(void *, int, const Pythia8::Event &, int, bool)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoFSREmission(void *, bool (*)(void *, int, const Pythia8::Event &, int, bool))
    // defined in ./cpp/Pythia8Wrap.h:102:10
    t.method("set_doVetoFSREmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, const Pythia8::Event &, int, bool)) >(&Pythia8UserHooks::set_doVetoFSREmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoMPIEmission(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoMPIEmission(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:103:10
    t.method("set_canVetoMPIEmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoMPIEmission(void *, bool (*)(void *, int, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoMPIEmission(void *, bool (*)(void *, int, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:104:10
    t.method("set_doVetoMPIEmission", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canReconnectResonanceSystems(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canReconnectResonanceSystems(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:105:10
    t.method("set_canReconnectResonanceSystems", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doReconnectResonanceSystems(void *, bool (*)(void *, int, Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doReconnectResonanceSystems(void *, bool (*)(void *, int, Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:106:10
    t.method("set_doReconnectResonanceSystems", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, int, Pythia8::Event &)) >(&Pythia8UserHooks::set_doReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canChangeFragPar(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canChangeFragPar(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:107:10
    t.method("set_canChangeFragPar", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canChangeFragPar));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_setStringEnds(void *, void (*)(void *, const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_setStringEnds(void *, void (*)(void *, const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>))
    // defined in ./cpp/Pythia8Wrap.h:108:10
    t.method("set_setStringEnds", static_cast<void (Pythia8UserHooks::*)(void *, void (*)(void *, const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>)) >(&Pythia8UserHooks::set_setStringEnds));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doChangeFragPar(void *, bool (*)(void *, Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doChangeFragPar(void *, bool (*)(void *, Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *))
    // defined in ./cpp/Pythia8Wrap.h:109:10
    t.method("set_doChangeFragPar", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *)) >(&Pythia8UserHooks::set_doChangeFragPar));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoFragmentation1(void *, bool (*)(void *, Pythia8::Particle, const Pythia8::StringEnd *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoFragmentation1(void *, bool (*)(void *, Pythia8::Particle, const Pythia8::StringEnd *))
    // defined in ./cpp/Pythia8Wrap.h:110:10
    t.method("set_doVetoFragmentation1", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::Particle, const Pythia8::StringEnd *)) >(&Pythia8UserHooks::set_doVetoFragmentation1));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoFragmentation2(void *, bool (*)(void *, Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoFragmentation2(void *, bool (*)(void *, Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *))
    // defined in ./cpp/Pythia8Wrap.h:111:10
    t.method("set_doVetoFragmentation2", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *)) >(&Pythia8UserHooks::set_doVetoFragmentation2));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canVetoAfterHadronization(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canVetoAfterHadronization(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:112:10
    t.method("set_canVetoAfterHadronization", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doVetoAfterHadronization(void *, bool (*)(void *, const Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doVetoAfterHadronization(void *, bool (*)(void *, const Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:113:10
    t.method("set_doVetoAfterHadronization", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, const Pythia8::Event &)) >(&Pythia8UserHooks::set_doVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_canSetImpactParameter(void *, bool (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_canSetImpactParameter(void *, bool (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:114:10
    t.method("set_canSetImpactParameter", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *)) >(&Pythia8UserHooks::set_canSetImpactParameter));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_doSetImpactParameter(void *, double (*)(void *)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_doSetImpactParameter(void *, double (*)(void *))
    // defined in ./cpp/Pythia8Wrap.h:115:10
    t.method("set_doSetImpactParameter", static_cast<void (Pythia8UserHooks::*)(void *, double (*)(void *)) >(&Pythia8UserHooks::set_doSetImpactParameter));

    DEBUG_MSG("Adding wrapper for void Pythia8UserHooks::set_onEndHadronLevel(void *, bool (*)(void *, Pythia8::HadronLevel &, Pythia8::Event &)) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8UserHooks::set_onEndHadronLevel(void *, bool (*)(void *, Pythia8::HadronLevel &, Pythia8::Event &))
    // defined in ./cpp/Pythia8Wrap.h:116:10
    t.method("set_onEndHadronLevel", static_cast<void (Pythia8UserHooks::*)(void *, bool (*)(void *, Pythia8::HadronLevel &, Pythia8::Event &)) >(&Pythia8UserHooks::set_onEndHadronLevel));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8UserHooks>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8UserHooks(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8UserHooks(module));
}
