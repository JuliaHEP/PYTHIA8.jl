// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::HistPlot> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::HistPlot> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::HistPlot
// signature to use in the veto file: Pythia8::HistPlot
struct JlPythia8_HistPlot: public Wrapper {

  JlPythia8_HistPlot(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::HistPlot (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:739:7
    jlcxx::TypeWrapper<Pythia8::HistPlot>  t = jlModule.add_type<Pythia8::HistPlot>("Pythia8!HistPlot");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::HistPlot>>(new jlcxx::TypeWrapper<Pythia8::HistPlot>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::HistPlot(std::string, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:744:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::frame(std::string, std::string, std::string, std::string, double, double) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::frame(std::string, std::string, std::string, std::string, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:755:8
    t.method("frame", static_cast<void (Pythia8::HistPlot::*)(std::string, std::string, std::string, std::string, double, double) >(&Pythia8::HistPlot::frame));
    t.method("frame", [](Pythia8::HistPlot& a, std::string arg0)->void { a.frame(arg0); });
    t.method("frame", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1)->void { a.frame(arg0, arg1); });
    t.method("frame", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1, std::string arg2)->void { a.frame(arg0, arg1, arg2); });
    t.method("frame", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1, std::string arg2, std::string arg3)->void { a.frame(arg0, arg1, arg2, arg3); });
    t.method("frame", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1, std::string arg2, std::string arg3, double arg4)->void { a.frame(arg0, arg1, arg2, arg3, arg4); });
    t.method("frame", [](Pythia8::HistPlot* a, std::string arg0)->void { a->frame(arg0); });
    t.method("frame", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1)->void { a->frame(arg0, arg1); });
    t.method("frame", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1, std::string arg2)->void { a->frame(arg0, arg1, arg2); });
    t.method("frame", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1, std::string arg2, std::string arg3)->void { a->frame(arg0, arg1, arg2, arg3); });
    t.method("frame", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1, std::string arg2, std::string arg3, double arg4)->void { a->frame(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::add(const Pythia8::Hist &, std::string, std::string) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::add(const Pythia8::Hist &, std::string, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:763:8
    t.method("add", static_cast<void (Pythia8::HistPlot::*)(const Pythia8::Hist &, std::string, std::string) >(&Pythia8::HistPlot::add));
    t.method("add", [](Pythia8::HistPlot& a, const Pythia8::Hist & arg0)->void { a.add(arg0); });
    t.method("add", [](Pythia8::HistPlot& a, const Pythia8::Hist & arg0, std::string arg1)->void { a.add(arg0, arg1); });
    t.method("add", [](Pythia8::HistPlot* a, const Pythia8::Hist & arg0)->void { a->add(arg0); });
    t.method("add", [](Pythia8::HistPlot* a, const Pythia8::Hist & arg0, std::string arg1)->void { a->add(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::addFile(std::string, std::string, std::string, std::string) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::addFile(std::string, std::string, std::string, std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:773:8
    t.method("addFile", static_cast<void (Pythia8::HistPlot::*)(std::string, std::string, std::string, std::string) >(&Pythia8::HistPlot::addFile));
    t.method("addFile", [](Pythia8::HistPlot& a, std::string arg0)->void { a.addFile(arg0); });
    t.method("addFile", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1)->void { a.addFile(arg0, arg1); });
    t.method("addFile", [](Pythia8::HistPlot& a, std::string arg0, std::string arg1, std::string arg2)->void { a.addFile(arg0, arg1, arg2); });
    t.method("addFile", [](Pythia8::HistPlot* a, std::string arg0)->void { a->addFile(arg0); });
    t.method("addFile", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1)->void { a->addFile(arg0, arg1); });
    t.method("addFile", [](Pythia8::HistPlot* a, std::string arg0, std::string arg1, std::string arg2)->void { a->addFile(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::plot(bool, bool, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::plot(bool, bool, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:779:8
    t.method("plot", static_cast<void (Pythia8::HistPlot::*)(bool, bool, bool) >(&Pythia8::HistPlot::plot));
    t.method("plot", [](Pythia8::HistPlot& a)->void { a.plot(); });
    t.method("plot", [](Pythia8::HistPlot& a, bool arg0)->void { a.plot(arg0); });
    t.method("plot", [](Pythia8::HistPlot& a, bool arg0, bool arg1)->void { a.plot(arg0, arg1); });
    t.method("plot", [](Pythia8::HistPlot* a)->void { a->plot(); });
    t.method("plot", [](Pythia8::HistPlot* a, bool arg0)->void { a->plot(arg0); });
    t.method("plot", [](Pythia8::HistPlot* a, bool arg0, bool arg1)->void { a->plot(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::plot(double, double, double, double, bool, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::plot(double, double, double, double, bool, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:780:8
    t.method("plot", static_cast<void (Pythia8::HistPlot::*)(double, double, double, double, bool, bool) >(&Pythia8::HistPlot::plot));
    t.method("plot", [](Pythia8::HistPlot& a, double arg0, double arg1, double arg2, double arg3)->void { a.plot(arg0, arg1, arg2, arg3); });
    t.method("plot", [](Pythia8::HistPlot& a, double arg0, double arg1, double arg2, double arg3, bool arg4)->void { a.plot(arg0, arg1, arg2, arg3, arg4); });
    t.method("plot", [](Pythia8::HistPlot* a, double arg0, double arg1, double arg2, double arg3)->void { a->plot(arg0, arg1, arg2, arg3); });
    t.method("plot", [](Pythia8::HistPlot* a, double arg0, double arg1, double arg2, double arg3, bool arg4)->void { a->plot(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for void Pythia8::HistPlot::plotFrame(std::string, const Pythia8::Hist &, std::string, std::string, std::string, std::string, std::string, bool) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::HistPlot::plotFrame(std::string, const Pythia8::Hist &, std::string, std::string, std::string, std::string, std::string, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Basics.h:786:8
    t.method("plotFrame", static_cast<void (Pythia8::HistPlot::*)(std::string, const Pythia8::Hist &, std::string, std::string, std::string, std::string, std::string, bool) >(&Pythia8::HistPlot::plotFrame));
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1)->void { a.plotFrame(arg0, arg1); });
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2)->void { a.plotFrame(arg0, arg1, arg2); });
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3)->void { a.plotFrame(arg0, arg1, arg2, arg3); });
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4)->void { a.plotFrame(arg0, arg1, arg2, arg3, arg4); });
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4, std::string arg5)->void { a.plotFrame(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("plotFrame", [](Pythia8::HistPlot& a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4, std::string arg5, std::string arg6)->void { a.plotFrame(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1)->void { a->plotFrame(arg0, arg1); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2)->void { a->plotFrame(arg0, arg1, arg2); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3)->void { a->plotFrame(arg0, arg1, arg2, arg3); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4)->void { a->plotFrame(arg0, arg1, arg2, arg3, arg4); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4, std::string arg5)->void { a->plotFrame(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("plotFrame", [](Pythia8::HistPlot* a, std::string arg0, const Pythia8::Hist & arg1, std::string arg2, std::string arg3, std::string arg4, std::string arg5, std::string arg6)->void { a->plotFrame(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::HistPlot>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_HistPlot(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_HistPlot(module));
}
