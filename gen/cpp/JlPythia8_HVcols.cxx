// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::HVcols> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::HVcols> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::HVcols
// signature to use in the veto file: Pythia8::HVcols
struct JlPythia8_HVcols: public Wrapper {

  JlPythia8_HVcols(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::HVcols (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:390:7
    jlcxx::TypeWrapper<Pythia8::HVcols>  t = jlModule.add_type<Pythia8::HVcols>("Pythia8!HVcols");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::HVcols>>(new jlcxx::TypeWrapper<Pythia8::HVcols>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::HVcols::HVcols(int, int, int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:396:3
    t.constructor<int, int, int>(/*finalize=*/true);

    DEBUG_MSG("Adding iHV methods  to provide read access to the field iHV (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:7
    // signature to use in the veto list: Pythia8::HVcols::iHV
    t.method("iHV", [](const Pythia8::HVcols& a) -> int { return a.iHV; });
    t.method("iHV", [](Pythia8::HVcols& a) -> int { return a.iHV; });
    t.method("iHV", [](const Pythia8::HVcols* a) -> int { return a->iHV; });
    t.method("iHV", [](Pythia8::HVcols* a) -> int { return a->iHV; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:7
    // signature to use in the veto list: Pythia8::HVcols::iHV
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding iHV! methods to provide write access to the field iHV (" __HERE__ ")");
    t.method("iHV!", [](Pythia8::HVcols& a, int val) -> int { return a.iHV = val; });

    DEBUG_MSG("Adding iHV! methods to provide write access to the field iHV (" __HERE__ ")");
    t.method("iHV!", [](Pythia8::HVcols* a, int val) -> int { return a->iHV = val; });

    DEBUG_MSG("Adding colHV methods  to provide read access to the field colHV (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:12
    // signature to use in the veto list: Pythia8::HVcols::colHV
    t.method("colHV", [](const Pythia8::HVcols& a) -> int { return a.colHV; });
    t.method("colHV", [](Pythia8::HVcols& a) -> int { return a.colHV; });
    t.method("colHV", [](const Pythia8::HVcols* a) -> int { return a->colHV; });
    t.method("colHV", [](Pythia8::HVcols* a) -> int { return a->colHV; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:12
    // signature to use in the veto list: Pythia8::HVcols::colHV
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding colHV! methods to provide write access to the field colHV (" __HERE__ ")");
    t.method("colHV!", [](Pythia8::HVcols& a, int val) -> int { return a.colHV = val; });

    DEBUG_MSG("Adding colHV! methods to provide write access to the field colHV (" __HERE__ ")");
    t.method("colHV!", [](Pythia8::HVcols* a, int val) -> int { return a->colHV = val; });

    DEBUG_MSG("Adding acolHV methods  to provide read access to the field acolHV (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:19
    // signature to use in the veto list: Pythia8::HVcols::acolHV
    t.method("acolHV", [](const Pythia8::HVcols& a) -> int { return a.acolHV; });
    t.method("acolHV", [](Pythia8::HVcols& a) -> int { return a.acolHV; });
    t.method("acolHV", [](const Pythia8::HVcols* a) -> int { return a->acolHV; });
    t.method("acolHV", [](Pythia8::HVcols* a) -> int { return a->acolHV; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Event.h:400:19
    // signature to use in the veto list: Pythia8::HVcols::acolHV
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding acolHV! methods to provide write access to the field acolHV (" __HERE__ ")");
    t.method("acolHV!", [](Pythia8::HVcols& a, int val) -> int { return a.acolHV = val; });

    DEBUG_MSG("Adding acolHV! methods to provide write access to the field acolHV (" __HERE__ ")");
    t.method("acolHV!", [](Pythia8::HVcols* a, int val) -> int { return a->acolHV = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::HVcols>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_HVcols(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_HVcols(module));
}
