// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::UserHooksVector> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::UserHooksVector> : std::false_type { };
template<> struct SuperType<Pythia8::UserHooksVector> { typedef Pythia8::UserHooks type; };
}

// Class generating the wrapper for type Pythia8::UserHooksVector
// signature to use in the veto file: Pythia8::UserHooksVector
struct JlPythia8_UserHooksVector: public Wrapper {

  JlPythia8_UserHooksVector(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::UserHooksVector (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:299:7
    jlcxx::TypeWrapper<Pythia8::UserHooksVector>  t = jlModule.add_type<Pythia8::UserHooksVector>("Pythia8!UserHooksVector",
      jlcxx::julia_base_type<Pythia8::UserHooks>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::UserHooksVector>>(new jlcxx::TypeWrapper<Pythia8::UserHooksVector>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::initAfterBeams() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::initAfterBeams()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:313:16
    t.method("initAfterBeams", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::initAfterBeams));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canModifySigma() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canModifySigma()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:343:16
    t.method("canModifySigma", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canModifySigma));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::multiplySigmaBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:350:18
    t.method("multiplySigmaBy", static_cast<double (Pythia8::UserHooksVector::*)(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) >(&Pythia8::UserHooksVector::multiplySigmaBy));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canBiasSelection() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canBiasSelection()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:360:16
    t.method("canBiasSelection", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canBiasSelection));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::biasSelectionBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::biasSelectionBy(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:367:18
    t.method("biasSelectionBy", static_cast<double (Pythia8::UserHooksVector::*)(const Pythia8::SigmaProcess *, const Pythia8::PhaseSpace *, bool) >(&Pythia8::UserHooksVector::biasSelectionBy));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::biasedSelectionWeight() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::biasedSelectionWeight()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:378:18
    t.method("biasedSelectionWeight", static_cast<double (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::biasedSelectionWeight));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoProcessLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoProcessLevel()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:387:16
    t.method("canVetoProcessLevel", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoProcessLevel(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoProcessLevel(Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:395:16
    t.method("doVetoProcessLevel", static_cast<bool (Pythia8::UserHooksVector::*)(Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoProcessLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoResonanceDecays() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoResonanceDecays()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:403:16
    t.method("canVetoResonanceDecays", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoResonanceDecays(Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoResonanceDecays(Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:411:16
    t.method("doVetoResonanceDecays", static_cast<bool (Pythia8::UserHooksVector::*)(Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoResonanceDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoPT() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoPT()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:420:16
    t.method("canVetoPT", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoPT));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::scaleVetoPT() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::scaleVetoPT()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:427:18
    t.method("scaleVetoPT", static_cast<double (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::scaleVetoPT));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoPT(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoPT(int, const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:438:16
    t.method("doVetoPT", static_cast<bool (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoPT));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoStep() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoStep()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:446:16
    t.method("canVetoStep", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoStep));

    DEBUG_MSG("Adding wrapper for int Pythia8::UserHooksVector::numberVetoStep() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::UserHooksVector::numberVetoStep()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:453:15
    t.method("numberVetoStep", static_cast<int (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::numberVetoStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoStep(int, int, int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoStep(int, int, int, const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:463:16
    t.method("doVetoStep", static_cast<bool (Pythia8::UserHooksVector::*)(int, int, int, const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoMPIStep() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoMPIStep()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:472:16
    t.method("canVetoMPIStep", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoMPIStep));

    DEBUG_MSG("Adding wrapper for int Pythia8::UserHooksVector::numberVetoMPIStep() (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::UserHooksVector::numberVetoMPIStep()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:479:15
    t.method("numberVetoMPIStep", static_cast<int (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::numberVetoMPIStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoMPIStep(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoMPIStep(int, const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:489:16
    t.method("doVetoMPIStep", static_cast<bool (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoMPIStep));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoPartonLevelEarly() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoPartonLevelEarly()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:498:16
    t.method("canVetoPartonLevelEarly", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoPartonLevelEarly(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoPartonLevelEarly(const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:506:16
    t.method("doVetoPartonLevelEarly", static_cast<bool (Pythia8::UserHooksVector::*)(const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoPartonLevelEarly));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::retryPartonLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::retryPartonLevel()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:516:16
    t.method("retryPartonLevel", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::retryPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoPartonLevel() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoPartonLevel()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:523:16
    t.method("canVetoPartonLevel", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoPartonLevel(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoPartonLevel(const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:531:16
    t.method("doVetoPartonLevel", static_cast<bool (Pythia8::UserHooksVector::*)(const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoPartonLevel));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canSetResonanceScale() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canSetResonanceScale()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:539:16
    t.method("canSetResonanceScale", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canSetResonanceScale));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::scaleResonance(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::scaleResonance(int, const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:548:18
    t.method("scaleResonance", static_cast<double (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &) >(&Pythia8::UserHooksVector::scaleResonance));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoISREmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoISREmission()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:557:16
    t.method("canVetoISREmission", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoISREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoISREmission(int, const Pythia8::Event &, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoISREmission(int, const Pythia8::Event &, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:567:16
    t.method("doVetoISREmission", static_cast<bool (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &, int) >(&Pythia8::UserHooksVector::doVetoISREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoFSREmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoFSREmission()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:575:16
    t.method("canVetoFSREmission", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoFSREmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoFSREmission(int, const Pythia8::Event &, int, bool) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoFSREmission(int, const Pythia8::Event &, int, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:587:16
    t.method("doVetoFSREmission", static_cast<bool (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &, int, bool) >(&Pythia8::UserHooksVector::doVetoFSREmission));
    t.method("doVetoFSREmission", [](Pythia8::UserHooksVector& a, int arg0, const Pythia8::Event & arg1, int arg2)->bool { return a.doVetoFSREmission(arg0, arg1, arg2); });
    t.method("doVetoFSREmission", [](Pythia8::UserHooksVector* a, int arg0, const Pythia8::Event & arg1, int arg2)->bool { return a->doVetoFSREmission(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoMPIEmission() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoMPIEmission()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:597:16
    t.method("canVetoMPIEmission", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoMPIEmission(int, const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoMPIEmission(int, const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:606:16
    t.method("doVetoMPIEmission", static_cast<bool (Pythia8::UserHooksVector::*)(int, const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoMPIEmission));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canReconnectResonanceSystems() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canReconnectResonanceSystems()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:615:16
    t.method("canReconnectResonanceSystems", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doReconnectResonanceSystems(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doReconnectResonanceSystems(int, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:626:16
    t.method("doReconnectResonanceSystems", static_cast<bool (Pythia8::UserHooksVector::*)(int, Pythia8::Event &) >(&Pythia8::UserHooksVector::doReconnectResonanceSystems));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canChangeFragPar() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canChangeFragPar()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:634:16
    t.method("canChangeFragPar", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canChangeFragPar));

    DEBUG_MSG("Adding wrapper for void Pythia8::UserHooksVector::setStringEnds(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::UserHooksVector::setStringEnds(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:643:16
    t.method("setStringEnds", static_cast<void (Pythia8::UserHooksVector::*)(const Pythia8::StringEnd *, const Pythia8::StringEnd *, std::vector<int>) >(&Pythia8::UserHooksVector::setStringEnds));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doChangeFragPar(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doChangeFragPar(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:652:16
    t.method("doChangeFragPar", static_cast<bool (Pythia8::UserHooksVector::*)(Pythia8::StringFlav *, Pythia8::StringZ *, Pythia8::StringPT *, int, double, std::vector<int>, const Pythia8::StringEnd *) >(&Pythia8::UserHooksVector::doChangeFragPar));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoFragmentation(Pythia8::Particle, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoFragmentation(Pythia8::Particle, const Pythia8::StringEnd *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:662:16
    t.method("doVetoFragmentation", static_cast<bool (Pythia8::UserHooksVector::*)(Pythia8::Particle, const Pythia8::StringEnd *) >(&Pythia8::UserHooksVector::doVetoFragmentation));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoFragmentation(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoFragmentation(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:669:16
    t.method("doVetoFragmentation", static_cast<bool (Pythia8::UserHooksVector::*)(Pythia8::Particle, Pythia8::Particle, const Pythia8::StringEnd *, const Pythia8::StringEnd *) >(&Pythia8::UserHooksVector::doVetoFragmentation));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canVetoAfterHadronization() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canVetoAfterHadronization()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:680:16
    t.method("canVetoAfterHadronization", static_cast<bool (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::canVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::doVetoAfterHadronization(const Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::doVetoAfterHadronization(const Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:687:16
    t.method("doVetoAfterHadronization", static_cast<bool (Pythia8::UserHooksVector::*)(const Pythia8::Event &) >(&Pythia8::UserHooksVector::doVetoAfterHadronization));

    DEBUG_MSG("Adding wrapper for bool Pythia8::UserHooksVector::canSetImpactParameter() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::UserHooksVector::canSetImpactParameter()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:695:16
    t.method("canSetImpactParameter", static_cast<bool (Pythia8::UserHooksVector::*)()  const>(&Pythia8::UserHooksVector::canSetImpactParameter));

    DEBUG_MSG("Adding wrapper for double Pythia8::UserHooksVector::doSetImpactParameter() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::UserHooksVector::doSetImpactParameter()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:702:18
    t.method("doSetImpactParameter", static_cast<double (Pythia8::UserHooksVector::*)() >(&Pythia8::UserHooksVector::doSetImpactParameter));

    DEBUG_MSG("Adding hooks methods  to provide read access to the field hooks (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:710:35
    // signature to use in the veto list: Pythia8::UserHooksVector::hooks
    t.method("hooks", [](const Pythia8::UserHooksVector& a) -> const std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a.hooks; });
    t.method("hooks", [](Pythia8::UserHooksVector& a) -> std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a.hooks; });
    t.method("hooks", [](const Pythia8::UserHooksVector* a) -> const std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a->hooks; });
    t.method("hooks", [](Pythia8::UserHooksVector* a) -> std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a->hooks; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/UserHooks.h:710:35
    // signature to use in the veto list: Pythia8::UserHooksVector::hooks
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding hooks! methods to provide write access to the field hooks (" __HERE__ ")");
    t.method("hooks!", [](Pythia8::UserHooksVector& a, const std::vector<std::shared_ptr<Pythia8::UserHooks>>& val) -> std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a.hooks = val; });

    DEBUG_MSG("Adding hooks! methods to provide write access to the field hooks (" __HERE__ ")");
    t.method("hooks!", [](Pythia8::UserHooksVector* a, const std::vector<std::shared_ptr<Pythia8::UserHooks>>& val) -> std::vector<std::shared_ptr<Pythia8::UserHooks>>& { return a->hooks = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::UserHooksVector>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_UserHooksVector(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_UserHooksVector(module));
}
