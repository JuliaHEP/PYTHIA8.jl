// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::PartonVertex> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::PartonVertex> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::PartonVertex
// signature to use in the veto file: Pythia8::PartonVertex
struct JlPythia8_PartonVertex: public Wrapper {

  JlPythia8_PartonVertex(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::PartonVertex (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:24:7
    jlcxx::TypeWrapper<Pythia8::PartonVertex>  t = jlModule.add_type<Pythia8::PartonVertex>("Pythia8!PartonVertex");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PartonVertex>>(new jlcxx::TypeWrapper<Pythia8::PartonVertex>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::init() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::init()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:37:16
    t.method("init", static_cast<void (Pythia8::PartonVertex::*)() >(&Pythia8::PartonVertex::init));

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::vertexBeam(int, std::vector<int> &, std::vector<int> &, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::vertexBeam(int, std::vector<int> &, std::vector<int> &, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:40:16
    t.method("vertexBeam", static_cast<void (Pythia8::PartonVertex::*)(int, std::vector<int> &, std::vector<int> &, Pythia8::Event &) >(&Pythia8::PartonVertex::vertexBeam));

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::vertexMPI(int, int, double, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::vertexMPI(int, int, double, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:44:16
    t.method("vertexMPI", static_cast<void (Pythia8::PartonVertex::*)(int, int, double, Pythia8::Event &) >(&Pythia8::PartonVertex::vertexMPI));

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::vertexFSR(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::vertexFSR(int, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:47:16
    t.method("vertexFSR", static_cast<void (Pythia8::PartonVertex::*)(int, Pythia8::Event &) >(&Pythia8::PartonVertex::vertexFSR));

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::vertexISR(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::vertexISR(int, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:50:16
    t.method("vertexISR", static_cast<void (Pythia8::PartonVertex::*)(int, Pythia8::Event &) >(&Pythia8::PartonVertex::vertexISR));

    DEBUG_MSG("Adding wrapper for void Pythia8::PartonVertex::vertexHadrons(int, Pythia8::Event &) (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::PartonVertex::vertexHadrons(int, Pythia8::Event &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/PartonVertex.h:53:16
    t.method("vertexHadrons", static_cast<void (Pythia8::PartonVertex::*)(int, Pythia8::Event &) >(&Pythia8::PartonVertex::vertexHadrons));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::PartonVertex>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_PartonVertex(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_PartonVertex(module));
}
