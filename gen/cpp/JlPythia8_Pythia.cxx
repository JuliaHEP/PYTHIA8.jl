// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::Pythia> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::Pythia> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::Pythia
// signature to use in the veto file: Pythia8::Pythia
struct JlPythia8_Pythia: public Wrapper {

  JlPythia8_Pythia(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::Pythia (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:71:7
    jlcxx::TypeWrapper<Pythia8::Pythia>  t = jlModule.add_type<Pythia8::Pythia>("Pythia8!Pythia");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::Pythia>>(new jlcxx::TypeWrapper<Pythia8::Pythia>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::Pythia::Pythia(std::string, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:76:3
    t.constructor<std::string>(/*finalize=*/true);
    t.constructor<std::string, bool>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::Pythia::Pythia(Pythia8::Settings &, Pythia8::ParticleData &, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:80:3
    t.constructor<Pythia8::Settings &, Pythia8::ParticleData &>(/*finalize=*/true);
    t.constructor<Pythia8::Settings &, Pythia8::ParticleData &, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::checkVersion() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::checkVersion()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:95:8
    t.method("checkVersion", static_cast<bool (Pythia8::Pythia::*)() >(&Pythia8::Pythia::checkVersion));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::readString(std::string, bool, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::readString(std::string, bool, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:98:8
    t.method("readString", static_cast<bool (Pythia8::Pythia::*)(std::string, bool, int) >(&Pythia8::Pythia::readString));
    t.method("readString", [](Pythia8::Pythia& a, std::string arg0)->bool { return a.readString(arg0); });
    t.method("readString", [](Pythia8::Pythia& a, std::string arg0, bool arg1)->bool { return a.readString(arg0, arg1); });
    t.method("readString", [](Pythia8::Pythia* a, std::string arg0)->bool { return a->readString(arg0); });
    t.method("readString", [](Pythia8::Pythia* a, std::string arg0, bool arg1)->bool { return a->readString(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::readFile(std::string, bool, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::readFile(std::string, bool, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:101:8
    t.method("readFile", static_cast<bool (Pythia8::Pythia::*)(std::string, bool, int) >(&Pythia8::Pythia::readFile));
    t.method("readFile", [](Pythia8::Pythia& a, std::string arg0)->bool { return a.readFile(arg0); });
    t.method("readFile", [](Pythia8::Pythia& a, std::string arg0, bool arg1)->bool { return a.readFile(arg0, arg1); });
    t.method("readFile", [](Pythia8::Pythia* a, std::string arg0)->bool { return a->readFile(arg0); });
    t.method("readFile", [](Pythia8::Pythia* a, std::string arg0, bool arg1)->bool { return a->readFile(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::readFile(std::string, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::readFile(std::string, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:103:8
    t.method("readFile", static_cast<bool (Pythia8::Pythia::*)(std::string, int) >(&Pythia8::Pythia::readFile));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setPDFPtr(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setPDFPtr(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:111:8
    t.method("setPDFPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr, Pythia8::PDFPtr) >(&Pythia8::Pythia::setPDFPtr));
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1)->bool { return a.setPDFPtr(arg0, arg1); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2)->bool { return a.setPDFPtr(arg0, arg1, arg2); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13); });
    t.method("setPDFPtr", [](Pythia8::Pythia& a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13, Pythia8::PDFPtr arg14)->bool { return a.setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1)->bool { return a->setPDFPtr(arg0, arg1); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2)->bool { return a->setPDFPtr(arg0, arg1, arg2); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13); });
    t.method("setPDFPtr", [](Pythia8::Pythia* a, Pythia8::PDFPtr arg0, Pythia8::PDFPtr arg1, Pythia8::PDFPtr arg2, Pythia8::PDFPtr arg3, Pythia8::PDFPtr arg4, Pythia8::PDFPtr arg5, Pythia8::PDFPtr arg6, Pythia8::PDFPtr arg7, Pythia8::PDFPtr arg8, Pythia8::PDFPtr arg9, Pythia8::PDFPtr arg10, Pythia8::PDFPtr arg11, Pythia8::PDFPtr arg12, Pythia8::PDFPtr arg13, Pythia8::PDFPtr arg14)->bool { return a->setPDFPtr(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setPDFAPtr(Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setPDFAPtr(Pythia8::PDFPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:123:8
    t.method("setPDFAPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::PDFPtr) >(&Pythia8::Pythia::setPDFAPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setPDFBPtr(Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setPDFBPtr(Pythia8::PDFPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:125:8
    t.method("setPDFBPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::PDFPtr) >(&Pythia8::Pythia::setPDFBPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setPhotonFluxPtr(Pythia8::PDFPtr, Pythia8::PDFPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setPhotonFluxPtr(Pythia8::PDFPtr, Pythia8::PDFPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:129:8
    t.method("setPhotonFluxPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::PDFPtr, Pythia8::PDFPtr) >(&Pythia8::Pythia::setPhotonFluxPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setLHAupPtr(Pythia8::LHAupPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setLHAupPtr(Pythia8::LHAupPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:133:8
    t.method("setLHAupPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::LHAupPtr) >(&Pythia8::Pythia::setLHAupPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setDecayPtr(Pythia8::DecayHandlerPtr, std::vector<int>) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setDecayPtr(Pythia8::DecayHandlerPtr, std::vector<int>)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:137:8
    t.method("setDecayPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::DecayHandlerPtr, std::vector<int>) >(&Pythia8::Pythia::setDecayPtr));
    t.method("setDecayPtr", [](Pythia8::Pythia& a, Pythia8::DecayHandlerPtr arg0)->bool { return a.setDecayPtr(arg0); });
    t.method("setDecayPtr", [](Pythia8::Pythia* a, Pythia8::DecayHandlerPtr arg0)->bool { return a->setDecayPtr(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setRndmEnginePtr(Pythia8::RndmEnginePtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setRndmEnginePtr(Pythia8::RndmEnginePtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:143:8
    t.method("setRndmEnginePtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::RndmEnginePtr) >(&Pythia8::Pythia::setRndmEnginePtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setUserHooksPtr(Pythia8::UserHooksPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setUserHooksPtr(Pythia8::UserHooksPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:147:8
    t.method("setUserHooksPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::UserHooksPtr) >(&Pythia8::Pythia::setUserHooksPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::addUserHooksPtr(Pythia8::UserHooksPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::addUserHooksPtr(Pythia8::UserHooksPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:151:8
    t.method("addUserHooksPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::UserHooksPtr) >(&Pythia8::Pythia::addUserHooksPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setMergingPtr(Pythia8::MergingPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setMergingPtr(Pythia8::MergingPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:161:8
    t.method("setMergingPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::MergingPtr) >(&Pythia8::Pythia::setMergingPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setMergingHooksPtr(Pythia8::MergingHooksPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setMergingHooksPtr(Pythia8::MergingHooksPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:165:8
    t.method("setMergingHooksPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::MergingHooksPtr) >(&Pythia8::Pythia::setMergingHooksPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setBeamShapePtr(Pythia8::BeamShapePtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setBeamShapePtr(Pythia8::BeamShapePtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:169:8
    t.method("setBeamShapePtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::BeamShapePtr) >(&Pythia8::Pythia::setBeamShapePtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setSigmaPtr(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setSigmaPtr(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:174:8
    t.method("setSigmaPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr) >(&Pythia8::Pythia::setSigmaPtr));
    t.method("setSigmaPtr", [](Pythia8::Pythia& a, Pythia8::SigmaProcessPtr arg0)->bool { return a.setSigmaPtr(arg0); });
    t.method("setSigmaPtr", [](Pythia8::Pythia* a, Pythia8::SigmaProcessPtr arg0)->bool { return a->setSigmaPtr(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::addSigmaPtr(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::addSigmaPtr(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:181:8
    t.method("addSigmaPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::SigmaProcessPtr, Pythia8::PhaseSpacePtr) >(&Pythia8::Pythia::addSigmaPtr));
    t.method("addSigmaPtr", [](Pythia8::Pythia& a, Pythia8::SigmaProcessPtr arg0)->bool { return a.addSigmaPtr(arg0); });
    t.method("addSigmaPtr", [](Pythia8::Pythia* a, Pythia8::SigmaProcessPtr arg0)->bool { return a->addSigmaPtr(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setResonancePtr(Pythia8::ResonanceWidthsPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setResonancePtr(Pythia8::ResonanceWidthsPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:187:8
    t.method("setResonancePtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::ResonanceWidthsPtr) >(&Pythia8::Pythia::setResonancePtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::addResonancePtr(Pythia8::ResonanceWidthsPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::addResonancePtr(Pythia8::ResonanceWidthsPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:192:8
    t.method("addResonancePtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::ResonanceWidthsPtr) >(&Pythia8::Pythia::addResonancePtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setShowerModelPtr(Pythia8::ShowerModelPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setShowerModelPtr(Pythia8::ShowerModelPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:196:8
    t.method("setShowerModelPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::ShowerModelPtr) >(&Pythia8::Pythia::setShowerModelPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setHeavyIonsPtr(Pythia8::HeavyIonsPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setHeavyIonsPtr(Pythia8::HeavyIonsPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:200:8
    t.method("setHeavyIonsPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::HeavyIonsPtr) >(&Pythia8::Pythia::setHeavyIonsPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setHIHooks(Pythia8::HIUserHooksPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setHIHooks(Pythia8::HIUserHooksPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:205:8
    t.method("setHIHooks", static_cast<bool (Pythia8::Pythia::*)(Pythia8::HIUserHooksPtr) >(&Pythia8::Pythia::setHIHooks));

    DEBUG_MSG("Adding wrapper for Pythia8::HeavyIonsPtr Pythia8::Pythia::getHeavyIonsPtr() (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::HeavyIonsPtr Pythia8::Pythia::getHeavyIonsPtr()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:210:16
    t.method("getHeavyIonsPtr", static_cast<Pythia8::HeavyIonsPtr (Pythia8::Pythia::*)() >(&Pythia8::Pythia::getHeavyIonsPtr));

    DEBUG_MSG("Adding wrapper for Pythia8::BeamShapePtr Pythia8::Pythia::getBeamShapePtr() (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::BeamShapePtr Pythia8::Pythia::getBeamShapePtr()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:213:16
    t.method("getBeamShapePtr", static_cast<Pythia8::BeamShapePtr (Pythia8::Pythia::*)() >(&Pythia8::Pythia::getBeamShapePtr));

    DEBUG_MSG("Adding wrapper for Pythia8::ShowerModelPtr Pythia8::Pythia::getShowerModelPtr() (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::ShowerModelPtr Pythia8::Pythia::getShowerModelPtr()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:216:18
    t.method("getShowerModelPtr", static_cast<Pythia8::ShowerModelPtr (Pythia8::Pythia::*)() >(&Pythia8::Pythia::getShowerModelPtr));

    DEBUG_MSG("Adding wrapper for Pythia8::LHAupPtr Pythia8::Pythia::getLHAupPtr() (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::LHAupPtr Pythia8::Pythia::getLHAupPtr()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:219:12
    t.method("getLHAupPtr", static_cast<Pythia8::LHAupPtr (Pythia8::Pythia::*)() >(&Pythia8::Pythia::getLHAupPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setPartonVertexPtr(Pythia8::PartonVertexPtr) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setPartonVertexPtr(Pythia8::PartonVertexPtr)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:222:8
    t.method("setPartonVertexPtr", static_cast<bool (Pythia8::Pythia::*)(Pythia8::PartonVertexPtr) >(&Pythia8::Pythia::setPartonVertexPtr));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::init() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::init()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:226:8
    t.method("init", static_cast<bool (Pythia8::Pythia::*)() >(&Pythia8::Pythia::init));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::next() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::next()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:229:8
    t.method("next", static_cast<bool (Pythia8::Pythia::*)() >(&Pythia8::Pythia::next));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::next(int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::next(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:230:8
    t.method("next", static_cast<bool (Pythia8::Pythia::*)(int) >(&Pythia8::Pythia::next));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setBeamIDs(int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setBeamIDs(int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:233:8
    t.method("setBeamIDs", static_cast<bool (Pythia8::Pythia::*)(int, int) >(&Pythia8::Pythia::setBeamIDs));
    t.method("setBeamIDs", [](Pythia8::Pythia& a, int arg0)->bool { return a.setBeamIDs(arg0); });
    t.method("setBeamIDs", [](Pythia8::Pythia* a, int arg0)->bool { return a->setBeamIDs(arg0); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setKinematics(double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setKinematics(double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:236:8
    t.method("setKinematics", static_cast<bool (Pythia8::Pythia::*)(double) >(&Pythia8::Pythia::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setKinematics(double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setKinematics(double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:237:8
    t.method("setKinematics", static_cast<bool (Pythia8::Pythia::*)(double, double) >(&Pythia8::Pythia::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setKinematics(double, double, double, double, double, double) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setKinematics(double, double, double, double, double, double)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:238:8
    t.method("setKinematics", static_cast<bool (Pythia8::Pythia::*)(double, double, double, double, double, double) >(&Pythia8::Pythia::setKinematics));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::setKinematics(Pythia8::Vec4, Pythia8::Vec4) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::setKinematics(Pythia8::Vec4, Pythia8::Vec4)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:240:8
    t.method("setKinematics", static_cast<bool (Pythia8::Pythia::*)(Pythia8::Vec4, Pythia8::Vec4) >(&Pythia8::Pythia::setKinematics));

    DEBUG_MSG("Adding wrapper for int Pythia8::Pythia::forceTimeShower(int, int, double, int) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::Pythia::forceTimeShower(int, int, double, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:243:7
    t.method("forceTimeShower", static_cast<int (Pythia8::Pythia::*)(int, int, double, int) >(&Pythia8::Pythia::forceTimeShower));
    t.method("forceTimeShower", [](Pythia8::Pythia& a, int arg0, int arg1, double arg2)->int { return a.forceTimeShower(arg0, arg1, arg2); });
    t.method("forceTimeShower", [](Pythia8::Pythia* a, int arg0, int arg1, double arg2)->int { return a->forceTimeShower(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::forceHadronLevel(bool) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::forceHadronLevel(bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:250:8
    t.method("forceHadronLevel", static_cast<bool (Pythia8::Pythia::*)(bool) >(&Pythia8::Pythia::forceHadronLevel));
    t.method("forceHadronLevel", [](Pythia8::Pythia& a)->bool { return a.forceHadronLevel(); });
    t.method("forceHadronLevel", [](Pythia8::Pythia* a)->bool { return a->forceHadronLevel(); });

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::moreDecays() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::moreDecays()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:253:8
    t.method("moreDecays", static_cast<bool (Pythia8::Pythia::*)() >(&Pythia8::Pythia::moreDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::moreDecays(int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::moreDecays(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:254:8
    t.method("moreDecays", static_cast<bool (Pythia8::Pythia::*)(int) >(&Pythia8::Pythia::moreDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::forceRHadronDecays() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::forceRHadronDecays()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:257:8
    t.method("forceRHadronDecays", static_cast<bool (Pythia8::Pythia::*)() >(&Pythia8::Pythia::forceRHadronDecays));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::doLowEnergyProcess(int, int, int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::doLowEnergyProcess(int, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:260:8
    t.method("doLowEnergyProcess", static_cast<bool (Pythia8::Pythia::*)(int, int, int) >(&Pythia8::Pythia::doLowEnergyProcess));

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaTotal() (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaTotal()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:266:10
    t.method("getSigmaTotal", static_cast<double (Pythia8::Pythia::*)() >(&Pythia8::Pythia::getSigmaTotal));

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaTotal(double, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaTotal(double, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:268:10
    t.method("getSigmaTotal", static_cast<double (Pythia8::Pythia::*)(double, int) >(&Pythia8::Pythia::getSigmaTotal));
    t.method("getSigmaTotal", [](Pythia8::Pythia& a, double arg0)->double { return a.getSigmaTotal(arg0); });
    t.method("getSigmaTotal", [](Pythia8::Pythia* a, double arg0)->double { return a->getSigmaTotal(arg0); });

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaTotal(int, int, double, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaTotal(int, int, double, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:270:10
    t.method("getSigmaTotal", static_cast<double (Pythia8::Pythia::*)(int, int, double, int) >(&Pythia8::Pythia::getSigmaTotal));
    t.method("getSigmaTotal", [](Pythia8::Pythia& a, int arg0, int arg1, double arg2)->double { return a.getSigmaTotal(arg0, arg1, arg2); });
    t.method("getSigmaTotal", [](Pythia8::Pythia* a, int arg0, int arg1, double arg2)->double { return a->getSigmaTotal(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaTotal(int, int, double, double, double, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaTotal(int, int, double, double, double, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:273:10
    t.method("getSigmaTotal", static_cast<double (Pythia8::Pythia::*)(int, int, double, double, double, int) >(&Pythia8::Pythia::getSigmaTotal));
    t.method("getSigmaTotal", [](Pythia8::Pythia& a, int arg0, int arg1, double arg2, double arg3, double arg4)->double { return a.getSigmaTotal(arg0, arg1, arg2, arg3, arg4); });
    t.method("getSigmaTotal", [](Pythia8::Pythia* a, int arg0, int arg1, double arg2, double arg3, double arg4)->double { return a->getSigmaTotal(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaPartial(int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaPartial(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:281:10
    t.method("getSigmaPartial", static_cast<double (Pythia8::Pythia::*)(int) >(&Pythia8::Pythia::getSigmaPartial));

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaPartial(double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaPartial(double, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:284:10
    t.method("getSigmaPartial", static_cast<double (Pythia8::Pythia::*)(double, int, int) >(&Pythia8::Pythia::getSigmaPartial));
    t.method("getSigmaPartial", [](Pythia8::Pythia& a, double arg0, int arg1)->double { return a.getSigmaPartial(arg0, arg1); });
    t.method("getSigmaPartial", [](Pythia8::Pythia* a, double arg0, int arg1)->double { return a->getSigmaPartial(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaPartial(int, int, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaPartial(int, int, double, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:287:10
    t.method("getSigmaPartial", static_cast<double (Pythia8::Pythia::*)(int, int, double, int, int) >(&Pythia8::Pythia::getSigmaPartial));
    t.method("getSigmaPartial", [](Pythia8::Pythia& a, int arg0, int arg1, double arg2, int arg3)->double { return a.getSigmaPartial(arg0, arg1, arg2, arg3); });
    t.method("getSigmaPartial", [](Pythia8::Pythia* a, int arg0, int arg1, double arg2, int arg3)->double { return a->getSigmaPartial(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::getSigmaPartial(int, int, double, double, double, int, int) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::getSigmaPartial(int, int, double, double, double, int, int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:290:10
    t.method("getSigmaPartial", static_cast<double (Pythia8::Pythia::*)(int, int, double, double, double, int, int) >(&Pythia8::Pythia::getSigmaPartial));
    t.method("getSigmaPartial", [](Pythia8::Pythia& a, int arg0, int arg1, double arg2, double arg3, double arg4, int arg5)->double { return a.getSigmaPartial(arg0, arg1, arg2, arg3, arg4, arg5); });
    t.method("getSigmaPartial", [](Pythia8::Pythia* a, int arg0, int arg1, double arg2, double arg3, double arg4, int arg5)->double { return a->getSigmaPartial(arg0, arg1, arg2, arg3, arg4, arg5); });

    DEBUG_MSG("Adding wrapper for Pythia8::PDFPtr Pythia8::Pythia::getPDFPtr(int, int, std::string, bool) (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::PDFPtr Pythia8::Pythia::getPDFPtr(int, int, std::string, bool)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:298:10
    t.method("getPDFPtr", static_cast<Pythia8::PDFPtr (Pythia8::Pythia::*)(int, int, std::string, bool) >(&Pythia8::Pythia::getPDFPtr));
    t.method("getPDFPtr", [](Pythia8::Pythia& a, int arg0)->Pythia8::PDFPtr { return a.getPDFPtr(arg0); });
    t.method("getPDFPtr", [](Pythia8::Pythia& a, int arg0, int arg1)->Pythia8::PDFPtr { return a.getPDFPtr(arg0, arg1); });
    t.method("getPDFPtr", [](Pythia8::Pythia& a, int arg0, int arg1, std::string arg2)->Pythia8::PDFPtr { return a.getPDFPtr(arg0, arg1, arg2); });
    t.method("getPDFPtr", [](Pythia8::Pythia* a, int arg0)->Pythia8::PDFPtr { return a->getPDFPtr(arg0); });
    t.method("getPDFPtr", [](Pythia8::Pythia* a, int arg0, int arg1)->Pythia8::PDFPtr { return a->getPDFPtr(arg0, arg1); });
    t.method("getPDFPtr", [](Pythia8::Pythia* a, int arg0, int arg1, std::string arg2)->Pythia8::PDFPtr { return a->getPDFPtr(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for void Pythia8::Pythia::LHAeventList() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::Pythia::LHAeventList()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:303:8
    t.method("LHAeventList", static_cast<void (Pythia8::Pythia::*)() >(&Pythia8::Pythia::LHAeventList));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::LHAeventSkip(int) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::LHAeventSkip(int)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:306:8
    t.method("LHAeventSkip", static_cast<bool (Pythia8::Pythia::*)(int) >(&Pythia8::Pythia::LHAeventSkip));

    DEBUG_MSG("Adding wrapper for void Pythia8::Pythia::stat() (" __HERE__ ")");
    // signature to use in the veto list: void Pythia8::Pythia::stat()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:311:8
    t.method("stat", static_cast<void (Pythia8::Pythia::*)() >(&Pythia8::Pythia::stat));

    DEBUG_MSG("Adding wrapper for bool Pythia8::Pythia::flag(std::string) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::Pythia::flag(std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:314:10
    t.method("flag", static_cast<bool (Pythia8::Pythia::*)(std::string) >(&Pythia8::Pythia::flag));

    DEBUG_MSG("Adding wrapper for int Pythia8::Pythia::mode(std::string) (" __HERE__ ")");
    // signature to use in the veto list: int Pythia8::Pythia::mode(std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:315:10
    t.method("mode", static_cast<int (Pythia8::Pythia::*)(std::string) >(&Pythia8::Pythia::mode));

    DEBUG_MSG("Adding wrapper for double Pythia8::Pythia::parm(std::string) (" __HERE__ ")");
    // signature to use in the veto list: double Pythia8::Pythia::parm(std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:316:10
    t.method("parm", static_cast<double (Pythia8::Pythia::*)(std::string) >(&Pythia8::Pythia::parm));

    DEBUG_MSG("Adding wrapper for std::string Pythia8::Pythia::word(std::string) (" __HERE__ ")");
    // signature to use in the veto list: std::string Pythia8::Pythia::word(std::string)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:317:10
    t.method("word", static_cast<std::string (Pythia8::Pythia::*)(std::string) >(&Pythia8::Pythia::word));

    DEBUG_MSG("Adding process methods  to provide read access to the field process (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:320:19
    // signature to use in the veto list: Pythia8::Pythia::process
    t.method("process", [](const Pythia8::Pythia& a) -> const Pythia8::Event& { return a.process; });
    t.method("process", [](Pythia8::Pythia& a) -> Pythia8::Event& { return a.process; });
    t.method("process", [](const Pythia8::Pythia* a) -> const Pythia8::Event& { return a->process; });
    t.method("process", [](Pythia8::Pythia* a) -> Pythia8::Event& { return a->process; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:320:19
    // signature to use in the veto list: Pythia8::Pythia::process
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding process! methods to provide write access to the field process (" __HERE__ ")");
    t.method("process!", [](Pythia8::Pythia& a, const Pythia8::Event& val) -> Pythia8::Event& { return a.process = val; });

    DEBUG_MSG("Adding process! methods to provide write access to the field process (" __HERE__ ")");
    t.method("process!", [](Pythia8::Pythia* a, const Pythia8::Event& val) -> Pythia8::Event& { return a->process = val; });

    DEBUG_MSG("Adding event methods  to provide read access to the field event (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:323:19
    // signature to use in the veto list: Pythia8::Pythia::event
    t.method("event", [](const Pythia8::Pythia& a) -> const Pythia8::Event& { return a.event; });
    t.method("event", [](Pythia8::Pythia& a) -> Pythia8::Event& { return a.event; });
    t.method("event", [](const Pythia8::Pythia* a) -> const Pythia8::Event& { return a->event; });
    t.method("event", [](Pythia8::Pythia* a) -> Pythia8::Event& { return a->event; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:323:19
    // signature to use in the veto list: Pythia8::Pythia::event
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding event! methods to provide write access to the field event (" __HERE__ ")");
    t.method("event!", [](Pythia8::Pythia& a, const Pythia8::Event& val) -> Pythia8::Event& { return a.event = val; });

    DEBUG_MSG("Adding event! methods to provide write access to the field event (" __HERE__ ")");
    t.method("event!", [](Pythia8::Pythia* a, const Pythia8::Event& val) -> Pythia8::Event& { return a->event = val; });

    DEBUG_MSG("Adding info methods  to provide read access to the field info (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:326:19
    // signature to use in the veto list: Pythia8::Pythia::info
    t.method("info", [](const Pythia8::Pythia& a) -> const Pythia8::Info & { return a.info; });
    t.method("info", [](const Pythia8::Pythia* a) -> const Pythia8::Info & { return a->info; });

    DEBUG_MSG("Adding logger methods  to provide read access to the field logger (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:329:19
    // signature to use in the veto list: Pythia8::Pythia::logger
    t.method("logger", [](const Pythia8::Pythia& a) -> const Pythia8::Logger& { return a.logger; });
    t.method("logger", [](Pythia8::Pythia& a) -> Pythia8::Logger& { return a.logger; });
    t.method("logger", [](const Pythia8::Pythia* a) -> const Pythia8::Logger& { return a->logger; });
    t.method("logger", [](Pythia8::Pythia* a) -> Pythia8::Logger& { return a->logger; });

    DEBUG_MSG("Adding settings methods  to provide read access to the field settings (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:332:19
    // signature to use in the veto list: Pythia8::Pythia::settings
    t.method("settings", [](const Pythia8::Pythia& a) -> const Pythia8::Settings& { return a.settings; });
    t.method("settings", [](Pythia8::Pythia& a) -> Pythia8::Settings& { return a.settings; });
    t.method("settings", [](const Pythia8::Pythia* a) -> const Pythia8::Settings& { return a->settings; });
    t.method("settings", [](Pythia8::Pythia* a) -> Pythia8::Settings& { return a->settings; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:332:19
    // signature to use in the veto list: Pythia8::Pythia::settings
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding settings! methods to provide write access to the field settings (" __HERE__ ")");
    t.method("settings!", [](Pythia8::Pythia& a, const Pythia8::Settings& val) -> Pythia8::Settings& { return a.settings = val; });

    DEBUG_MSG("Adding settings! methods to provide write access to the field settings (" __HERE__ ")");
    t.method("settings!", [](Pythia8::Pythia* a, const Pythia8::Settings& val) -> Pythia8::Settings& { return a->settings = val; });

    DEBUG_MSG("Adding particleData methods  to provide read access to the field particleData (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:335:19
    // signature to use in the veto list: Pythia8::Pythia::particleData
    t.method("particleData", [](const Pythia8::Pythia& a) -> const Pythia8::ParticleData& { return a.particleData; });
    t.method("particleData", [](Pythia8::Pythia& a) -> Pythia8::ParticleData& { return a.particleData; });
    t.method("particleData", [](const Pythia8::Pythia* a) -> const Pythia8::ParticleData& { return a->particleData; });
    t.method("particleData", [](Pythia8::Pythia* a) -> Pythia8::ParticleData& { return a->particleData; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:335:19
    // signature to use in the veto list: Pythia8::Pythia::particleData
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding particleData! methods to provide write access to the field particleData (" __HERE__ ")");
    t.method("particleData!", [](Pythia8::Pythia& a, const Pythia8::ParticleData& val) -> Pythia8::ParticleData& { return a.particleData = val; });

    DEBUG_MSG("Adding particleData! methods to provide write access to the field particleData (" __HERE__ ")");
    t.method("particleData!", [](Pythia8::Pythia* a, const Pythia8::ParticleData& val) -> Pythia8::ParticleData& { return a->particleData = val; });

    DEBUG_MSG("Adding rndm methods  to provide read access to the field rndm (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:338:19
    // signature to use in the veto list: Pythia8::Pythia::rndm
    t.method("rndm", [](const Pythia8::Pythia& a) -> const Pythia8::Rndm& { return a.rndm; });
    t.method("rndm", [](Pythia8::Pythia& a) -> Pythia8::Rndm& { return a.rndm; });
    t.method("rndm", [](const Pythia8::Pythia* a) -> const Pythia8::Rndm& { return a->rndm; });
    t.method("rndm", [](Pythia8::Pythia* a) -> Pythia8::Rndm& { return a->rndm; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:338:19
    // signature to use in the veto list: Pythia8::Pythia::rndm
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding rndm! methods to provide write access to the field rndm (" __HERE__ ")");
    t.method("rndm!", [](Pythia8::Pythia& a, const Pythia8::Rndm& val) -> Pythia8::Rndm& { return a.rndm = val; });

    DEBUG_MSG("Adding rndm! methods to provide write access to the field rndm (" __HERE__ ")");
    t.method("rndm!", [](Pythia8::Pythia* a, const Pythia8::Rndm& val) -> Pythia8::Rndm& { return a->rndm = val; });

    DEBUG_MSG("Adding coupSM methods  to provide read access to the field coupSM (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:341:19
    // signature to use in the veto list: Pythia8::Pythia::coupSM
    t.method("coupSM", [](const Pythia8::Pythia& a) -> const Pythia8::CoupSM& { return a.coupSM; });
    t.method("coupSM", [](Pythia8::Pythia& a) -> Pythia8::CoupSM& { return a.coupSM; });
    t.method("coupSM", [](const Pythia8::Pythia* a) -> const Pythia8::CoupSM& { return a->coupSM; });
    t.method("coupSM", [](Pythia8::Pythia* a) -> Pythia8::CoupSM& { return a->coupSM; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:341:19
    // signature to use in the veto list: Pythia8::Pythia::coupSM
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding coupSM! methods to provide write access to the field coupSM (" __HERE__ ")");
    t.method("coupSM!", [](Pythia8::Pythia& a, const Pythia8::CoupSM& val) -> Pythia8::CoupSM& { return a.coupSM = val; });

    DEBUG_MSG("Adding coupSM! methods to provide write access to the field coupSM (" __HERE__ ")");
    t.method("coupSM!", [](Pythia8::Pythia* a, const Pythia8::CoupSM& val) -> Pythia8::CoupSM& { return a->coupSM = val; });

    DEBUG_MSG("Adding coupSUSY methods  to provide read access to the field coupSUSY (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:344:19
    // signature to use in the veto list: Pythia8::Pythia::coupSUSY
    t.method("coupSUSY", [](const Pythia8::Pythia& a) -> const Pythia8::CoupSUSY& { return a.coupSUSY; });
    t.method("coupSUSY", [](Pythia8::Pythia& a) -> Pythia8::CoupSUSY& { return a.coupSUSY; });
    t.method("coupSUSY", [](const Pythia8::Pythia* a) -> const Pythia8::CoupSUSY& { return a->coupSUSY; });
    t.method("coupSUSY", [](Pythia8::Pythia* a) -> Pythia8::CoupSUSY& { return a->coupSUSY; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:344:19
    // signature to use in the veto list: Pythia8::Pythia::coupSUSY
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding coupSUSY! methods to provide write access to the field coupSUSY (" __HERE__ ")");
    t.method("coupSUSY!", [](Pythia8::Pythia& a, const Pythia8::CoupSUSY& val) -> Pythia8::CoupSUSY& { return a.coupSUSY = val; });

    DEBUG_MSG("Adding coupSUSY! methods to provide write access to the field coupSUSY (" __HERE__ ")");
    t.method("coupSUSY!", [](Pythia8::Pythia* a, const Pythia8::CoupSUSY& val) -> Pythia8::CoupSUSY& { return a->coupSUSY = val; });

    DEBUG_MSG("Adding slhaInterface methods  to provide read access to the field slhaInterface (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:347:19
    // signature to use in the veto list: Pythia8::Pythia::slhaInterface
    t.method("slhaInterface", [](const Pythia8::Pythia& a) -> const Pythia8::SLHAinterface& { return a.slhaInterface; });
    t.method("slhaInterface", [](Pythia8::Pythia& a) -> Pythia8::SLHAinterface& { return a.slhaInterface; });
    t.method("slhaInterface", [](const Pythia8::Pythia* a) -> const Pythia8::SLHAinterface& { return a->slhaInterface; });
    t.method("slhaInterface", [](Pythia8::Pythia* a) -> Pythia8::SLHAinterface& { return a->slhaInterface; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:347:19
    // signature to use in the veto list: Pythia8::Pythia::slhaInterface
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding slhaInterface! methods to provide write access to the field slhaInterface (" __HERE__ ")");
    t.method("slhaInterface!", [](Pythia8::Pythia& a, const Pythia8::SLHAinterface& val) -> Pythia8::SLHAinterface& { return a.slhaInterface = val; });

    DEBUG_MSG("Adding slhaInterface! methods to provide write access to the field slhaInterface (" __HERE__ ")");
    t.method("slhaInterface!", [](Pythia8::Pythia* a, const Pythia8::SLHAinterface& val) -> Pythia8::SLHAinterface& { return a->slhaInterface = val; });

    DEBUG_MSG("Adding partonSystems methods  to provide read access to the field partonSystems (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:350:19
    // signature to use in the veto list: Pythia8::Pythia::partonSystems
    t.method("partonSystems", [](const Pythia8::Pythia& a) -> const Pythia8::PartonSystems& { return a.partonSystems; });
    t.method("partonSystems", [](Pythia8::Pythia& a) -> Pythia8::PartonSystems& { return a.partonSystems; });
    t.method("partonSystems", [](const Pythia8::Pythia* a) -> const Pythia8::PartonSystems& { return a->partonSystems; });
    t.method("partonSystems", [](Pythia8::Pythia* a) -> Pythia8::PartonSystems& { return a->partonSystems; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:350:19
    // signature to use in the veto list: Pythia8::Pythia::partonSystems
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding partonSystems! methods to provide write access to the field partonSystems (" __HERE__ ")");
    t.method("partonSystems!", [](Pythia8::Pythia& a, const Pythia8::PartonSystems& val) -> Pythia8::PartonSystems& { return a.partonSystems = val; });

    DEBUG_MSG("Adding partonSystems! methods to provide write access to the field partonSystems (" __HERE__ ")");
    t.method("partonSystems!", [](Pythia8::Pythia* a, const Pythia8::PartonSystems& val) -> Pythia8::PartonSystems& { return a->partonSystems = val; });

    DEBUG_MSG("Adding mergingPtr methods  to provide read access to the field mergingPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:353:19
    // signature to use in the veto list: Pythia8::Pythia::mergingPtr
    t.method("mergingPtr", [](const Pythia8::Pythia& a) -> const Pythia8::MergingPtr& { return a.mergingPtr; });
    t.method("mergingPtr", [](Pythia8::Pythia& a) -> Pythia8::MergingPtr& { return a.mergingPtr; });
    t.method("mergingPtr", [](const Pythia8::Pythia* a) -> const Pythia8::MergingPtr& { return a->mergingPtr; });
    t.method("mergingPtr", [](Pythia8::Pythia* a) -> Pythia8::MergingPtr& { return a->mergingPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:353:19
    // signature to use in the veto list: Pythia8::Pythia::mergingPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mergingPtr! methods to provide write access to the field mergingPtr (" __HERE__ ")");
    t.method("mergingPtr!", [](Pythia8::Pythia& a, const Pythia8::MergingPtr& val) -> Pythia8::MergingPtr& { return a.mergingPtr = val; });

    DEBUG_MSG("Adding mergingPtr! methods to provide write access to the field mergingPtr (" __HERE__ ")");
    t.method("mergingPtr!", [](Pythia8::Pythia* a, const Pythia8::MergingPtr& val) -> Pythia8::MergingPtr& { return a->mergingPtr = val; });

    DEBUG_MSG("Adding mergingHooksPtr methods  to provide read access to the field mergingHooksPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:357:20
    // signature to use in the veto list: Pythia8::Pythia::mergingHooksPtr
    t.method("mergingHooksPtr", [](const Pythia8::Pythia& a) -> const Pythia8::MergingHooksPtr& { return a.mergingHooksPtr; });
    t.method("mergingHooksPtr", [](Pythia8::Pythia& a) -> Pythia8::MergingHooksPtr& { return a.mergingHooksPtr; });
    t.method("mergingHooksPtr", [](const Pythia8::Pythia* a) -> const Pythia8::MergingHooksPtr& { return a->mergingHooksPtr; });
    t.method("mergingHooksPtr", [](Pythia8::Pythia* a) -> Pythia8::MergingHooksPtr& { return a->mergingHooksPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:357:20
    // signature to use in the veto list: Pythia8::Pythia::mergingHooksPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mergingHooksPtr! methods to provide write access to the field mergingHooksPtr (" __HERE__ ")");
    t.method("mergingHooksPtr!", [](Pythia8::Pythia& a, const Pythia8::MergingHooksPtr& val) -> Pythia8::MergingHooksPtr& { return a.mergingHooksPtr = val; });

    DEBUG_MSG("Adding mergingHooksPtr! methods to provide write access to the field mergingHooksPtr (" __HERE__ ")");
    t.method("mergingHooksPtr!", [](Pythia8::Pythia* a, const Pythia8::MergingHooksPtr& val) -> Pythia8::MergingHooksPtr& { return a->mergingHooksPtr = val; });

    DEBUG_MSG("Adding heavyIonsPtr methods  to provide read access to the field heavyIonsPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:360:18
    // signature to use in the veto list: Pythia8::Pythia::heavyIonsPtr
    t.method("heavyIonsPtr", [](const Pythia8::Pythia& a) -> const Pythia8::HeavyIonsPtr& { return a.heavyIonsPtr; });
    t.method("heavyIonsPtr", [](Pythia8::Pythia& a) -> Pythia8::HeavyIonsPtr& { return a.heavyIonsPtr; });
    t.method("heavyIonsPtr", [](const Pythia8::Pythia* a) -> const Pythia8::HeavyIonsPtr& { return a->heavyIonsPtr; });
    t.method("heavyIonsPtr", [](Pythia8::Pythia* a) -> Pythia8::HeavyIonsPtr& { return a->heavyIonsPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:360:18
    // signature to use in the veto list: Pythia8::Pythia::heavyIonsPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding heavyIonsPtr! methods to provide write access to the field heavyIonsPtr (" __HERE__ ")");
    t.method("heavyIonsPtr!", [](Pythia8::Pythia& a, const Pythia8::HeavyIonsPtr& val) -> Pythia8::HeavyIonsPtr& { return a.heavyIonsPtr = val; });

    DEBUG_MSG("Adding heavyIonsPtr! methods to provide write access to the field heavyIonsPtr (" __HERE__ ")");
    t.method("heavyIonsPtr!", [](Pythia8::Pythia* a, const Pythia8::HeavyIonsPtr& val) -> Pythia8::HeavyIonsPtr& { return a->heavyIonsPtr = val; });

    DEBUG_MSG("Adding hiHooksPtr methods  to provide read access to the field hiHooksPtr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:363:18
    // signature to use in the veto list: Pythia8::Pythia::hiHooksPtr
    t.method("hiHooksPtr", [](const Pythia8::Pythia& a) -> const Pythia8::HIUserHooksPtr& { return a.hiHooksPtr; });
    t.method("hiHooksPtr", [](Pythia8::Pythia& a) -> Pythia8::HIUserHooksPtr& { return a.hiHooksPtr; });
    t.method("hiHooksPtr", [](const Pythia8::Pythia* a) -> const Pythia8::HIUserHooksPtr& { return a->hiHooksPtr; });
    t.method("hiHooksPtr", [](Pythia8::Pythia* a) -> Pythia8::HIUserHooksPtr& { return a->hiHooksPtr; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:363:18
    // signature to use in the veto list: Pythia8::Pythia::hiHooksPtr
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding hiHooksPtr! methods to provide write access to the field hiHooksPtr (" __HERE__ ")");
    t.method("hiHooksPtr!", [](Pythia8::Pythia& a, const Pythia8::HIUserHooksPtr& val) -> Pythia8::HIUserHooksPtr& { return a.hiHooksPtr = val; });

    DEBUG_MSG("Adding hiHooksPtr! methods to provide write access to the field hiHooksPtr (" __HERE__ ")");
    t.method("hiHooksPtr!", [](Pythia8::Pythia* a, const Pythia8::HIUserHooksPtr& val) -> Pythia8::HIUserHooksPtr& { return a->hiHooksPtr = val; });

    DEBUG_MSG("Adding hadronWidths methods  to provide read access to the field hadronWidths (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:366:19
    // signature to use in the veto list: Pythia8::Pythia::hadronWidths
    t.method("hadronWidths", [](const Pythia8::Pythia& a) -> const Pythia8::HadronWidths& { return a.hadronWidths; });
    t.method("hadronWidths", [](Pythia8::Pythia& a) -> Pythia8::HadronWidths& { return a.hadronWidths; });
    t.method("hadronWidths", [](const Pythia8::Pythia* a) -> const Pythia8::HadronWidths& { return a->hadronWidths; });
    t.method("hadronWidths", [](Pythia8::Pythia* a) -> Pythia8::HadronWidths& { return a->hadronWidths; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:366:19
    // signature to use in the veto list: Pythia8::Pythia::hadronWidths
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding hadronWidths! methods to provide write access to the field hadronWidths (" __HERE__ ")");
    t.method("hadronWidths!", [](Pythia8::Pythia& a, const Pythia8::HadronWidths& val) -> Pythia8::HadronWidths& { return a.hadronWidths = val; });

    DEBUG_MSG("Adding hadronWidths! methods to provide write access to the field hadronWidths (" __HERE__ ")");
    t.method("hadronWidths!", [](Pythia8::Pythia* a, const Pythia8::HadronWidths& val) -> Pythia8::HadronWidths& { return a->hadronWidths = val; });

    DEBUG_MSG("Adding beamA methods  to provide read access to the field beamA (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:369:23
    // signature to use in the veto list: Pythia8::Pythia::beamA
    t.method("beamA", [](const Pythia8::Pythia& a) -> const Pythia8::BeamParticle & { return a.beamA; });
    t.method("beamA", [](const Pythia8::Pythia* a) -> const Pythia8::BeamParticle & { return a->beamA; });

    DEBUG_MSG("Adding beamB methods  to provide read access to the field beamB (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Pythia.h:370:23
    // signature to use in the veto list: Pythia8::Pythia::beamB
    t.method("beamB", [](const Pythia8::Pythia& a) -> const Pythia8::BeamParticle & { return a.beamB; });
    t.method("beamB", [](const Pythia8::Pythia* a) -> const Pythia8::BeamParticle & { return a->beamB; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::Pythia>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_Pythia(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_Pythia(module));
}
