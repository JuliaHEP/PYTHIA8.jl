// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SingleSlowJet> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SingleSlowJet> : std::false_type { };
}

// Class generating the wrapper for type Pythia8::SingleSlowJet
// signature to use in the veto file: Pythia8::SingleSlowJet
struct JlPythia8_SingleSlowJet: public Wrapper {

  JlPythia8_SingleSlowJet(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SingleSlowJet (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:395:7
    jlcxx::TypeWrapper<Pythia8::SingleSlowJet>  t = jlModule.add_type<Pythia8::SingleSlowJet>("Pythia8!SingleSlowJet");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SingleSlowJet>>(new jlcxx::TypeWrapper<Pythia8::SingleSlowJet>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::SingleSlowJet::SingleSlowJet(Pythia8::Vec4, double, double, double, int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:400:3
    t.constructor<Pythia8::Vec4>(/*finalize=*/true);
    t.constructor<Pythia8::Vec4, double>(/*finalize=*/true);
    t.constructor<Pythia8::Vec4, double, double>(/*finalize=*/true);
    t.constructor<Pythia8::Vec4, double, double, double>(/*finalize=*/true);
    t.constructor<Pythia8::Vec4, double, double, double, int>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void Pythia8::SingleSlowJet::SingleSlowJet(const Pythia8::SingleSlowJet &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:403:3
    t.constructor<const Pythia8::SingleSlowJet &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for Pythia8::SingleSlowJet & Pythia8::SingleSlowJet::operator=(const Pythia8::SingleSlowJet &) (" __HERE__ ")");
    // signature to use in the veto list: Pythia8::SingleSlowJet & Pythia8::SingleSlowJet::operator=(const Pythia8::SingleSlowJet &)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:405:18
    t.method("assign", static_cast<Pythia8::SingleSlowJet & (Pythia8::SingleSlowJet::*)(const Pythia8::SingleSlowJet &) >(&Pythia8::SingleSlowJet::operator=));

    DEBUG_MSG("Adding p methods  to provide read access to the field p (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:410:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::p
    t.method("p", [](const Pythia8::SingleSlowJet& a) -> const Pythia8::Vec4& { return a.p; });
    t.method("p", [](Pythia8::SingleSlowJet& a) -> Pythia8::Vec4& { return a.p; });
    t.method("p", [](const Pythia8::SingleSlowJet* a) -> const Pythia8::Vec4& { return a->p; });
    t.method("p", [](Pythia8::SingleSlowJet* a) -> Pythia8::Vec4& { return a->p; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:410:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::p
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding p! methods to provide write access to the field p (" __HERE__ ")");
    t.method("p!", [](Pythia8::SingleSlowJet& a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a.p = val; });

    DEBUG_MSG("Adding p! methods to provide write access to the field p (" __HERE__ ")");
    t.method("p!", [](Pythia8::SingleSlowJet* a, const Pythia8::Vec4& val) -> Pythia8::Vec4& { return a->p = val; });

    DEBUG_MSG("Adding pT2 methods  to provide read access to the field pT2 (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::pT2
    t.method("pT2", [](const Pythia8::SingleSlowJet& a) -> double { return a.pT2; });
    t.method("pT2", [](Pythia8::SingleSlowJet& a) -> double { return a.pT2; });
    t.method("pT2", [](const Pythia8::SingleSlowJet* a) -> double { return a->pT2; });
    t.method("pT2", [](Pythia8::SingleSlowJet* a) -> double { return a->pT2; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::pT2
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding pT2! methods to provide write access to the field pT2 (" __HERE__ ")");
    t.method("pT2!", [](Pythia8::SingleSlowJet& a, double val) -> double { return a.pT2 = val; });

    DEBUG_MSG("Adding pT2! methods to provide write access to the field pT2 (" __HERE__ ")");
    t.method("pT2!", [](Pythia8::SingleSlowJet* a, double val) -> double { return a->pT2 = val; });

    DEBUG_MSG("Adding y methods  to provide read access to the field y (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:17
    // signature to use in the veto list: Pythia8::SingleSlowJet::y
    t.method("y", [](const Pythia8::SingleSlowJet& a) -> double { return a.y; });
    t.method("y", [](Pythia8::SingleSlowJet& a) -> double { return a.y; });
    t.method("y", [](const Pythia8::SingleSlowJet* a) -> double { return a->y; });
    t.method("y", [](Pythia8::SingleSlowJet* a) -> double { return a->y; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:17
    // signature to use in the veto list: Pythia8::SingleSlowJet::y
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding y! methods to provide write access to the field y (" __HERE__ ")");
    t.method("y!", [](Pythia8::SingleSlowJet& a, double val) -> double { return a.y = val; });

    DEBUG_MSG("Adding y! methods to provide write access to the field y (" __HERE__ ")");
    t.method("y!", [](Pythia8::SingleSlowJet* a, double val) -> double { return a->y = val; });

    DEBUG_MSG("Adding phi methods  to provide read access to the field phi (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:20
    // signature to use in the veto list: Pythia8::SingleSlowJet::phi
    t.method("phi", [](const Pythia8::SingleSlowJet& a) -> double { return a.phi; });
    t.method("phi", [](Pythia8::SingleSlowJet& a) -> double { return a.phi; });
    t.method("phi", [](const Pythia8::SingleSlowJet* a) -> double { return a->phi; });
    t.method("phi", [](Pythia8::SingleSlowJet* a) -> double { return a->phi; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:411:20
    // signature to use in the veto list: Pythia8::SingleSlowJet::phi
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding phi! methods to provide write access to the field phi (" __HERE__ ")");
    t.method("phi!", [](Pythia8::SingleSlowJet& a, double val) -> double { return a.phi = val; });

    DEBUG_MSG("Adding phi! methods to provide write access to the field phi (" __HERE__ ")");
    t.method("phi!", [](Pythia8::SingleSlowJet* a, double val) -> double { return a->phi = val; });

    DEBUG_MSG("Adding mult methods  to provide read access to the field mult (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:412:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::mult
    t.method("mult", [](const Pythia8::SingleSlowJet& a) -> int { return a.mult; });
    t.method("mult", [](Pythia8::SingleSlowJet& a) -> int { return a.mult; });
    t.method("mult", [](const Pythia8::SingleSlowJet* a) -> int { return a->mult; });
    t.method("mult", [](Pythia8::SingleSlowJet* a) -> int { return a->mult; });
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/Analysis.h:412:12
    // signature to use in the veto list: Pythia8::SingleSlowJet::mult
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding mult! methods to provide write access to the field mult (" __HERE__ ")");
    t.method("mult!", [](Pythia8::SingleSlowJet& a, int val) -> int { return a.mult = val; });

    DEBUG_MSG("Adding mult! methods to provide write access to the field mult (" __HERE__ ")");
    t.method("mult!", [](Pythia8::SingleSlowJet* a, int val) -> int { return a->mult = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SingleSlowJet>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SingleSlowJet(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SingleSlowJet(module));
}
