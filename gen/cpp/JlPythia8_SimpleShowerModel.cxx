// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlPythia8.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<Pythia8::SimpleShowerModel> : std::false_type { };
  template<> struct DefaultConstructible<Pythia8::SimpleShowerModel> : std::false_type { };
template<> struct SuperType<Pythia8::SimpleShowerModel> { typedef Pythia8::ShowerModel type; };
}

// Class generating the wrapper for type Pythia8::SimpleShowerModel
// signature to use in the veto file: Pythia8::SimpleShowerModel
struct JlPythia8_SimpleShowerModel: public Wrapper {

  JlPythia8_SimpleShowerModel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type Pythia8::SimpleShowerModel (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ShowerModel.h:81:7
    jlcxx::TypeWrapper<Pythia8::SimpleShowerModel>  t = jlModule.add_type<Pythia8::SimpleShowerModel>("Pythia8!SimpleShowerModel",
      jlcxx::julia_base_type<Pythia8::ShowerModel>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SimpleShowerModel>>(new jlcxx::TypeWrapper<Pythia8::SimpleShowerModel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for bool Pythia8::SimpleShowerModel::init(Pythia8::MergingPtr, Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *) (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SimpleShowerModel::init(Pythia8::MergingPtr, Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *)
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ShowerModel.h:92:16
    t.method("init", static_cast<bool (Pythia8::SimpleShowerModel::*)(Pythia8::MergingPtr, Pythia8::MergingHooksPtr, Pythia8::PartonVertexPtr, Pythia8::WeightContainer *) >(&Pythia8::SimpleShowerModel::init));

    DEBUG_MSG("Adding wrapper for bool Pythia8::SimpleShowerModel::initAfterBeams() (" __HERE__ ")");
    // signature to use in the veto list: bool Pythia8::SimpleShowerModel::initAfterBeams()
    // defined in /Users/mato/.julia/artifacts/1efdb4b729131034a90e03a49327ea90a4bfb780/include/Pythia8/ShowerModel.h:99:16
    t.method("initAfterBeams", static_cast<bool (Pythia8::SimpleShowerModel::*)() >(&Pythia8::SimpleShowerModel::initAfterBeams));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<Pythia8::SimpleShowerModel>> type_;
};
std::shared_ptr<Wrapper> newJlPythia8_SimpleShowerModel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlPythia8_SimpleShowerModel(module));
}
