# Example main292.jl Julia equivalent of the Pyhton main292.py from the Pythia8 examples directory.
# Authors: Pere Mato (pere.mato@cern.ch)
# Keywords: basic usage; charged multiplicity; julia;

using Pythia8

pythia = Pythia8.PythiaParallel()

# PythiaParallel reads settings the same way as the normal Pythia does.
# The settings will be copied for each Pythia instance.
pythia << "Beams:eCM = 8000." << 
          "HardQCD:all = on" << 
          "PhaseSpace:pTHatMin = 20."

# The maximum degree of parallelism. If set to 0 (default), the program
# will use the maximum number of threads supported by the hardware.
pythia << "Parallelism:numThreads = 4"

# This defines the number of events generated by PythiaParallel::run.
pythia << "Main:numberOfEvents = 10000"

# Define the histogram to fill.
mult = Pythia8.Hist("charged multiplicity", 100, -0.5, 799.5)

# This will create and initialize each underlying Pythia instance.
function w_init(pythiaNow)::CxxBool
    Core.println("Initializing Pythia with index $(mode(pythiaNow |> settings, "Parallelism:index")).")
    return pythiaNow |> init
end

init(pythia, w_init)

# Generate events. Note, any type of function can be passed to this method,
# as long as the function takes an 'Pythia' object as the argument.
function analyze(pythiaNow)::Nothing
    nCharged = count(p -> isFinal(p) && isCharged(p), pythiaNow |> event)
    #fill!(mult, nFinal(pythiaNow |> event, true))
    fill!(mult, nCharged)
    return
end
Pythia8.run(pythia, analyze)

# PythiaParallel::stat combines statistics for each Pythia instance.
pythia |> Pythia8.stat

# Output histogram.
mult |> print
